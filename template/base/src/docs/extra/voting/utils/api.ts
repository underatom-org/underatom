/**
 * Generated by orval v7.1.0 🍺
 * Do not edit manually.
 * Underatom API
 * Underatom API
 * OpenAPI spec version: 0.1
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";
import { customInstance } from "./mutator";
import type { ErrorType } from "./mutator";
export type VotesControllerCreate201 = { [key: string]: unknown };

export type AppControllerGetTenants200 = { [key: string]: unknown };

export type AppControllerGetSessionInfo200 = { [key: string]: unknown };

export interface OptionDto {
  id: number;
  label: string;
  /**
   * @minimum 0
   * @maximum 100
   */
  progress: number;
}

export interface OptionWithSubOptionDto {
  id: number;
  label: string;
  /**
   * @minimum 0
   * @maximum 100
   */
  progress: number;
  subOptions: OptionDto[];
}

export interface UserVoteDto {
  /** @nullable */
  createdAt: string | null;
  id: number;
  optionId: number;
  /** @nullable */
  subOptionId: number | null;
  userId: string;
  value: number;
}

export interface SingleVote {
  optionId: number;
  subOptionId?: number;
  /**
   * @minimum 1
   * @maximum 3
   */
  value: number;
}

export interface CreateUserVoteDto {
  feedback?: string;
  votes: SingleVote[];
}

export const appControllerGetHello = (signal?: AbortSignal) => {
  return customInstance<string>({ url: `/`, method: "GET", signal });
};

export const getAppControllerGetHelloQueryKey = () => {
  return [`/`] as const;
};

export const getAppControllerGetHelloQueryOptions = <
  TData = Awaited<ReturnType<typeof appControllerGetHello>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof appControllerGetHello>>, TError, TData>>;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getAppControllerGetHelloQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof appControllerGetHello>>> = ({ signal }) =>
    appControllerGetHello(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof appControllerGetHello>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type AppControllerGetHelloQueryResult = NonNullable<Awaited<ReturnType<typeof appControllerGetHello>>>;
export type AppControllerGetHelloQueryError = ErrorType<unknown>;

export function useAppControllerGetHello<
  TData = Awaited<ReturnType<typeof appControllerGetHello>>,
  TError = ErrorType<unknown>,
>(options: {
  query: Partial<UseQueryOptions<Awaited<ReturnType<typeof appControllerGetHello>>, TError, TData>> &
    Pick<DefinedInitialDataOptions<Awaited<ReturnType<typeof appControllerGetHello>>, TError, TData>, "initialData">;
}): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useAppControllerGetHello<
  TData = Awaited<ReturnType<typeof appControllerGetHello>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof appControllerGetHello>>, TError, TData>> &
    Pick<UndefinedInitialDataOptions<Awaited<ReturnType<typeof appControllerGetHello>>, TError, TData>, "initialData">;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useAppControllerGetHello<
  TData = Awaited<ReturnType<typeof appControllerGetHello>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof appControllerGetHello>>, TError, TData>>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useAppControllerGetHello<
  TData = Awaited<ReturnType<typeof appControllerGetHello>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof appControllerGetHello>>, TError, TData>>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getAppControllerGetHelloQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const appControllerGetSessionInfo = (signal?: AbortSignal) => {
  return customInstance<AppControllerGetSessionInfo200>({ url: `/sessioninfo`, method: "GET", signal });
};

export const getAppControllerGetSessionInfoQueryKey = () => {
  return [`/sessioninfo`] as const;
};

export const getAppControllerGetSessionInfoQueryOptions = <
  TData = Awaited<ReturnType<typeof appControllerGetSessionInfo>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof appControllerGetSessionInfo>>, TError, TData>>;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getAppControllerGetSessionInfoQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof appControllerGetSessionInfo>>> = ({ signal }) =>
    appControllerGetSessionInfo(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof appControllerGetSessionInfo>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type AppControllerGetSessionInfoQueryResult = NonNullable<
  Awaited<ReturnType<typeof appControllerGetSessionInfo>>
>;
export type AppControllerGetSessionInfoQueryError = ErrorType<unknown>;

export function useAppControllerGetSessionInfo<
  TData = Awaited<ReturnType<typeof appControllerGetSessionInfo>>,
  TError = ErrorType<unknown>,
>(options: {
  query: Partial<UseQueryOptions<Awaited<ReturnType<typeof appControllerGetSessionInfo>>, TError, TData>> &
    Pick<
      DefinedInitialDataOptions<Awaited<ReturnType<typeof appControllerGetSessionInfo>>, TError, TData>,
      "initialData"
    >;
}): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useAppControllerGetSessionInfo<
  TData = Awaited<ReturnType<typeof appControllerGetSessionInfo>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof appControllerGetSessionInfo>>, TError, TData>> &
    Pick<
      UndefinedInitialDataOptions<Awaited<ReturnType<typeof appControllerGetSessionInfo>>, TError, TData>,
      "initialData"
    >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useAppControllerGetSessionInfo<
  TData = Awaited<ReturnType<typeof appControllerGetSessionInfo>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof appControllerGetSessionInfo>>, TError, TData>>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useAppControllerGetSessionInfo<
  TData = Awaited<ReturnType<typeof appControllerGetSessionInfo>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof appControllerGetSessionInfo>>, TError, TData>>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getAppControllerGetSessionInfoQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const appControllerGetTenants = (signal?: AbortSignal) => {
  return customInstance<AppControllerGetTenants200>({ url: `/tenants`, method: "GET", signal });
};

export const getAppControllerGetTenantsQueryKey = () => {
  return [`/tenants`] as const;
};

export const getAppControllerGetTenantsQueryOptions = <
  TData = Awaited<ReturnType<typeof appControllerGetTenants>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof appControllerGetTenants>>, TError, TData>>;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getAppControllerGetTenantsQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof appControllerGetTenants>>> = ({ signal }) =>
    appControllerGetTenants(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof appControllerGetTenants>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type AppControllerGetTenantsQueryResult = NonNullable<Awaited<ReturnType<typeof appControllerGetTenants>>>;
export type AppControllerGetTenantsQueryError = ErrorType<unknown>;

export function useAppControllerGetTenants<
  TData = Awaited<ReturnType<typeof appControllerGetTenants>>,
  TError = ErrorType<unknown>,
>(options: {
  query: Partial<UseQueryOptions<Awaited<ReturnType<typeof appControllerGetTenants>>, TError, TData>> &
    Pick<DefinedInitialDataOptions<Awaited<ReturnType<typeof appControllerGetTenants>>, TError, TData>, "initialData">;
}): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useAppControllerGetTenants<
  TData = Awaited<ReturnType<typeof appControllerGetTenants>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof appControllerGetTenants>>, TError, TData>> &
    Pick<
      UndefinedInitialDataOptions<Awaited<ReturnType<typeof appControllerGetTenants>>, TError, TData>,
      "initialData"
    >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useAppControllerGetTenants<
  TData = Awaited<ReturnType<typeof appControllerGetTenants>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof appControllerGetTenants>>, TError, TData>>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useAppControllerGetTenants<
  TData = Awaited<ReturnType<typeof appControllerGetTenants>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof appControllerGetTenants>>, TError, TData>>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getAppControllerGetTenantsQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const votesControllerCreate = (createUserVoteDto: CreateUserVoteDto) => {
  return customInstance<VotesControllerCreate201>({
    url: `/votes`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: createUserVoteDto,
  });
};

export const getVotesControllerCreateMutationOptions = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof votesControllerCreate>>,
    TError,
    { data: CreateUserVoteDto },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof votesControllerCreate>>,
  TError,
  { data: CreateUserVoteDto },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof votesControllerCreate>>, { data: CreateUserVoteDto }> = (
    props,
  ) => {
    const { data } = props ?? {};

    return votesControllerCreate(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type VotesControllerCreateMutationResult = NonNullable<Awaited<ReturnType<typeof votesControllerCreate>>>;
export type VotesControllerCreateMutationBody = CreateUserVoteDto;
export type VotesControllerCreateMutationError = ErrorType<unknown>;

export const useVotesControllerCreate = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof votesControllerCreate>>,
    TError,
    { data: CreateUserVoteDto },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof votesControllerCreate>>,
  TError,
  { data: CreateUserVoteDto },
  TContext
> => {
  const mutationOptions = getVotesControllerCreateMutationOptions(options);

  return useMutation(mutationOptions);
};

export const votesControllerGet = (signal?: AbortSignal) => {
  return customInstance<UserVoteDto[]>({ url: `/votes`, method: "GET", signal });
};

export const getVotesControllerGetQueryKey = () => {
  return [`/votes`] as const;
};

export const getVotesControllerGetQueryOptions = <
  TData = Awaited<ReturnType<typeof votesControllerGet>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof votesControllerGet>>, TError, TData>>;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getVotesControllerGetQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof votesControllerGet>>> = ({ signal }) =>
    votesControllerGet(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof votesControllerGet>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type VotesControllerGetQueryResult = NonNullable<Awaited<ReturnType<typeof votesControllerGet>>>;
export type VotesControllerGetQueryError = ErrorType<unknown>;

export function useVotesControllerGet<
  TData = Awaited<ReturnType<typeof votesControllerGet>>,
  TError = ErrorType<unknown>,
>(options: {
  query: Partial<UseQueryOptions<Awaited<ReturnType<typeof votesControllerGet>>, TError, TData>> &
    Pick<DefinedInitialDataOptions<Awaited<ReturnType<typeof votesControllerGet>>, TError, TData>, "initialData">;
}): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useVotesControllerGet<
  TData = Awaited<ReturnType<typeof votesControllerGet>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof votesControllerGet>>, TError, TData>> &
    Pick<UndefinedInitialDataOptions<Awaited<ReturnType<typeof votesControllerGet>>, TError, TData>, "initialData">;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useVotesControllerGet<
  TData = Awaited<ReturnType<typeof votesControllerGet>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof votesControllerGet>>, TError, TData>>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useVotesControllerGet<
  TData = Awaited<ReturnType<typeof votesControllerGet>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof votesControllerGet>>, TError, TData>>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getVotesControllerGetQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const optionsControllerGetAllOptionsWithSubOptions = (signal?: AbortSignal) => {
  return customInstance<OptionWithSubOptionDto[]>({ url: `/options`, method: "GET", signal });
};

export const getOptionsControllerGetAllOptionsWithSubOptionsQueryKey = () => {
  return [`/options`] as const;
};

export const getOptionsControllerGetAllOptionsWithSubOptionsQueryOptions = <
  TData = Awaited<ReturnType<typeof optionsControllerGetAllOptionsWithSubOptions>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof optionsControllerGetAllOptionsWithSubOptions>>, TError, TData>
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getOptionsControllerGetAllOptionsWithSubOptionsQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof optionsControllerGetAllOptionsWithSubOptions>>> = ({
    signal,
  }) => optionsControllerGetAllOptionsWithSubOptions(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof optionsControllerGetAllOptionsWithSubOptions>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type OptionsControllerGetAllOptionsWithSubOptionsQueryResult = NonNullable<
  Awaited<ReturnType<typeof optionsControllerGetAllOptionsWithSubOptions>>
>;
export type OptionsControllerGetAllOptionsWithSubOptionsQueryError = ErrorType<unknown>;

export function useOptionsControllerGetAllOptionsWithSubOptions<
  TData = Awaited<ReturnType<typeof optionsControllerGetAllOptionsWithSubOptions>>,
  TError = ErrorType<unknown>,
>(options: {
  query: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof optionsControllerGetAllOptionsWithSubOptions>>, TError, TData>
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof optionsControllerGetAllOptionsWithSubOptions>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useOptionsControllerGetAllOptionsWithSubOptions<
  TData = Awaited<ReturnType<typeof optionsControllerGetAllOptionsWithSubOptions>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof optionsControllerGetAllOptionsWithSubOptions>>, TError, TData>
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof optionsControllerGetAllOptionsWithSubOptions>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useOptionsControllerGetAllOptionsWithSubOptions<
  TData = Awaited<ReturnType<typeof optionsControllerGetAllOptionsWithSubOptions>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof optionsControllerGetAllOptionsWithSubOptions>>, TError, TData>
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useOptionsControllerGetAllOptionsWithSubOptions<
  TData = Awaited<ReturnType<typeof optionsControllerGetAllOptionsWithSubOptions>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof optionsControllerGetAllOptionsWithSubOptions>>, TError, TData>
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getOptionsControllerGetAllOptionsWithSubOptionsQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
}
