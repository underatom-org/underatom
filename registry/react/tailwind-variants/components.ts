export const componentsRegistry = [
  {
    "name": "rate",
    "type": "registry:ui",
    "relativePath": "ark-ui/rate",
    "stylingName": "rate.tsx",
    "dependencies": [
      "@ark-ui/react",
      "react-aria"
    ],
    "files": [
      {
        "type": "registry:ui",
        "path": "ui/ark-ui/rate/Rate.atoms.tsx",
        "content": "import { RateItemLayout, RateLayout } from \"./rate\";\nimport {\n  URateItemRoot,\n  URateItemRootProps,\n  URateRoot,\n  URateRootProps,\n  URateItemIcon,\n  useRateInternalProvider,\n} from \"./Rate.underatoms\";\n\n/*\n  ====================================\n  Rate\n  ====================================\n*/\n\nexport type RateProps = URateRootProps;\nexport const Rate = (props: RateProps) => {\n  return (\n    <RateLayout\n      renderRoot={(children, className) => (\n        <URateRoot className={className} {...props}>\n          {children}\n        </URateRoot>\n      )}\n      styleProps={{ className: props.className, rateProps: props }}\n      itemSlots={Array.from({ length: props.count ?? 3 }, (_, index) => (\n        <RateItem key={index} index={index + 1} />\n      ))}\n    />\n  );\n};\n\n/*\n  ====================================\n  RateItem\n  ====================================\n*/\n\nexport type RateItemProps = URateItemRootProps;\nexport const RateItem = (props: RateItemProps) => {\n  const rateProps = useRateInternalProvider();\n  return (\n    <RateItemLayout\n      renderRoot={(children, className) => (\n        <URateItemRoot {...props} className={className + \" \" + (props.className ?? \"\")}>\n          {children}\n        </URateItemRoot>\n      )}\n      styleProps={{ className: props.className, rateProps }}\n      iconSlot={<URateItemIcon />}\n    />\n  );\n};\n",
        "target": "underatom/components/ark-ui/rate/Rate.atoms.tsx"
      },
      {
        "type": "registry:ui",
        "path": "ui/ark-ui/rate/Rate.underatoms.tsx",
        "content": "import { RatingGroup } from \"@ark-ui/react\";\nimport { rateClass, rateItemClass, rateItemIconClass, RateStyleProps } from \"./rate\";\nimport { getGenericContext } from \"../../../utils/utils\";\nimport { mergeProps, useFocusRing } from \"react-aria\";\nimport { Rosette } from \"../../../utils/Icons\";\n\n/*\n  ====================================\n  Rate\n  ====================================\n*/\n\nexport const { Provider: RateInternalProvider, useComponentContext: useRateInternalProvider } =\n  getGenericContext<URateRootProps>(\"RateInternalProvider\");\n\nexport type URateRootProps = RatingGroup.RootProps & RateStyleProps;\nexport const URateRoot = ({ children, ...props }: URateRootProps) => {\n  return (\n    <RatingGroup.Root {...props}>\n      <RatingGroup.Control className={rateClass({ className: props.className, rateProps: props })}>\n        <RateInternalProvider value={props}>{children}</RateInternalProvider>\n      </RatingGroup.Control>\n    </RatingGroup.Root>\n  );\n};\n\n/*\n  ====================================\n  RateItem\n  ====================================\n*/\n\nexport type URateItemRootProps = RatingGroup.ItemProps & RateStyleProps;\nexport const URateItemRoot = (props: URateItemRootProps) => {\n  const rateProps = useRateInternalProvider();\n  const { focusProps, isFocusVisible } = useFocusRing();\n  return (\n    <RatingGroup.Item\n      {...mergeProps(props, focusProps)}\n      data-ring={isFocusVisible}\n      className={rateItemClass({ className: props.className, rateProps })}\n    />\n  );\n};\n\nexport type URateItemIconProps = {\n  className?: string;\n};\nexport const URateItemIcon = (props: URateItemIconProps) => {\n  const rateProps = useRateInternalProvider();\n  return (\n    <RatingGroup.ItemContext>\n      {({ highlighted }) =>\n        highlighted ? (\n          <Rosette fill=\"currentColor\" className={rateItemIconClass({ className: props.className, rateProps })} />\n        ) : (\n          <Rosette className={rateItemIconClass({ className: props.className, rateProps })} />\n        )\n      }\n    </RatingGroup.ItemContext>\n  );\n};\n",
        "target": "underatom/components/ark-ui/rate/Rate.underatoms.tsx"
      },
      {
        "type": "registry:ui",
        "path": "ui/ark-ui/rate/rate.tsx",
        "content": "import { tv } from \"../../../utils/extendedTV\";\nimport type { RenderRoot } from \"../../../utils/utils\";\n\n/*\n  ====================================\n  Rate\n  ====================================\n*/\n\nexport type RateStyleProps = {\n  size?: \"md\";\n};\n\nexport type RateType = {\n  className?: string;\n  rateProps?: RateStyleProps;\n};\n\nexport const rateDefaults: Required<RateStyleProps> = {\n  size: \"md\",\n};\n\nexport const rateClass = ({ className }: RateType) => {\n  return `group/rate  ${className}`;\n};\n\nexport const RateLayout = ({\n  renderRoot,\n  styleProps: { className },\n  itemSlots,\n}: {\n  renderRoot: RenderRoot;\n  styleProps: RateType;\n  itemSlots: React.ReactNode;\n}) => renderRoot(<>{itemSlots}</>, `h-fit w-fit flex flex-row ${className}`);\nexport type RateItemType = {\n  className?: string;\n  rateProps?: RateStyleProps;\n};\n\nexport const rateItemClass = ({ className }: RateItemType) => {\n  return `group/rateItem rounded-[50px] z-1 data-[ring=true]:border-solid data-[ring=true]:border-primary-950 data-[ring=true]:border-1 ${className}`;\n};\n\nexport const rateItemIconClass = ({ className }: RateItemType) => {\n  return `\n  w-[22px]\n  h-[22px]\n  text-base-400\n  group-active/rateItem:text-base-400\n  group-data-[disabled]/rate:text-base-400\n  group-hover/rateItem:text-base-600\n  group-data-[ring=true]/rateItem:text-base-600\n  group-data-[highlighted]/rateItem:text-warning-500\n  group-hover/rateItem:group-data-[disabled]/rate:text-base-400\n  group-data-[ring=true]/rateItem:group-data-[disabled]/rate:text-base-400\n  group-data-[highlighted]/rateItem:group-data-[disabled]/rate:text-base-400\n  group-data-[highlighted]/rateItem:group-active/rateItem:group-data-[disabled]/rate:text-base-400\n  group-data-[highlighted]/rateItem:group-hover/rateItem:text-warning-500\n  group-data-[highlighted]/rateItem:group-active/rateItem:text-warning-500\n  group-data-[highlighted]/rateItem:group-data-[ring=true]/rateItem:text-warning-500\n  ${className}\n  `;\n};\n\nexport const RateItemLayout = ({\n  renderRoot,\n  styleProps: { className },\n  iconSlot,\n}: {\n  renderRoot: RenderRoot;\n  styleProps: RateItemType;\n  iconSlot: React.ReactNode;\n}) => renderRoot(<>{iconSlot}</>, `h-7 w-7 flex flex-row justify-center items-center ${className}`);\n\n",
        "target": "underatom/components/ark-ui/rate/rate.tsx"
      }
    ]
  },
  {
    "name": "command",
    "type": "registry:ui",
    "relativePath": "cmdk/command",
    "stylingName": "command.tsx",
    "dependencies": [
      "@radix-ui/react-switch",
      "@radix-ui/react-avatar",
      "cmdk",
      "react-aria"
    ],
    "files": [
      {
        "type": "registry:ui",
        "path": "ui/cmdk/command/Command.atoms.tsx",
        "content": "import { AvatarImageProps } from \"@radix-ui/react-avatar\";\nimport {\n  UCommandEmptyImage,\n  UCommandEmptyImageProps,\n  UCommandEmptyRoot,\n  UCommandEmptyRootProps,\n  UCommandEmptyText,\n  UCommandFooterButtonIcon,\n  UCommandFooterButtonRoot,\n  UCommandFooterButtonRootProps,\n  UCommandFooterElementKBDIcon,\n  UCommandFooterElementKBDRoot,\n  UCommandFooterElementKBDRootProps,\n  UCommandFooterElementRoot,\n  UCommandFooterElementRootProps,\n  UCommandFooterElementText,\n  UCommandFooterRoot,\n  UCommandFooterRootProps,\n  UCommandGroupItemBoxAvatarFallback,\n  UCommandGroupItemBoxAvatarIcon,\n  UCommandGroupItemBoxAvatarImage,\n  UCommandGroupItemBoxAvatarLabel,\n  UCommandGroupItemBoxAvatarRoot,\n  UCommandGroupItemBoxAvatarRootProps,\n  UCommandGroupItemBoxBadgeIcon,\n  UCommandGroupItemBoxBadgeLabel,\n  UCommandGroupItemBoxBadgeRoot,\n  UCommandGroupItemBoxBadgeRootProps,\n  UCommandGroupItemBoxButtonIcon,\n  UCommandGroupItemBoxButtonRoot,\n  UCommandGroupItemBoxButtonRootProps,\n  UCommandGroupItemBoxIcon,\n  UCommandGroupItemBoxLabel,\n  UCommandGroupItemBoxRoot,\n  UCommandGroupItemBoxRootProps,\n  UCommandGroupItemCheckIcon,\n  UCommandGroupItemKBDIcon,\n  UCommandGroupItemKBDLabel,\n  UCommandGroupItemKBDRoot,\n  UCommandGroupItemKBDRootProps,\n  UCommandGroupItemRoot,\n  UCommandGroupItemRootProps,\n  UCommandGroupRoot,\n  UCommandGroupRootProps,\n  UCommandGroupTitle,\n  UCommandRoot,\n  UCommandRootProps,\n  UCommandSearchClearIcon,\n  UCommandSearchClearRoot,\n  UCommandSearchClearRootProps,\n  UCommandSearchIcon,\n  UCommandSearchRoot,\n  UCommandSearchRootProps,\n  UCommandSearchText,\n  URadixCommandGroupItemBoxSwitchHandle,\n  URadixCommandGroupItemBoxSwitchRoot,\n  URadixCommandGroupItemBoxSwitchRootProps,\n  useCommandGroupInternalProvider,\n  useCommandGroupItemInternalProvider,\n  useCommandInternalProvider,\n} from \"./Command.underatoms\";\nimport {\n  CommandEmptyLayout,\n  CommandFooterButtonLayout,\n  CommandFooterElementIconKBDLayout,\n  CommandFooterElementKBDLayout,\n  CommandFooterElementKBDWithIconLayout,\n  CommandFooterElementLayout,\n  CommandFooterLayout,\n  CommandGroupItemBoxAvatarLayout,\n  CommandGroupItemBoxBadgeLayout,\n  CommandGroupItemBoxBadgeWithIconLayout,\n  CommandGroupItemBoxButtonLayout,\n  CommandGroupItemBoxLayout,\n  CommandGroupItemBoxSwitchLayout,\n  CommandGroupItemBoxWithAvatarLayout,\n  CommandGroupItemKBDLayout,\n  CommandGroupItemKBDWithIconLayout,\n  CommandGroupItemLayout,\n  CommandGroupLayout,\n  CommandLayout,\n  CommandSearchClearLayout,\n  CommandSearchLayout,\n} from \"./command\";\nimport { ReactNode } from \"react\";\n\n/*\n  ====================================\n  Command\n  ====================================\n*/\nexport type CommandProps = UCommandRootProps & {\n  searchSlot: ReactNode;\n  groupSlots: ReactNode;\n  footerSlot: ReactNode;\n  emptySlot: ReactNode;\n};\nexport const Command = ({ searchSlot, groupSlots, footerSlot, emptySlot, ...props }: CommandProps) => (\n  <CommandLayout\n    renderRoot={(children, className) => (\n      <UCommandRoot {...props} className={className}>\n        {children}\n      </UCommandRoot>\n    )}\n    styleProps={{ className: props.className, commandProps: props }}\n    searchSlot={searchSlot}\n    groupSlots={groupSlots}\n    footerSlot={footerSlot}\n    emptySlot={emptySlot}\n  />\n);\n\n/*\n  ====================================\n  CommandSearch\n  ====================================\n*/\n\nexport type CommandSearchProps = Omit<UCommandSearchRootProps, \"children\"> & {\n  icon?: (className: string) => React.ReactNode;\n  onClear?: () => void;\n};\nexport const CommandSearch = ({ icon, onClear, ...props }: CommandSearchProps) => {\n  const commandProps = useCommandInternalProvider();\n  return (\n    <CommandSearchLayout\n      renderRoot={(children, className) => (\n        <UCommandSearchRoot {...props} className={className}>\n          {children}\n        </UCommandSearchRoot>\n      )}\n      styleProps={{ className: props.className, commandProps }}\n      iconSlot={icon && <UCommandSearchIcon>{icon}</UCommandSearchIcon>}\n      textSlot={<UCommandSearchText />}\n      clearSlot={onClear && <CommandSearchClear onPress={onClear} />}\n    />\n  );\n};\n\n/*\n  ====================================\n  CommandSearchClear\n  ====================================\n*/\n\nexport type CommandSearchClearProps = Omit<UCommandSearchClearRootProps, \"children\">;\nexport const CommandSearchClear = (props: CommandSearchClearProps) => {\n  const commandProps = useCommandInternalProvider();\n  return (\n    <CommandSearchClearLayout\n      renderRoot={(children, className) => (\n        <UCommandSearchClearRoot {...props} className={className}>\n          {children}\n        </UCommandSearchClearRoot>\n      )}\n      styleProps={{ className: props.className, commandProps }}\n      iconSlot={<UCommandSearchClearIcon />}\n    />\n  );\n};\n\n/*\n  ====================================\n  CommandFooter\n  ====================================\n*/\n\nexport type CommandFooterProps = Omit<UCommandFooterRootProps, \"children\"> & {\n  elementSlots: ReactNode;\n  buttonSlot?: ReactNode;\n};\nexport const CommandFooter = ({ elementSlots, buttonSlot, ...props }: CommandFooterProps) => {\n  const commandProps = useCommandInternalProvider();\n  return (\n    <CommandFooterLayout\n      renderRoot={(children, className) => (\n        <UCommandFooterRoot {...props} className={className}>\n          {children}\n        </UCommandFooterRoot>\n      )}\n      styleProps={{ className: props.className, commandProps }}\n      elementSlots={elementSlots}\n      buttonSlot={buttonSlot}\n    />\n  );\n};\n\n/*\n  ====================================\n  CommandFooterButton\n  ====================================\n*/\n\nexport type CommandFooterButtonProps = Omit<UCommandFooterButtonRootProps, \"children\"> & {\n  icon: (className: string) => ReactNode;\n};\nexport const CommandFooterButton = ({ icon, ...props }: CommandFooterButtonProps) => {\n  const commandProps = useCommandInternalProvider();\n  return (\n    <CommandFooterButtonLayout\n      renderRoot={(children, className) => (\n        <UCommandFooterButtonRoot {...props} className={className}>\n          {children}\n        </UCommandFooterButtonRoot>\n      )}\n      styleProps={{ className: props.className, commandProps }}\n      iconSlot={<UCommandFooterButtonIcon>{icon}</UCommandFooterButtonIcon>}\n    />\n  );\n};\n\n/*\n  ====================================\n  CommandFooterElement\n  ====================================\n*/\n\nexport type CommandFooterElementProps = Omit<UCommandFooterElementRootProps, \"children\"> & {\n  leftLabel?: string;\n  rightLabel?: string;\n  kbdSlot1?: ReactNode;\n  kbdSlot2?: ReactNode;\n  kbdSlot3?: ReactNode;\n  kbdSlot4?: ReactNode;\n};\nexport const CommandFooterElement = ({\n  leftLabel,\n  rightLabel,\n  kbdSlot1,\n  kbdSlot2,\n  kbdSlot3,\n  kbdSlot4,\n  ...props\n}: CommandFooterElementProps) => {\n  const commandProps = useCommandInternalProvider();\n  return (\n    <CommandFooterElementLayout\n      renderRoot={(children, className) => (\n        <UCommandFooterElementRoot {...props} className={className}>\n          {children}\n        </UCommandFooterElementRoot>\n      )}\n      styleProps={{ className: props.className, commandProps }}\n      textSlot1={leftLabel && <UCommandFooterElementText>{leftLabel}</UCommandFooterElementText>}\n      textSlot2={rightLabel && <UCommandFooterElementText>{rightLabel}</UCommandFooterElementText>}\n      kBDSlot1={kbdSlot1}\n      kBDSlot2={kbdSlot2}\n      kBDSlot3={kbdSlot3}\n      kBDSlot4={kbdSlot4}\n    />\n  );\n};\n\n/*\n  ====================================\n  CommandFooterElementKBD\n  ====================================\n*/\n\nexport type CommandFooterElementKBDProps = Omit<UCommandFooterElementKBDRootProps, \"children\"> & {\n  label?: string;\n};\nexport const CommandFooterElementKBD = ({ label, ...props }: CommandFooterElementKBDProps) => {\n  const commandProps = useCommandInternalProvider();\n  return (\n    <CommandFooterElementKBDLayout\n      renderRoot={(children, className) => (\n        <UCommandFooterElementKBDRoot {...props} className={className}>\n          {children}\n        </UCommandFooterElementKBDRoot>\n      )}\n      styleProps={{ className: props.className, commandProps }}\n      labelSlot={label && <UCommandFooterElementText>{label}</UCommandFooterElementText>}\n    />\n  );\n};\n\nexport type CommandFooterElementIconKBDProps = Omit<UCommandFooterElementKBDRootProps, \"children\"> & {\n  icon?: (className: string) => ReactNode;\n};\nexport const CommandFooterElementIconKBD = ({ icon, ...props }: CommandFooterElementIconKBDProps) => {\n  const commandProps = useCommandInternalProvider();\n  return (\n    <CommandFooterElementIconKBDLayout\n      renderRoot={(children, className) => (\n        <UCommandFooterElementKBDRoot {...props} className={className}>\n          {children}\n        </UCommandFooterElementKBDRoot>\n      )}\n      styleProps={{ className: props.className, commandProps }}\n      iconSlot={icon && <UCommandFooterElementKBDIcon>{icon}</UCommandFooterElementKBDIcon>}\n    />\n  );\n};\n\nexport type CommandFooterElementKBDWithIconProps = Omit<UCommandFooterElementKBDRootProps, \"children\"> & {\n  icon?: (className: string) => ReactNode;\n  label?: string;\n};\nexport const CommandFooterElementKBDWithIcon = ({ icon, label, ...props }: CommandFooterElementKBDWithIconProps) => {\n  const commandProps = useCommandInternalProvider();\n  return (\n    <CommandFooterElementKBDWithIconLayout\n      renderRoot={(children, className) => (\n        <UCommandFooterElementKBDRoot {...props} className={className}>\n          {children}\n        </UCommandFooterElementKBDRoot>\n      )}\n      styleProps={{ className: props.className, commandProps }}\n      iconSlot={icon && <UCommandFooterElementKBDIcon>{icon}</UCommandFooterElementKBDIcon>}\n      labelSlot={label && <UCommandFooterElementText>{label}</UCommandFooterElementText>}\n    />\n  );\n};\n\n/*\n  ====================================\n  CommandEmpty\n  ====================================\n*/\n\nexport type CommandEmptyProps = Omit<UCommandEmptyRootProps, \"children\"> & {\n  text: string;\n  image: UCommandEmptyImageProps;\n};\nexport const CommandEmpty = ({ text, image, ...props }: CommandEmptyProps) => {\n  const commandProps = useCommandInternalProvider();\n  return (\n    <CommandEmptyLayout\n      renderRoot={(children, className) => (\n        <UCommandEmptyRoot {...props} className={className}>\n          {children}\n        </UCommandEmptyRoot>\n      )}\n      styleProps={{ className: props.className, commandProps }}\n      textSlot={<UCommandEmptyText>{text}</UCommandEmptyText>}\n      imageSlot={<UCommandEmptyImage {...image} />}\n    />\n  );\n};\n\n/*\n  ====================================\n  CommandGroup\n  ====================================\n*/\n\nexport type CommandGroupProps = Omit<UCommandGroupRootProps, \"children\"> & {\n  title?: string;\n  itemSlots: ReactNode[];\n};\n\nexport const CommandGroup = ({ title, itemSlots, ...props }: CommandGroupProps) => {\n  const commandProps = useCommandInternalProvider();\n  return (\n    <CommandGroupLayout\n      renderRoot={(children, className) => (\n        <UCommandGroupRoot {...props} className={className}>\n          {children}\n        </UCommandGroupRoot>\n      )}\n      styleProps={{ className: props.className, commandProps, commandGroupProps: props }}\n      titleSlot={title && <UCommandGroupTitle>{title}</UCommandGroupTitle>}\n      itemSlots={itemSlots}\n    />\n  );\n};\n\n/*\n  ====================================\n  CommandGroupItem\n  ====================================\n*/\n\nexport type CommandGroupItemProps = Omit<UCommandGroupItemRootProps, \"children\"> & {\n  boxSlot: ReactNode;\n  kbdSlot?: ReactNode;\n};\nexport const CommandGroupItem = ({ boxSlot, kbdSlot, ...props }: CommandGroupItemProps) => {\n  const commandProps = useCommandInternalProvider();\n  const commandGroupProps = useCommandGroupInternalProvider();\n  return (\n    <CommandGroupItemLayout\n      renderRoot={(children, className) => (\n        <UCommandGroupItemRoot {...props} className={className}>\n          {children}\n        </UCommandGroupItemRoot>\n      )}\n      styleProps={{ className: props.className, commandProps, commandGroupProps, commandGroupItemProps: props }}\n      boxSlot={boxSlot}\n      kBDSlot={kbdSlot}\n      checkIconSlot={<UCommandGroupItemCheckIcon />}\n    />\n  );\n};\n\n/*\n  ====================================\n  CommandGroupItemKBD\n  ====================================\n*/\n\nexport type CommandGroupItemKBDProps = Omit<UCommandGroupItemKBDRootProps, \"children\"> & {\n  label: string;\n};\nexport const CommandGroupItemKBD = ({ label, ...props }: CommandGroupItemKBDProps) => {\n  const commandProps = useCommandInternalProvider();\n  const commandGroupProps = useCommandGroupInternalProvider();\n  const commandGroupItemProps = useCommandGroupItemInternalProvider();\n  return (\n    <CommandGroupItemKBDLayout\n      renderRoot={(children, className) => (\n        <UCommandGroupItemKBDRoot {...props} className={className}>\n          {children}\n        </UCommandGroupItemKBDRoot>\n      )}\n      styleProps={{ className: props.className, commandProps, commandGroupProps, commandGroupItemProps }}\n      labelSlot={<UCommandGroupItemKBDLabel>{label}</UCommandGroupItemKBDLabel>}\n    />\n  );\n};\n\nexport type CommandGroupItemKBDWithIconProps = Omit<UCommandGroupItemKBDRootProps, \"children\"> & {\n  icon?: (className: string) => React.ReactNode;\n  label?: string;\n};\nexport const CommandGroupItemKBDWithIcon = ({ icon, label, ...props }: CommandGroupItemKBDWithIconProps) => {\n  const commandProps = useCommandInternalProvider();\n  const commandGroupProps = useCommandGroupInternalProvider();\n  const commandGroupItemProps = useCommandGroupItemInternalProvider();\n  return (\n    <CommandGroupItemKBDWithIconLayout\n      renderRoot={(children, className) => (\n        <UCommandGroupItemKBDRoot {...props} className={className}>\n          {children}\n        </UCommandGroupItemKBDRoot>\n      )}\n      styleProps={{ className: props.className, commandProps, commandGroupProps, commandGroupItemProps }}\n      iconSlot={icon && <UCommandGroupItemKBDIcon>{icon}</UCommandGroupItemKBDIcon>}\n      labelSlot={label && <UCommandGroupItemKBDLabel>{label}</UCommandGroupItemKBDLabel>}\n    />\n  );\n};\n\n/*\n  ====================================\n  CommandGroupItemBox\n  ====================================\n*/\n\nexport type CommandGroupItemBoxProps = Omit<UCommandGroupItemBoxRootProps, \"children\"> & {\n  icon?: (className: string) => React.ReactNode;\n  label: string;\n  badgeSlot?: ReactNode;\n  switchSlot?: ReactNode;\n  buttonSlot1?: ReactNode;\n  buttonSlot2?: ReactNode;\n  buttonSlot3?: ReactNode;\n};\nexport const CommandGroupItemBox = ({\n  icon,\n  label,\n  badgeSlot,\n  switchSlot,\n  buttonSlot1,\n  buttonSlot2,\n  buttonSlot3,\n  ...props\n}: CommandGroupItemBoxProps) => {\n  const commandProps = useCommandInternalProvider();\n  const commandGroupProps = useCommandGroupInternalProvider();\n  const commandGroupItemProps = useCommandGroupItemInternalProvider();\n  return (\n    <CommandGroupItemBoxLayout\n      renderRoot={(children, className) => (\n        <UCommandGroupItemBoxRoot {...props} className={className}>\n          {children}\n        </UCommandGroupItemBoxRoot>\n      )}\n      styleProps={{ className: props.className, commandProps, commandGroupProps, commandGroupItemProps }}\n      iconSlot={icon && <UCommandGroupItemBoxIcon>{icon}</UCommandGroupItemBoxIcon>}\n      labelSlot={<UCommandGroupItemBoxLabel>{label}</UCommandGroupItemBoxLabel>}\n      badgeSlot={badgeSlot}\n      switchSlot={switchSlot}\n      buttonSlot1={buttonSlot1}\n      buttonSlot2={buttonSlot2}\n      buttonSlot3={buttonSlot3}\n    />\n  );\n};\n\nexport type CommandGroupItemBoxWithAvatarProps = Omit<UCommandGroupItemBoxRootProps, \"children\"> & {\n  label: string;\n  avatarSlot?: ReactNode;\n  badgeSlot?: ReactNode;\n  switchSlot?: ReactNode;\n  buttonSlot1?: ReactNode;\n  buttonSlot2?: ReactNode;\n  buttonSlot3?: ReactNode;\n};\nexport const CommandGroupItemBoxWithAvatar = ({\n  label,\n  avatarSlot,\n  badgeSlot,\n  switchSlot,\n  buttonSlot1,\n  buttonSlot2,\n  buttonSlot3,\n  ...props\n}: CommandGroupItemBoxWithAvatarProps) => {\n  const commandProps = useCommandInternalProvider();\n  const commandGroupProps = useCommandGroupInternalProvider();\n  const commandGroupItemProps = useCommandGroupItemInternalProvider();\n  return (\n    <CommandGroupItemBoxWithAvatarLayout\n      renderRoot={(children, className) => (\n        <UCommandGroupItemBoxRoot {...props} className={className}>\n          {children}\n        </UCommandGroupItemBoxRoot>\n      )}\n      styleProps={{ className: props.className, commandProps, commandGroupProps, commandGroupItemProps }}\n      avatarSlot={avatarSlot}\n      labelSlot={<UCommandGroupItemBoxLabel>{label}</UCommandGroupItemBoxLabel>}\n      badgeSlot={badgeSlot}\n      switchSlot={switchSlot}\n      buttonSlot1={buttonSlot1}\n      buttonSlot2={buttonSlot2}\n      buttonSlot3={buttonSlot3}\n    />\n  );\n};\n\n/*\n====================================\nCommandGroupItemBoxAvatar\n====================================\n*/\nexport type CommandGroupItemBoxAvatarProps = Omit<UCommandGroupItemBoxAvatarRootProps, \"children\"> & {\n  imageProps?: AvatarImageProps;\n  fallbackText?: string;\n};\n\nexport const CommandGroupItemBoxAvatar = ({ imageProps, fallbackText, ...props }: CommandGroupItemBoxAvatarProps) => {\n  const commandProps = useCommandInternalProvider();\n  const commandGroupProps = useCommandGroupInternalProvider();\n  const commandGroupItemProps = useCommandGroupItemInternalProvider();\n  return (\n    <CommandGroupItemBoxAvatarLayout\n      renderRoot={(children, className) => (\n        <UCommandGroupItemBoxAvatarRoot {...props} className={className}>\n          {children}\n        </UCommandGroupItemBoxAvatarRoot>\n      )}\n      styleProps={{ className: props.className, commandProps, commandGroupProps, commandGroupItemProps }}\n      imageSlot={imageProps && <UCommandGroupItemBoxAvatarImage {...imageProps} />}\n      labelSlot={\n        fallbackText && (\n          <UCommandGroupItemBoxAvatarFallback>\n            <UCommandGroupItemBoxAvatarLabel>{fallbackText}</UCommandGroupItemBoxAvatarLabel>{\" \"}\n          </UCommandGroupItemBoxAvatarFallback>\n        )\n      }\n    />\n  );\n};\n\nexport type CommandGroupItemBoxAvatarWithIconProps = Omit<UCommandGroupItemBoxAvatarRootProps, \"children\"> & {\n  imageProps?: AvatarImageProps;\n  fallbackIcon?: (className: string) => React.ReactNode;\n};\nexport const CommandGroupItemBoxAvatarWithIcon = ({\n  imageProps,\n  fallbackIcon,\n  ...props\n}: CommandGroupItemBoxAvatarWithIconProps) => {\n  const commandProps = useCommandInternalProvider();\n  const commandGroupProps = useCommandGroupInternalProvider();\n  const commandGroupItemProps = useCommandGroupItemInternalProvider();\n  return (\n    <CommandGroupItemBoxAvatarLayout\n      renderRoot={(children, className) => (\n        <UCommandGroupItemBoxAvatarRoot {...props} className={className}>\n          {children}\n        </UCommandGroupItemBoxAvatarRoot>\n      )}\n      styleProps={{ className: props.className, commandProps, commandGroupProps, commandGroupItemProps }}\n      imageSlot={imageProps && <UCommandGroupItemBoxAvatarImage {...imageProps} />}\n      labelSlot={\n        fallbackIcon && (\n          <UCommandGroupItemBoxAvatarFallback>\n            <UCommandGroupItemBoxAvatarIcon>{fallbackIcon}</UCommandGroupItemBoxAvatarIcon>\n          </UCommandGroupItemBoxAvatarFallback>\n        )\n      }\n    />\n  );\n};\n\n/*\n  ====================================\n  CommandGroupItemBoxSwitch\n  ====================================\n*/\n\nexport type CommandGroupItemBoxSwitchProps = Omit<URadixCommandGroupItemBoxSwitchRootProps, \"children\">;\nexport const CommandGroupItemBoxSwitch = (props: CommandGroupItemBoxSwitchProps) => {\n  const commandProps = useCommandInternalProvider();\n  const commandGroupProps = useCommandGroupInternalProvider();\n  const commandGroupItemProps = useCommandGroupItemInternalProvider();\n  return (\n    <CommandGroupItemBoxSwitchLayout\n      renderRoot={(children, className) => (\n        <URadixCommandGroupItemBoxSwitchRoot {...props} className={className}>\n          {children}\n        </URadixCommandGroupItemBoxSwitchRoot>\n      )}\n      styleProps={{ className: props.className, commandProps, commandGroupProps, commandGroupItemProps }}\n      handleSlot={<URadixCommandGroupItemBoxSwitchHandle />}\n    />\n  );\n};\n\n/*\n  ====================================\n  CommandGroupItemBoxButton\n  ====================================\n*/\n\nexport type CommandGroupItemBoxButtonProps = Omit<UCommandGroupItemBoxButtonRootProps, \"children\"> & {\n  icon: (className: string) => React.ReactNode;\n};\nexport const CommandGroupItemBoxButton = ({ icon, ...props }: CommandGroupItemBoxButtonProps) => {\n  const commandProps = useCommandInternalProvider();\n  const commandGroupProps = useCommandGroupInternalProvider();\n  const commandGroupItemProps = useCommandGroupItemInternalProvider();\n  return (\n    <CommandGroupItemBoxButtonLayout\n      renderRoot={(children, className) => (\n        <UCommandGroupItemBoxButtonRoot {...props} className={className}>\n          {children}\n        </UCommandGroupItemBoxButtonRoot>\n      )}\n      styleProps={{ className: props.className, commandProps, commandGroupProps, commandGroupItemProps }}\n      iconSlot={<UCommandGroupItemBoxButtonIcon>{icon}</UCommandGroupItemBoxButtonIcon>}\n    />\n  );\n};\n\n/*\n  ====================================\n  CommandGroupItemBoxBadge\n  ====================================\n*/\nexport type CommandGroupItemBoxBadgeProps = Omit<UCommandGroupItemBoxBadgeRootProps, \"children\"> & {\n  label: string;\n};\n\nexport const CommandGroupItemBoxBadge = ({ label, ...props }: CommandGroupItemBoxBadgeProps) => {\n  const commandProps = useCommandInternalProvider();\n  const commandGroupProps = useCommandGroupInternalProvider();\n  const commandGroupItemProps = useCommandGroupItemInternalProvider();\n  return (\n    <CommandGroupItemBoxBadgeLayout\n      renderRoot={(children, className) => (\n        <UCommandGroupItemBoxBadgeRoot {...props} className={className}>\n          {children}\n        </UCommandGroupItemBoxBadgeRoot>\n      )}\n      styleProps={{\n        className: props.className,\n        commandProps,\n        commandGroupProps,\n        commandGroupItemProps,\n        commandGroupItemBoxBadgeProps: props,\n      }}\n      labelSlot={<UCommandGroupItemBoxBadgeLabel>{label}</UCommandGroupItemBoxBadgeLabel>}\n    />\n  );\n};\n\nexport type CommandGroupItemBoxBadgeWithIconProps = Omit<UCommandGroupItemBoxBadgeRootProps, \"children\"> & {\n  icon?: (className: string) => React.ReactNode;\n  label?: string;\n};\n\nexport const CommandGroupItemBoxBadgeWithIcon = ({ icon, label, ...props }: CommandGroupItemBoxBadgeWithIconProps) => {\n  const commandProps = useCommandInternalProvider();\n  const commandGroupProps = useCommandGroupInternalProvider();\n  const commandGroupItemProps = useCommandGroupItemInternalProvider();\n  return (\n    <CommandGroupItemBoxBadgeWithIconLayout\n      renderRoot={(children, className) => (\n        <UCommandGroupItemBoxBadgeRoot {...props} className={className}>\n          {children}\n        </UCommandGroupItemBoxBadgeRoot>\n      )}\n      styleProps={{\n        className: props.className,\n        commandProps,\n        commandGroupProps,\n        commandGroupItemProps,\n        commandGroupItemBoxBadgeProps: props,\n      }}\n      iconSlot={icon && <UCommandGroupItemBoxBadgeIcon>{icon}</UCommandGroupItemBoxBadgeIcon>}\n      labelSlot={label && <UCommandGroupItemBoxBadgeLabel>{label}</UCommandGroupItemBoxBadgeLabel>}\n    />\n  );\n};\n",
        "target": "underatom/components/cmdk/command/Command.atoms.tsx"
      },
      {
        "type": "registry:ui",
        "path": "ui/cmdk/command/Command.underatoms.tsx",
        "content": "import { Command, CommandInput } from \"cmdk\";\nimport React, { ReactNode, useRef, useState } from \"react\";\nimport { AriaButtonProps, mergeProps, useButton, useFocusRing } from \"react-aria\";\nimport { Check, X } from \"../../../utils/Icons\";\nimport * as RadixSwitch from \"@radix-ui/react-switch\";\nimport * as RadixAvatar from \"@radix-ui/react-avatar\";\nimport { getGenericContext } from \"../../../utils/utils\";\nimport {\n  CommandGroupItemBoxBadgeStyleProps,\n  CommandGroupItemStyleProps,\n  CommandGroupStyleProps,\n  CommandStyleProps,\n  commandClass,\n  commandEmptyClass,\n  commandEmptyImageClass,\n  commandEmptyTextClass,\n  commandFooterButtonClass,\n  commandFooterButtonIconClass,\n  commandFooterClass,\n  commandFooterElementClass,\n  commandFooterElementKBDClass,\n  commandFooterElementKBDIconClass,\n  commandFooterElementKBDLabelClass,\n  commandFooterElementTextClass,\n  commandGroupClass,\n  commandGroupItemBoxAvatarClass,\n  commandGroupItemBoxAvatarIconClass,\n  commandGroupItemBoxAvatarImageClass,\n  commandGroupItemBoxAvatarLabelClass,\n  commandGroupItemBoxBadgeClass,\n  commandGroupItemBoxBadgeIconClass,\n  commandGroupItemBoxBadgeLabelClass,\n  commandGroupItemBoxButtonClass,\n  commandGroupItemBoxButtonIconClass,\n  commandGroupItemBoxClass,\n  commandGroupItemBoxIconClass,\n  commandGroupItemBoxLabelClass,\n  commandGroupItemBoxSwitchClass,\n  commandGroupItemBoxSwitchHandleClass,\n  commandGroupItemCheckIconClass,\n  commandGroupItemClass,\n  commandGroupItemKBDClass,\n  commandGroupItemKBDIconClass,\n  commandGroupItemKBDLabelClass,\n  commandGroupTitleClass,\n  commandSearchClass,\n  commandSearchClearClass,\n  commandSearchClearIconClass,\n  commandSearchIconClass,\n  commandSearchTextClass,\n} from \"./command\";\n\n/*\n  ====================================\n  Command\n  ====================================\n*/\n\nexport const { Provider: CommandInternalProvider, useComponentContext: useCommandInternalProvider } =\n  getGenericContext<UCommandRootProps>(\"CommandInternalProvider\");\n\nexport type UCommandRootProps = CommandStyleProps & React.ComponentPropsWithoutRef<typeof Command>;\nexport const UCommandRoot = React.forwardRef<React.ElementRef<typeof Command>, UCommandRootProps>(\n  ({ className, ...props }, ref) => {\n    return (\n      <Command ref={ref} className={commandClass({ className, commandProps: props })} {...props}>\n        <CommandInternalProvider value={props}>{props.children}</CommandInternalProvider>\n      </Command>\n    );\n  },\n);\n\nexport type UCommandListProps = React.ComponentPropsWithoutRef<typeof Command.List>;\nexport const UCommandList = Command.List;\n\n/*\n  ====================================\n  CommandSearch\n  ====================================\n*/\n\nexport const { Provider: CommandSearchInternalProvider, useComponentContext: useCommandSearchParentProps } =\n  getGenericContext<\n    UCommandSearchRootProps & {\n      inputRef: React.RefObject<HTMLInputElement>;\n      setIsFocused: (arg: boolean) => void;\n    }\n  >(\"CommandSearchInternalProvider\");\n\nexport type UCommandSearchRootProps = React.ComponentPropsWithoutRef<typeof Command.Input>;\nexport const UCommandSearchRoot = ({ children, className, ...props }: UCommandSearchRootProps) => {\n  const commandProps = useCommandInternalProvider();\n  const inputRef = useRef<HTMLInputElement>(null);\n  const [isFocused, setIsFocused] = useState(false);\n  const handleClick = () => {\n    inputRef.current?.focus();\n  };\n\n  return (\n    <div\n      {...mergeProps(props, {\n        onClick: handleClick,\n      })}\n      data-ring={isFocused}\n      className={commandSearchClass({ className, commandProps })}\n    >\n      <CommandSearchInternalProvider value={{ ...props, inputRef, setIsFocused }}>\n        {children}\n      </CommandSearchInternalProvider>\n    </div>\n  );\n};\n\nexport type UCommandSearchIconProps = {\n  /** Icon render function */\n  children: (className: string) => ReactNode;\n  className?: string;\n};\nexport const UCommandSearchIcon = ({ children, className }: UCommandSearchIconProps) => {\n  const commandProps = useCommandInternalProvider();\n  return <>{children(commandSearchIconClass({ className, commandProps }))}</>;\n};\n\nexport const UCommandSearchText = () => {\n  const commandProps = useCommandInternalProvider();\n  const { inputRef, setIsFocused, ...props } = useCommandSearchParentProps();\n  return (\n    <CommandInput\n      onBlur={() => setIsFocused(false)}\n      onFocus={() => setIsFocused(true)}\n      ref={inputRef}\n      style={{ width: \"100%\", border: \"none\", outline: \"none\", background: \"transparent\" }}\n      className={commandSearchTextClass({ commandProps })}\n      {...props}\n    ></CommandInput>\n  );\n};\n\n/*\n  ====================================\n  CommandSearchClear\n  ====================================\n*/\n\nexport type UCommandSearchClearRootProps = AriaButtonProps<\"button\"> & {\n  innerRef?: React.RefObject<HTMLButtonElement>;\n  className?: string;\n  disabled?: boolean;\n};\nexport const UCommandSearchClearRoot = ({ className, ...props }: UCommandSearchClearRootProps) => {\n  const commandProps = useCommandInternalProvider();\n  const refs = useRef<HTMLButtonElement>(null);\n  const { innerRef = refs } = props;\n  const { buttonProps, isPressed } = useButton(props, refs);\n  const { isFocusVisible, focusProps } = useFocusRing();\n\n  return (\n    <button\n      ref={innerRef}\n      data-active={isPressed}\n      data-ring={isFocusVisible}\n      data-disabled={!!props.disabled}\n      className={commandSearchClearClass({ className, commandProps })}\n      {...mergeProps(buttonProps, focusProps)}\n    >\n      {props.children}\n    </button>\n  );\n};\n\nexport const UCommandSearchClearIcon = () => {\n  const commandProps = useCommandInternalProvider();\n  return <X className={commandSearchClearIconClass({ commandProps })} />;\n};\n\n/*\n  ====================================\n  CommandFooter\n  ====================================\n*/\n\nexport type UCommandFooterRootProps = {\n  children: React.ReactNode;\n  className?: string;\n};\nexport const UCommandFooterRoot = ({ children, className }: UCommandFooterRootProps) => {\n  const commandProps = useCommandInternalProvider();\n  return <div className={commandFooterClass({ className, commandProps })}>{children}</div>;\n};\n\nexport type UCommandFooterTextProps = {\n  children: React.ReactNode;\n  className?: string;\n};\n\n/*\n  ====================================\n  CommandFooterButton\n  ====================================\n*/\n\nexport type UCommandFooterButtonRootProps = AriaButtonProps<\"button\"> & {\n  innerRef?: React.RefObject<HTMLButtonElement>;\n  className?: string;\n};\nexport const UCommandFooterButtonRoot = ({ className, ...props }: UCommandFooterButtonRootProps) => {\n  const commandProps = useCommandInternalProvider();\n  const refs = useRef<HTMLButtonElement>(null);\n  const { innerRef = refs } = props;\n  const { buttonProps, isPressed } = useButton(props, refs);\n  const { isFocusVisible, focusProps } = useFocusRing();\n\n  return (\n    <button\n      ref={innerRef}\n      data-active={isPressed}\n      data-ring={isFocusVisible}\n      className={commandFooterButtonClass({ className, commandProps })}\n      {...mergeProps(buttonProps, focusProps)}\n    >\n      {props.children}\n    </button>\n  );\n};\n\nexport type UCommandFooterButtonIconProps = {\n  /** Icon render function */\n  children: (className: string) => ReactNode;\n  className?: string;\n};\nexport const UCommandFooterButtonIcon = ({ children, className }: UCommandFooterButtonIconProps) => {\n  const commandProps = useCommandInternalProvider();\n  return <>{children(commandFooterButtonIconClass({ className, commandProps }))}</>;\n};\n\n/*\n  ====================================\n  CommandFooterElement\n  ====================================\n*/\n\nexport type UCommandFooterElementRootProps = {\n  children: React.ReactNode;\n  className?: string;\n};\nexport const UCommandFooterElementRoot = ({ children, className }: UCommandFooterElementRootProps) => {\n  const commandProps = useCommandInternalProvider();\n  return <div className={commandFooterElementClass({ className, commandProps })}>{children}</div>;\n};\n\nexport type UCommandFooterElementTextProps = {\n  children: React.ReactNode;\n  className?: string;\n};\nexport const UCommandFooterElementText = ({ children, className }: UCommandFooterElementTextProps) => {\n  const commandProps = useCommandInternalProvider();\n  return <span className={commandFooterElementTextClass({ className, commandProps })}>{children}</span>;\n};\n\n/*\n  ====================================\n  CommandFooterElementKBD\n  ====================================\n*/\n\nexport type UCommandFooterElementKBDRootProps = {\n  children: React.ReactNode;\n  className?: string;\n};\nexport const UCommandFooterElementKBDRoot = ({ children, className }: UCommandFooterElementKBDRootProps) => {\n  const commandProps = useCommandInternalProvider();\n  return <div className={commandFooterElementKBDClass({ className, commandProps })}>{children}</div>;\n};\n\nexport type UCommandFooterElementKBDLabelProps = {\n  children: React.ReactNode;\n  className?: string;\n};\nexport const UCommandFooterElementKBDLabel = ({ children, className }: UCommandFooterElementKBDLabelProps) => {\n  const commandProps = useCommandInternalProvider();\n  return <span className={commandFooterElementKBDLabelClass({ className, commandProps })}>{children}</span>;\n};\n\nexport type UCommandFooterElementKBDIconProps = {\n  children: (className: string) => ReactNode;\n  className?: string;\n};\nexport const UCommandFooterElementKBDIcon = ({ children, className }: UCommandFooterElementKBDIconProps) => {\n  const commandProps = useCommandInternalProvider();\n  return <>{children(commandFooterElementKBDIconClass({ className, commandProps }))}</>;\n};\n\n/*\n  ====================================\n  CommandEmpty\n  ====================================\n*/\n\nexport type UCommandEmptyRootProps = React.ComponentPropsWithoutRef<typeof Command.Empty>;\nexport const UCommandEmptyRoot = (props: UCommandEmptyRootProps) => {\n  const commandProps = useCommandInternalProvider();\n  return <Command.Empty {...props} className={commandEmptyClass({ className: props.className, commandProps })} />;\n};\n\nexport type UCommandEmptyTextProps = {\n  children: React.ReactNode;\n  className?: string;\n};\nexport const UCommandEmptyText = ({ children, className }: UCommandEmptyTextProps) => {\n  const commandProps = useCommandInternalProvider();\n  return <span className={commandEmptyTextClass({ className, commandProps })}>{children}</span>;\n};\n\nexport type UCommandEmptyImageProps = React.ComponentPropsWithoutRef<\"img\">;\nexport const UCommandEmptyImage = ({ className, ...props }: UCommandEmptyImageProps) => {\n  const commandProps = useCommandInternalProvider();\n  return <img {...props} className={commandEmptyImageClass({ className, commandProps })} />;\n};\n\n/*\n  ====================================\n  CommandGroup\n  ====================================\n*/\n\nexport const { Provider: CommandGroupInternalProvider, useComponentContext: useCommandGroupInternalProvider } =\n  getGenericContext<UCommandGroupRootProps>(\"CommandGroupInternalProvider\");\n\nexport type UCommandGroupRootProps = CommandGroupStyleProps &\n  Omit<React.ComponentPropsWithoutRef<typeof Command.Group>, \"heading\">;\nexport const UCommandGroupRoot = (props: UCommandGroupRootProps) => {\n  const commandProps = useCommandInternalProvider();\n  return (\n    <Command.Group\n      {...props}\n      className={commandGroupClass({ className: props.className, commandGroupProps: props, commandProps })}\n    >\n      <CommandGroupInternalProvider value={props}>{props.children}</CommandGroupInternalProvider>\n    </Command.Group>\n  );\n};\n\nexport type UCommandGroupTitleProps = {\n  children: ReactNode;\n};\nexport const UCommandGroupTitle = (props: UCommandGroupTitleProps) => {\n  const commandProps = useCommandInternalProvider();\n  const commandGroupProps = useCommandGroupInternalProvider();\n  return <span className={commandGroupTitleClass({ commandGroupProps, commandProps })}>{props.children}</span>;\n};\n\n/*\n====================================\nCommandGroupItem\n====================================\n*/\n\nexport const { Provider: CommandGroupItemInternalProvider, useComponentContext: useCommandGroupItemInternalProvider } =\n  getGenericContext<UCommandGroupItemRootProps>(\"CommandGroupItemInternalProvider\");\n\nexport type UCommandGroupItemRootProps = CommandGroupItemStyleProps &\n  React.ComponentPropsWithoutRef<typeof Command.Item> & {\n    isSelected?: boolean;\n  };\nexport const UCommandGroupItemRoot = ({ className, ...props }: UCommandGroupItemRootProps) => {\n  const commandProps = useCommandInternalProvider();\n  const commandGroupProps = useCommandGroupInternalProvider();\n  return (\n    <Command.Item\n      {...props}\n      className={commandGroupItemClass({ className, commandGroupProps, commandProps, commandGroupItemProps: props })}\n      data-toggled={!!props.isSelected}\n    >\n      <CommandGroupItemInternalProvider value={props}>{props.children}</CommandGroupItemInternalProvider>\n    </Command.Item>\n  );\n};\n\nexport const UCommandGroupItemCheckIcon = () => {\n  const commandProps = useCommandInternalProvider();\n  const commandGroupProps = useCommandGroupInternalProvider();\n  const commandGroupItemProps = useCommandGroupItemInternalProvider();\n  return (\n    <Check className={commandGroupItemCheckIconClass({ commandGroupItemProps, commandGroupProps, commandProps })} />\n  );\n};\n\n/*\n  ====================================\n  CommandGroupItemKBD\n    ====================================\n*/\n\nexport type UCommandGroupItemKBDRootProps = {\n  children: React.ReactNode;\n  className?: string;\n};\nexport const UCommandGroupItemKBDRoot = ({ children, className }: UCommandGroupItemKBDRootProps) => {\n  const commandProps = useCommandInternalProvider();\n  const commandGroupProps = useCommandGroupInternalProvider();\n  const commandGroupItemProps = useCommandGroupItemInternalProvider();\n  return (\n    <div className={commandGroupItemKBDClass({ className, commandGroupItemProps, commandGroupProps, commandProps })}>\n      {children}\n    </div>\n  );\n};\n\nexport type UCommandGroupItemKBDLabelProps = {\n  children: React.ReactNode;\n  className?: string;\n};\nexport const UCommandGroupItemKBDLabel = ({ children, className }: UCommandGroupItemKBDLabelProps) => {\n  const commandProps = useCommandInternalProvider();\n  const commandGroupProps = useCommandGroupInternalProvider();\n  const commandGroupItemProps = useCommandGroupItemInternalProvider();\n  return (\n    <span\n      className={commandGroupItemKBDLabelClass({ className, commandGroupItemProps, commandGroupProps, commandProps })}\n    >\n      {children}\n    </span>\n  );\n};\n\nexport type UCommandGroupItemKBDIconProps = {\n  children: (className: string) => ReactNode;\n  className?: string;\n};\nexport const UCommandGroupItemKBDIcon = ({ children, className }: UCommandGroupItemKBDIconProps) => {\n  const commandProps = useCommandInternalProvider();\n  const commandGroupProps = useCommandGroupInternalProvider();\n  const commandGroupItemProps = useCommandGroupItemInternalProvider();\n  return (\n    <>{children(commandGroupItemKBDIconClass({ className, commandGroupItemProps, commandGroupProps, commandProps }))}</>\n  );\n};\n\n/*\n  ====================================\n  CommandGroupItemBox\n  ====================================\n*/\n\nexport type UCommandGroupItemBoxRootProps = {\n  children: React.ReactNode;\n  className?: string;\n};\nexport const UCommandGroupItemBoxRoot = ({ children, className }: UCommandGroupItemBoxRootProps) => {\n  const commandProps = useCommandInternalProvider();\n  const commandGroupProps = useCommandGroupInternalProvider();\n  const commandGroupItemProps = useCommandGroupItemInternalProvider();\n  return (\n    <div className={commandGroupItemBoxClass({ className, commandGroupItemProps, commandGroupProps, commandProps })}>\n      {children}\n    </div>\n  );\n};\n\nexport type UCommandGroupItemBoxLabelProps = {\n  children: React.ReactNode;\n  className?: string;\n};\nexport const UCommandGroupItemBoxLabel = ({ children, className }: UCommandGroupItemBoxLabelProps) => {\n  const commandProps = useCommandInternalProvider();\n  const commandGroupProps = useCommandGroupInternalProvider();\n  const commandGroupItemProps = useCommandGroupItemInternalProvider();\n  return (\n    <span\n      className={commandGroupItemBoxLabelClass({ className, commandGroupItemProps, commandGroupProps, commandProps })}\n    >\n      {children}\n    </span>\n  );\n};\n\nexport type UCommandGroupItemBoxIconProps = {\n  children: (className: string) => ReactNode;\n  className?: string;\n};\nexport const UCommandGroupItemBoxIcon = ({ children, className }: UCommandGroupItemBoxIconProps) => {\n  const commandProps = useCommandInternalProvider();\n  const commandGroupProps = useCommandGroupInternalProvider();\n  const commandGroupItemProps = useCommandGroupItemInternalProvider();\n  return (\n    <>{children(commandGroupItemBoxIconClass({ className, commandGroupItemProps, commandGroupProps, commandProps }))}</>\n  );\n};\n\nexport type UCommandGroupItemBoxButtonRootProps = AriaButtonProps<\"button\"> & {\n  innerRef?: React.RefObject<HTMLButtonElement>;\n  className?: string;\n  disabled?: boolean;\n};\n\n/*\n  ====================================\n  CommandGroupItemBoxAvatar\n  ====================================\n*/\n\nexport type UCommandGroupItemBoxAvatarRootProps = RadixAvatar.AvatarProps & {\n  /** Avatar content */\n  children: RadixAvatar.AvatarProps[\"children\"];\n  className?: string;\n};\nexport const UCommandGroupItemBoxAvatarRoot = ({ className, ...props }: UCommandGroupItemBoxAvatarRootProps) => {\n  const commandProps = useCommandInternalProvider();\n  const commandGroupProps = useCommandGroupInternalProvider();\n  const commandGroupItemProps = useCommandGroupItemInternalProvider();\n  return (\n    <RadixAvatar.Root\n      {...props}\n      className={commandGroupItemBoxAvatarClass({ className, commandGroupItemProps, commandGroupProps, commandProps })}\n    />\n  );\n};\n\nexport type UCommandGroupItemBoxAvatarFallbackProps = RadixAvatar.AvatarFallbackProps;\nexport const UCommandGroupItemBoxAvatarFallback = (props: UCommandGroupItemBoxAvatarFallbackProps) => {\n  return <RadixAvatar.Fallback {...props} />;\n};\n\nexport type UCommandGroupItemBoxAvatarLabelProps = {\n  children: ReactNode;\n};\nexport const UCommandGroupItemBoxAvatarLabel = ({ children }: UCommandGroupItemBoxAvatarLabelProps) => {\n  const commandProps = useCommandInternalProvider();\n  const commandGroupProps = useCommandGroupInternalProvider();\n  const commandGroupItemProps = useCommandGroupItemInternalProvider();\n  return (\n    <span className={commandGroupItemBoxAvatarLabelClass({ commandGroupItemProps, commandGroupProps, commandProps })}>\n      {children}\n    </span>\n  );\n};\n\nexport type UCommandGroupItemBoxAvatarIconProps = {\n  /** Icon render function */\n  children: (className: string) => ReactNode;\n};\nexport const UCommandGroupItemBoxAvatarIcon = ({ children }: UCommandGroupItemBoxAvatarIconProps) => {\n  const commandProps = useCommandInternalProvider();\n  const commandGroupProps = useCommandGroupInternalProvider();\n  const commandGroupItemProps = useCommandGroupItemInternalProvider();\n  return (\n    <>{children(commandGroupItemBoxAvatarIconClass({ commandGroupItemProps, commandGroupProps, commandProps }))}</>\n  );\n};\n\nexport type UCommandGroupItemBoxAvatarImageProps = RadixAvatar.AvatarImageProps;\nexport const UCommandGroupItemBoxAvatarImage = (props: UCommandGroupItemBoxAvatarImageProps) => {\n  const commandProps = useCommandInternalProvider();\n  const commandGroupProps = useCommandGroupInternalProvider();\n  const commandGroupItemProps = useCommandGroupItemInternalProvider();\n  return (\n    <RadixAvatar.Image\n      className={commandGroupItemBoxAvatarImageClass({ commandGroupItemProps, commandGroupProps, commandProps })}\n      {...props}\n    />\n  );\n};\n\n/*\n  ====================================\n  CommandGroupItemBoxSwitch\n  ====================================\n*/\n\nexport type URadixCommandGroupItemBoxSwitchRootProps = RadixSwitch.SwitchProps;\nexport const URadixCommandGroupItemBoxSwitchRoot = (props: URadixCommandGroupItemBoxSwitchRootProps) => {\n  const commandProps = useCommandInternalProvider();\n  const commandGroupProps = useCommandGroupInternalProvider();\n  const commandGroupItemProps = useCommandGroupItemInternalProvider();\n  const { disabled: parentDisabled } = useCommandGroupItemInternalProvider();\n  const propsWithDisabled = { ...props, disabled: props.disabled || parentDisabled };\n\n  return (\n    <RadixSwitch.Root\n      {...propsWithDisabled}\n      className={commandGroupItemBoxSwitchClass({\n        className: props.className,\n        commandGroupItemProps,\n        commandGroupProps,\n        commandProps,\n      })}\n    />\n  );\n};\n\nexport type URadixCommandGroupItemBoxSwitchHandle = RadixSwitch.SwitchThumbProps;\nexport const URadixCommandGroupItemBoxSwitchHandle = (props: URadixCommandGroupItemBoxSwitchHandle) => {\n  const commandProps = useCommandInternalProvider();\n  const commandGroupProps = useCommandGroupInternalProvider();\n  const commandGroupItemProps = useCommandGroupItemInternalProvider();\n  return (\n    <RadixSwitch.Thumb\n      {...props}\n      className={commandGroupItemBoxSwitchHandleClass({ commandGroupItemProps, commandGroupProps, commandProps })}\n    />\n  );\n};\n\n/*\n  ====================================\n  CommandGroupItemBoxButton\n  ====================================\n*/\n\nexport const UCommandGroupItemBoxButtonRoot = ({ className, ...props }: UCommandGroupItemBoxButtonRootProps) => {\n  const refs = useRef<HTMLButtonElement>(null);\n  const { innerRef = refs } = props;\n  const { buttonProps, isPressed } = useButton(props, refs);\n  const commandProps = useCommandInternalProvider();\n  const commandGroupProps = useCommandGroupInternalProvider();\n  const commandGroupItemProps = useCommandGroupItemInternalProvider();\n  const { isFocusVisible, focusProps } = useFocusRing();\n\n  return (\n    <button\n      ref={innerRef}\n      data-active={isPressed}\n      data-ring={isFocusVisible}\n      data-disabled={!!props.disabled}\n      className={commandGroupItemBoxButtonClass({ className, commandGroupItemProps, commandGroupProps, commandProps })}\n      {...mergeProps(buttonProps, focusProps)}\n    >\n      {props.children}\n    </button>\n  );\n};\n\nexport type UCommandGroupItemBoxButtonIconProps = {\n  children: (className: string) => ReactNode;\n  className?: string;\n};\nexport const UCommandGroupItemBoxButtonIcon = ({ children, className }: UCommandGroupItemBoxButtonIconProps) => {\n  const commandProps = useCommandInternalProvider();\n  const commandGroupProps = useCommandGroupInternalProvider();\n  const commandGroupItemProps = useCommandGroupItemInternalProvider();\n  return (\n    <>\n      {children(\n        commandGroupItemBoxButtonIconClass({ className, commandGroupItemProps, commandGroupProps, commandProps }),\n      )}\n    </>\n  );\n};\n\n/*\n  ====================================\n  CommandGroupItemBoxBadge\n  ====================================\n*/\n\nexport const { Provider: CommandGroupItemBoxBadgeProvider, useComponentContext: useCommandGroupItemBoxBadgeProvider } =\n  getGenericContext<UCommandGroupItemBoxBadgeRootProps>(\"CommandGroupItemBoxBadgeProvider\");\n\nexport type UCommandGroupItemBoxBadgeRootProps = CommandGroupItemBoxBadgeStyleProps & {\n  children: React.ReactNode;\n  className?: string;\n};\nexport const UCommandGroupItemBoxBadgeRoot = (props: UCommandGroupItemBoxBadgeRootProps) => {\n  const commandProps = useCommandInternalProvider();\n  const commandGroupProps = useCommandGroupInternalProvider();\n  const commandGroupItemProps = useCommandGroupItemInternalProvider();\n  return (\n    <div\n      className={commandGroupItemBoxBadgeClass({\n        className: props.className,\n        commandProps,\n        commandGroupProps,\n        commandGroupItemProps,\n        commandGroupItemBoxBadgeProps: props,\n      })}\n    >\n      <CommandGroupItemBoxBadgeProvider value={props}>{props.children}</CommandGroupItemBoxBadgeProvider>\n    </div>\n  );\n};\n\nexport type UCommandGroupItemBoxBadgeLabelProps = {\n  children: React.ReactNode;\n  className?: string;\n};\nexport const UCommandGroupItemBoxBadgeLabel = ({ children, className }: UCommandGroupItemBoxBadgeLabelProps) => {\n  const commandProps = useCommandInternalProvider();\n  const commandGroupProps = useCommandGroupInternalProvider();\n  const commandGroupItemProps = useCommandGroupItemInternalProvider();\n  const commandGroupItemBoxBadgeProps = useCommandGroupItemBoxBadgeProvider();\n  return (\n    <span\n      className={commandGroupItemBoxBadgeLabelClass({\n        className,\n        commandProps,\n        commandGroupProps,\n        commandGroupItemProps,\n        commandGroupItemBoxBadgeProps,\n      })}\n    >\n      {children}\n    </span>\n  );\n};\n\nexport type UCommandGroupItemBoxBadgeIconProps = {\n  children: (className: string) => ReactNode;\n  className?: string;\n};\nexport const UCommandGroupItemBoxBadgeIcon = ({ children, className }: UCommandGroupItemBoxBadgeIconProps) => {\n  const commandProps = useCommandInternalProvider();\n  const commandGroupProps = useCommandGroupInternalProvider();\n  const commandGroupItemProps = useCommandGroupItemInternalProvider();\n  const commandGroupItemBoxBadgeProps = useCommandGroupItemBoxBadgeProvider();\n  return (\n    <>\n      {children(\n        commandGroupItemBoxBadgeIconClass({\n          className,\n          commandProps,\n          commandGroupProps,\n          commandGroupItemProps,\n          commandGroupItemBoxBadgeProps,\n        }),\n      )}\n    </>\n  );\n};\n",
        "target": "underatom/components/cmdk/command/Command.underatoms.tsx"
      },
      {
        "type": "registry:ui",
        "path": "ui/cmdk/command/command.tsx",
        "content": "import { tv } from \"../../../utils/extendedTV\";\nimport type { RenderRoot } from \"../../../utils/utils\";\n\n/*\n  ====================================\n  Command\n  ====================================\n*/\n\nexport type CommandStyleProps = {\n  size?: \"md\";\n};\n\nexport type CommandType = {\n  className?: string;\n  commandProps?: CommandStyleProps;\n};\n\nexport const commandDefaults: Required<CommandStyleProps> = {\n  size: \"md\",\n};\n\nexport const commandClass = ({ className }: CommandType) => {\n  return `group/command bg-base-50 shadow-lg rounded-md ${className}`;\n};\n\nexport const CommandLayout = ({\n  renderRoot,\n  styleProps: { className },\n  searchSlot,\n  groupSlots,\n  emptySlot,\n  footerSlot,\n}: {\n  renderRoot: RenderRoot;\n  styleProps: CommandType;\n  searchSlot: React.ReactNode;\n  groupSlots: React.ReactNode;\n  emptySlot: React.ReactNode;\n  footerSlot: React.ReactNode;\n}) =>\n  renderRoot(\n    <>\n      {searchSlot}\n      {groupSlots}\n\n      {emptySlot}\n      {footerSlot}\n    </>,\n    `h-fit w-full flex flex-col gap-2 pb-[6px] ${className}`,\n  );\nexport type CommandGroupStyleProps = {\n  togglable?: true | false;\n};\n\nexport type CommandGroupType = {\n  className?: string;\n  commandGroupProps?: CommandGroupStyleProps;\n  commandProps?: CommandStyleProps;\n};\n\nexport const commandGroupDefaults: Required<CommandGroupStyleProps> = {\n  togglable: false,\n};\n\nexport const commandGroupClass = ({ className }: CommandGroupType) => {\n  return `group/commandGroup  ${className}`;\n};\n\nexport const commandGroupTitleClass = ({ className }: CommandGroupType) => {\n  return `text-base-600 text-xs font-text font-medium ${className}`;\n};\n\nexport const CommandGroupLayout = ({\n  renderRoot,\n  styleProps: { className },\n  titleSlot,\n  itemSlots,\n}: {\n  renderRoot: RenderRoot;\n  styleProps: CommandGroupType;\n  titleSlot: React.ReactNode;\n  itemSlots: React.ReactNode;\n}) =>\n  renderRoot(\n    <>\n      <div className=\"h-fit w-full flex flex-col gap-[10px] pl-[6px]\">{titleSlot}</div>\n      <div className=\"h-fit w-full flex flex-col gap-[2px]\">{itemSlots}</div>\n    </>,\n    `h-fit w-full flex flex-col gap-[6px] pt-2 px-2 ${className}`,\n  );\n\nexport type CommandEmptyType = {\n  className?: string;\n  commandProps?: CommandStyleProps;\n};\n\nexport const commandEmptyClass = ({ className }: CommandEmptyType) => {\n  return `group/commandEmpty  ${className}`;\n};\n\nexport const commandEmptyImageClass = ({ className }: CommandEmptyType) => {\n  return `w-[64px] h-[64px] ${className}`;\n};\n\nexport const commandEmptyTextClass = ({ className }: CommandEmptyType) => {\n  return `text-base-600 text-sm font-text font-medium ${className}`;\n};\n\nexport const CommandEmptyLayout = ({\n  renderRoot,\n  styleProps: { className },\n  imageSlot,\n  textSlot,\n}: {\n  renderRoot: RenderRoot;\n  styleProps: CommandEmptyType;\n  imageSlot: React.ReactNode;\n  textSlot: React.ReactNode;\n}) =>\n  renderRoot(\n    <>\n      {imageSlot}\n      {textSlot}\n    </>,\n    `h-fit w-full flex flex-col justify-center items-center gap-1 p-5 ${className}`,\n  );\n\nexport type CommandSearchType = {\n  className?: string;\n  commandProps?: CommandStyleProps;\n};\n\nexport const commandSearchClass = ({ className }: CommandSearchType) => {\n  return `group/commandSearch border-solid border-base-200 border-t-0 border-b-1 border-x-0 bg-transparent rounded-tl-sm rounded-bl-[0px] rounded-tr-sm rounded-br-[0px] cursor-text data-[ring=true]:border-primary-950 ${className}`;\n};\n\nexport const commandSearchIconClass = ({ className }: CommandSearchType) => {\n  return `w-5 h-5 text-base-500 ${className}`;\n};\n\nexport const commandSearchTextClass = ({ className }: CommandSearchType) => {\n  return `text-base-950 text-sm font-text font-normal ${className}`;\n};\n\nexport const CommandSearchLayout = ({\n  renderRoot,\n  styleProps: { className },\n  iconSlot,\n  textSlot,\n  clearSlot,\n}: {\n  renderRoot: RenderRoot;\n  styleProps: CommandSearchType;\n  iconSlot: React.ReactNode;\n  textSlot: React.ReactNode;\n  clearSlot: React.ReactNode;\n}) =>\n  renderRoot(\n    <>\n      <div className=\"h-fit w-full flex flex-row items-center gap-[6px]\">\n        {iconSlot}\n        {textSlot}\n      </div>\n      {clearSlot}\n    </>,\n    `h-[42px] w-full flex flex-row items-center gap-2 px-3 ${className}`,\n  );\n\nexport type CommandFooterType = {\n  className?: string;\n  commandProps?: CommandStyleProps;\n};\n\nexport const commandFooterClass = ({ className }: CommandFooterType) => {\n  return `group/commandFooter border-solid border-base-200 border-t-1 border-b-0 border-x-0 ${className}`;\n};\n\nexport const CommandFooterLayout = ({\n  renderRoot,\n  styleProps: { className },\n  elementSlots,\n  buttonSlot,\n}: {\n  renderRoot: RenderRoot;\n  styleProps: CommandFooterType;\n  elementSlots: React.ReactNode;\n  buttonSlot: React.ReactNode;\n}) =>\n  renderRoot(\n    <>\n      <div className=\"h-fit w-fit flex flex-row items-center gap-5\">{elementSlots}</div>\n      {buttonSlot}\n    </>,\n    `h-11 w-full flex flex-row justify-between items-center gap-5 pt-2 px-5 ${className}`,\n  );\n\nexport type CommandGroupItemStyleProps = {\n  variant?: \"default\" | \"destructive\";\n};\n\nexport type CommandGroupItemType = {\n  className?: string;\n  commandGroupItemProps?: CommandGroupItemStyleProps;\n  commandProps?: CommandStyleProps;\n  commandGroupProps?: CommandGroupStyleProps;\n};\n\nexport const commandGroupItemDefaults: Required<CommandGroupItemStyleProps> = {\n  variant: \"default\",\n};\n\nexport const commandGroupItemClass = ({ className, commandGroupItemProps }: CommandGroupItemType) => {\n  const rootClass = tv({\n    base: \"group/commandGroupItem rounded-sm cursor-pointer transition-all data-[disabled=true]:[background:unset] data-[disabled=true]:pointer-events-none\",\n    variants: {\n      groupItemVariant: {\n        default: \"hover:bg-base-100 data-[selected=true]:bg-base-100 active:bg-base-50\",\n        destructive: \"hover:bg-danger-500 data-[selected=true]:bg-danger-500 active:bg-danger-600\",\n      },\n    },\n\n    defaultVariants: { groupItemVariant: commandGroupItemDefaults.variant },\n  });\n  return rootClass({\n    class: className,\n    groupItemVariant: commandGroupItemProps?.variant,\n  });\n};\n\nexport const commandGroupItemCheckIconClass = ({\n  className,\n  commandGroupProps,\n  commandGroupItemProps,\n}: CommandGroupItemType) => {\n  const checkIconClass = tv({\n    base: \"\",\n    variants: {\n      groupTogglable: {\n        true: `\ngroup-data-[toggled=true]/commandGroupItem:[display:unset]\n  group-data-[toggled=true]/commandGroupItem:w-[14px]\n  group-data-[toggled=true]/commandGroupItem:h-[14px]\n  group-data-[disabled=true]/commandGroupItem:group-data-[toggled=true]/commandGroupItem:text-base-300\n  hidden\n`,\n        false: \"hidden\",\n      },\n      groupItemVariant: { default: \"\", destructive: \"\" },\n    },\n    compoundVariants: [\n      {\n        groupTogglable: [true],\n        groupItemVariant: [\"default\"],\n        class: \"group-data-[toggled=true]/commandGroupItem:text-base-800\",\n      },\n      {\n        groupTogglable: [true],\n        groupItemVariant: [\"destructive\"],\n        class: `\ngroup-data-[toggled=true]/commandGroupItem:text-danger-500\n  group-hover/commandGroupItem:group-data-[toggled=true]/commandGroupItem:text-white\n  group-data-[selected=true]/commandGroupItem:group-data-[toggled=true]/commandGroupItem:text-white\n  group-active/commandGroupItem:group-data-[toggled=true]/commandGroupItem:text-white\n`,\n      },\n    ],\n    defaultVariants: {\n      groupTogglable: commandGroupDefaults.togglable,\n      groupItemVariant: commandGroupItemDefaults.variant,\n    },\n  });\n  return checkIconClass({\n    class: className,\n\n    groupTogglable: commandGroupProps?.togglable,\n    groupItemVariant: commandGroupItemProps?.variant,\n  });\n};\n\nexport const CommandGroupItemLayout = ({\n  renderRoot,\n  styleProps: { className, commandGroupProps },\n  checkIconSlot,\n  boxSlot,\n  kBDSlot,\n}: {\n  renderRoot: RenderRoot;\n  styleProps: CommandGroupItemType;\n  checkIconSlot: React.ReactNode;\n  boxSlot: React.ReactNode;\n  kBDSlot: React.ReactNode;\n}) =>\n  renderRoot(\n    <>\n      <div\n        className={tv({\n          base: \"h-fit w-full flex flex-row items-center\",\n          variants: { groupTogglable: { true: \"gap-[6px]\", false: \"\" } },\n\n          defaultVariants: { groupTogglable: commandGroupDefaults.togglable },\n        })({ groupTogglable: commandGroupProps?.togglable })}\n      >\n        <div\n          className={tv({\n            base: \"flex flex-row justify-center items-center\",\n            variants: {\n              groupTogglable: { true: \"h-fit w-fit min-w-[16px]\", false: \"h-5 w-[0.00009999999747378752px]\" },\n            },\n\n            defaultVariants: { groupTogglable: commandGroupDefaults.togglable },\n          })({ groupTogglable: commandGroupProps?.togglable })}\n        >\n          {checkIconSlot}\n        </div>\n        {boxSlot}\n      </div>\n      {kBDSlot}\n    </>,\n    `h-fit w-full flex flex-row items-center gap-1 py-1 px-[6px] ${className}`,\n  );\n\nexport type CommandSearchClearType = {\n  className?: string;\n  commandProps?: CommandStyleProps;\n};\n\nexport const commandSearchClearClass = ({ className }: CommandSearchClearType) => {\n  return `group/commandSearchClear bg-base-50 data-[active=true]:bg-base-50 rounded-[50px] transition-all hover:bg-base-100 data-[ring=true]:bg-base-100 data-[ring=true]:shadow-focus-ring data-[disabled=true]:[background:unset] ${className}`;\n};\n\nexport const commandSearchClearIconClass = ({ className }: CommandSearchClearType) => {\n  return `\n  w-5\n  h-5\n  text-base-600\n  group-data-[disabled=true]/commandSearchClear:text-base-400\n  group-hover/commandSearchClear:text-base-800\n  group-data-[ring=true]/commandSearchClear:text-base-800\n  group-data-[active=true]/commandSearchClear:text-base-950\n  ${className}\n  `;\n};\n\nexport const CommandSearchClearLayout = ({\n  renderRoot,\n  styleProps: { className },\n  iconSlot,\n}: {\n  renderRoot: RenderRoot;\n  styleProps: CommandSearchClearType;\n  iconSlot: React.ReactNode;\n}) => renderRoot(<>{iconSlot}</>, `h-7 w-7 flex flex-row justify-center items-center gap-5 ${className}`);\n\nexport type CommandGroupItemKBDType = {\n  className?: string;\n  commandProps?: CommandStyleProps;\n  commandGroupProps?: CommandGroupStyleProps;\n  commandGroupItemProps?: CommandGroupItemStyleProps;\n};\n\nexport const commandGroupItemKBDClass = ({ className, commandGroupItemProps }: CommandGroupItemKBDType) => {\n  const rootClass = tv({\n    base: \"group/commandGroupItemKBD border-solid border-1 rounded-sm transition-all\",\n    variants: {\n      groupItemVariant: {\n        default:\n          \"border-base-200 group-active/commandGroupItem:border-base-200 group-data-[disabled=true]/commandGroupItem:border-base-200 group-hover/commandGroupItem:border-base-300 group-data-[selected=true]/commandGroupItem:border-base-300\",\n        destructive:\n          \"border-danger-200 group-hover/commandGroupItem:border-base-50 group-data-[selected=true]/commandGroupItem:border-base-50 group-active/commandGroupItem:border-base-50\",\n      },\n    },\n\n    defaultVariants: { groupItemVariant: commandGroupItemDefaults.variant },\n  });\n  return rootClass({\n    class: className,\n    groupItemVariant: commandGroupItemProps?.variant,\n  });\n};\n\nexport const commandGroupItemKBDLabelClass = ({ className, commandGroupItemProps }: CommandGroupItemKBDType) => {\n  const labelClass = tv({\n    base: \"group-data-[disabled=true]/commandGroupItem:text-base-300 text-xs font-text font-medium select-none\",\n    variants: {\n      groupItemVariant: {\n        default: \"text-base-600\",\n        destructive:\n          \"text-danger-400 group-hover/commandGroupItem:text-white group-data-[selected=true]/commandGroupItem:text-white group-active/commandGroupItem:text-white\",\n      },\n    },\n\n    defaultVariants: { groupItemVariant: commandGroupItemDefaults.variant },\n  });\n  return labelClass({\n    class: className,\n\n    groupItemVariant: commandGroupItemProps?.variant,\n  });\n};\n\nexport const commandGroupItemKBDIconClass = ({ className, commandGroupItemProps }: CommandGroupItemKBDType) => {\n  const iconClass = tv({\n    base: \"w-[14px] h-[14px] group-data-[disabled=true]/commandGroupItem:text-base-300\",\n    variants: {\n      groupItemVariant: {\n        default: \"text-base-600\",\n        destructive:\n          \"text-danger-400 group-hover/commandGroupItem:text-white group-data-[selected=true]/commandGroupItem:text-white group-active/commandGroupItem:text-white\",\n      },\n    },\n\n    defaultVariants: { groupItemVariant: commandGroupItemDefaults.variant },\n  });\n  return iconClass({\n    class: className,\n\n    groupItemVariant: commandGroupItemProps?.variant,\n  });\n};\n\nexport const CommandGroupItemKBDLayout = ({\n  renderRoot,\n  styleProps: { className },\n  labelSlot,\n}: {\n  renderRoot: RenderRoot;\n  styleProps: CommandGroupItemKBDType;\n  labelSlot: React.ReactNode;\n}) => renderRoot(<>{labelSlot}</>, `h-6 w-fit flex flex-row justify-center items-center gap-1 px-1 ${className}`);\nexport const CommandGroupItemKBDWithIconLayout = ({\n  renderRoot,\n  styleProps: { className },\n  iconSlot,\n  labelSlot,\n}: {\n  renderRoot: RenderRoot;\n  styleProps: CommandGroupItemKBDType;\n  iconSlot: React.ReactNode;\n  labelSlot: React.ReactNode;\n}) =>\n  renderRoot(\n    <>\n      {iconSlot}\n      {labelSlot}\n    </>,\n    `h-6 w-fit flex flex-row justify-center items-center gap-1 px-1 ${className}`,\n  );\n\nexport const CommandGroupItemIconKBDLayout = ({\n  renderRoot,\n  styleProps: { className },\n  iconSlot,\n}: {\n  renderRoot: RenderRoot;\n  styleProps: CommandGroupItemKBDType;\n  iconSlot: React.ReactNode;\n}) => renderRoot(<>{iconSlot}</>, `h-6 w-fit flex flex-row justify-center items-center gap-1 px-1 ${className}`);\nexport type CommandGroupItemBoxType = {\n  className?: string;\n  commandProps?: CommandStyleProps;\n  commandGroupProps?: CommandGroupStyleProps;\n  commandGroupItemProps?: CommandGroupItemStyleProps;\n};\n\nexport const commandGroupItemBoxClass = ({ className }: CommandGroupItemBoxType) => {\n  return `group/commandGroupItemBox  ${className}`;\n};\n\nexport const commandGroupItemBoxLabelClass = ({ className, commandGroupItemProps }: CommandGroupItemBoxType) => {\n  const labelClass = tv({\n    base: \"text-sm font-text font-medium select-none group-data-[disabled=true]/commandGroupItem:text-base-300\",\n    variants: {\n      groupItemVariant: {\n        default: \"text-base-950\",\n        destructive:\n          \"text-danger-600 group-active/commandGroupItem:text-danger-600 group-hover/commandGroupItem:text-white group-data-[selected=true]/commandGroupItem:text-white group-active/commandGroupItem:text-white\",\n      },\n    },\n\n    defaultVariants: { groupItemVariant: commandGroupItemDefaults.variant },\n  });\n  return labelClass({\n    class: className,\n\n    groupItemVariant: commandGroupItemProps?.variant,\n  });\n};\n\nexport const commandGroupItemBoxIconClass = ({ className, commandGroupItemProps }: CommandGroupItemBoxType) => {\n  const iconClass = tv({\n    base: \"w-5 h-5 group-data-[disabled=true]/commandGroupItem:text-base-300\",\n    variants: {\n      groupItemVariant: {\n        default: \"text-base-600\",\n        destructive:\n          \"text-danger-600 group-active/commandGroupItem:text-danger-600 group-hover/commandGroupItem:text-white group-data-[selected=true]/commandGroupItem:text-white group-active/commandGroupItem:text-white\",\n      },\n    },\n\n    defaultVariants: { groupItemVariant: commandGroupItemDefaults.variant },\n  });\n  return iconClass({\n    class: className,\n\n    groupItemVariant: commandGroupItemProps?.variant,\n  });\n};\n\nexport const CommandGroupItemBoxLayout = ({\n  renderRoot,\n  styleProps: { className },\n  iconSlot,\n  labelSlot,\n  badgeSlot,\n  switchSlot,\n  buttonSlot1,\n  buttonSlot2,\n  buttonSlot3,\n}: {\n  renderRoot: RenderRoot;\n  styleProps: CommandGroupItemBoxType;\n  iconSlot: React.ReactNode;\n  labelSlot: React.ReactNode;\n  badgeSlot: React.ReactNode;\n  switchSlot: React.ReactNode;\n  buttonSlot1: React.ReactNode;\n  buttonSlot2: React.ReactNode;\n  buttonSlot3: React.ReactNode;\n}) =>\n  renderRoot(\n    <>\n      <div className=\"h-fit w-full flex flex-row items-center gap-1\">\n        <div className=\"h-fit w-full flex flex-row items-center gap-2\">\n          <div className=\"h-fit w-fit flex flex-row items-center gap-[6px]\">\n            {iconSlot}\n            {labelSlot}\n          </div>\n          {badgeSlot}\n        </div>\n      </div>\n      <div className=\"h-fit w-fit flex flex-row items-center gap-1\">\n        {switchSlot}\n        {buttonSlot1}\n        {buttonSlot2}\n        {buttonSlot3}\n      </div>\n    </>,\n    `h-fit w-full flex flex-row items-center gap-2 ${className}`,\n  );\nexport const CommandGroupItemBoxWithAvatarLayout = ({\n  renderRoot,\n  styleProps: { className },\n  avatarSlot,\n  labelSlot,\n  badgeSlot,\n  switchSlot,\n  buttonSlot1,\n  buttonSlot2,\n  buttonSlot3,\n}: {\n  renderRoot: RenderRoot;\n  styleProps: CommandGroupItemBoxType;\n  avatarSlot: React.ReactNode;\n  labelSlot: React.ReactNode;\n  badgeSlot: React.ReactNode;\n  switchSlot: React.ReactNode;\n  buttonSlot1: React.ReactNode;\n  buttonSlot2: React.ReactNode;\n  buttonSlot3: React.ReactNode;\n}) =>\n  renderRoot(\n    <>\n      <div className=\"h-fit w-full flex flex-row items-center gap-1\">\n        <div className=\"h-fit w-full flex flex-row items-center gap-2\">\n          <div className=\"h-fit w-fit flex flex-row items-center gap-[6px]\">\n            {avatarSlot}\n            {labelSlot}\n          </div>\n          {badgeSlot}\n        </div>\n      </div>\n      <div className=\"h-fit w-fit flex flex-row items-center gap-1\">\n        {switchSlot}\n        {buttonSlot1}\n        {buttonSlot2}\n        {buttonSlot3}\n      </div>\n    </>,\n    `h-fit w-full flex flex-row items-center gap-2 ${className}`,\n  );\n\nexport type CommandFooterButtonType = {\n  className?: string;\n  commandProps?: CommandStyleProps;\n};\n\nexport const commandFooterButtonClass = ({ className }: CommandFooterButtonType) => {\n  return `\n  group/commandFooterButton\n  border-solid\n  border-base-200\n  data-[active=true]:border-base-200\n  border-1\n  bg-base-50\n  data-[active=true]:bg-base-50\n  rounded-sm\n  transition-all\n  hover:border-base-300\n  data-[ring=true]:border-base-300\n  disabled:border-base-300\n  hover:bg-base-100\n  data-[ring=true]:bg-base-100\n  data-[ring=true]:shadow-focus-ring\n  disabled:bg-base-200\n  ${className}\n  `;\n};\n\nexport const commandFooterButtonIconClass = ({ className }: CommandFooterButtonType) => {\n  return `w-5 h-5 text-base-800 group-disabled/commandFooterButton:text-base-400 ${className}`;\n};\n\nexport const CommandFooterButtonLayout = ({\n  renderRoot,\n  styleProps: { className },\n  iconSlot,\n}: {\n  renderRoot: RenderRoot;\n  styleProps: CommandFooterButtonType;\n  iconSlot: React.ReactNode;\n}) => renderRoot(<>{iconSlot}</>, `h-7 w-7 flex flex-row justify-center items-center gap-5 ${className}`);\n\nexport type CommandFooterElementType = {\n  className?: string;\n  commandProps?: CommandStyleProps;\n};\n\nexport const commandFooterElementClass = ({ className }: CommandFooterElementType) => {\n  return `group/commandFooterElement  ${className}`;\n};\n\nexport const commandFooterElementTextClass = ({ className }: CommandFooterElementType) => {\n  return `text-base-600 text-xs font-text font-medium ${className}`;\n};\n\nexport const CommandFooterElementLayout = ({\n  renderRoot,\n  styleProps: { className },\n  textSlot1,\n  kBDSlot1,\n  kBDSlot2,\n  kBDSlot3,\n  kBDSlot4,\n  textSlot2,\n}: {\n  renderRoot: RenderRoot;\n  styleProps: CommandFooterElementType;\n  textSlot1: React.ReactNode;\n  textSlot2: React.ReactNode;\n  kBDSlot1: React.ReactNode;\n  kBDSlot2: React.ReactNode;\n  kBDSlot3: React.ReactNode;\n  kBDSlot4: React.ReactNode;\n}) =>\n  renderRoot(\n    <>\n      {textSlot1}\n      {kBDSlot1}\n      {kBDSlot2}\n      {kBDSlot3}\n      {kBDSlot4}\n      {textSlot2}\n    </>,\n    `h-fit w-fit flex flex-row gap-[6px] ${className}`,\n  );\n\nexport type CommandFooterElementKBDType = {\n  className?: string;\n  commandProps?: CommandStyleProps;\n};\n\nexport const commandFooterElementKBDClass = ({ className }: CommandFooterElementKBDType) => {\n  return `group/commandFooterElementKBD bg-base-200 rounded-sm ${className}`;\n};\n\nexport const commandFooterElementKBDLabelClass = ({ className }: CommandFooterElementKBDType) => {\n  return `text-base-600 text-xs font-text font-medium ${className}`;\n};\n\nexport const commandFooterElementKBDIconClass = ({ className }: CommandFooterElementKBDType) => {\n  return `w-[14px] h-[14px] text-base-600 ${className}`;\n};\n\nexport const CommandFooterElementKBDLayout = ({\n  renderRoot,\n  styleProps: { className },\n  labelSlot,\n}: {\n  renderRoot: RenderRoot;\n  styleProps: CommandFooterElementKBDType;\n  labelSlot: React.ReactNode;\n}) => renderRoot(<>{labelSlot}</>, `h-6 w-fit flex flex-row justify-center items-center px-[6px] ${className}`);\nexport const CommandFooterElementKBDWithIconLayout = ({\n  renderRoot,\n  styleProps: { className },\n  iconSlot,\n  labelSlot,\n}: {\n  renderRoot: RenderRoot;\n  styleProps: CommandFooterElementKBDType;\n  iconSlot: React.ReactNode;\n  labelSlot: React.ReactNode;\n}) =>\n  renderRoot(\n    <>\n      {iconSlot}\n      {labelSlot}\n    </>,\n    `h-6 w-fit flex flex-row justify-center items-center gap-1 pl-1 pr-[6px] ${className}`,\n  );\nexport const CommandFooterElementIconKBDLayout = ({\n  renderRoot,\n  styleProps: { className },\n  iconSlot,\n}: {\n  renderRoot: RenderRoot;\n  styleProps: CommandFooterElementKBDType;\n  iconSlot: React.ReactNode;\n}) => renderRoot(<>{iconSlot}</>, `h-6 w-fit flex flex-row justify-center items-center gap-1 px-1 ${className}`);\n\nexport type CommandGroupItemBoxBadgeStyleProps = {\n  color?: \"primary\" | \"base\" | \"red\" | \"green\";\n};\n\nexport type CommandGroupItemBoxBadgeType = {\n  className?: string;\n  commandGroupItemBoxBadgeProps?: CommandGroupItemBoxBadgeStyleProps;\n  commandProps?: CommandStyleProps;\n  commandGroupProps?: CommandGroupStyleProps;\n  commandGroupItemProps?: CommandGroupItemStyleProps;\n};\n\nexport const commandGroupItemBoxBadgeDefaults: Required<CommandGroupItemBoxBadgeStyleProps> = {\n  color: \"primary\",\n};\n\nexport const commandGroupItemBoxBadgeClass = ({\n  className,\n  commandGroupItemProps,\n  commandGroupItemBoxBadgeProps,\n}: CommandGroupItemBoxBadgeType) => {\n  const rootClass = tv({\n    base: \"group/commandGroupItemBoxBadge rounded-[999px] group-data-[disabled=true]/commandGroupItem:bg-base-300\",\n    variants: {\n      groupItemVariant: {\n        default: \"\",\n        destructive:\n          \"transition-all group-hover/commandGroupItem:bg-base-50 group-data-[selected=true]/commandGroupItem:bg-base-50 group-active/commandGroupItem:bg-base-50\",\n      },\n      groupItemBoxBadgeColor: {\n        primary: \"bg-base-950\",\n        base: \"bg-primary-950\",\n        red: \"bg-danger-500\",\n        green: \"bg-success-600\",\n      },\n    },\n\n    defaultVariants: {\n      groupItemVariant: commandGroupItemDefaults.variant,\n      groupItemBoxBadgeColor: commandGroupItemBoxBadgeDefaults.color,\n    },\n  });\n  return rootClass({\n    class: className,\n    groupItemVariant: commandGroupItemProps?.variant,\n    groupItemBoxBadgeColor: commandGroupItemBoxBadgeProps?.color,\n  });\n};\n\nexport const commandGroupItemBoxBadgeLabelClass = ({\n  className,\n  commandGroupItemProps,\n}: CommandGroupItemBoxBadgeType) => {\n  const labelClass = tv({\n    base: \"text-base-50 text-xs font-text font-medium select-none group-data-[disabled=true]/commandGroupItem:text-base-400\",\n    variants: {\n      groupItemVariant: {\n        default: \"\",\n        destructive: `\ngroup-active/commandGroupItem:text-base-50\n  group-active/commandGroupItem:select-none\n  group-data-[disabled=true]/commandGroupItem:select-none\n  group-hover/commandGroupItem:text-base-950\n  group-data-[selected=true]/commandGroupItem:text-base-950\n  group-hover/commandGroupItem:transition-all\n  group-data-[selected=true]/commandGroupItem:transition-all\n`,\n      },\n    },\n\n    defaultVariants: { groupItemVariant: commandGroupItemDefaults.variant },\n  });\n  return labelClass({\n    class: className,\n\n    groupItemVariant: commandGroupItemProps?.variant,\n  });\n};\n\nexport const commandGroupItemBoxBadgeIconClass = ({\n  className,\n  commandGroupItemProps,\n}: CommandGroupItemBoxBadgeType) => {\n  const iconClass = tv({\n    base: \"w-3 h-3 text-base-50 group-data-[disabled=true]/commandGroupItem:text-base-400\",\n    variants: {\n      groupItemVariant: {\n        default: \"\",\n        destructive:\n          \"group-active/commandGroupItem:text-base-50 group-hover/commandGroupItem:text-base-950 group-data-[selected=true]/commandGroupItem:text-base-950\",\n      },\n    },\n\n    defaultVariants: { groupItemVariant: commandGroupItemDefaults.variant },\n  });\n  return iconClass({\n    class: className,\n\n    groupItemVariant: commandGroupItemProps?.variant,\n  });\n};\n\nexport const CommandGroupItemBoxBadgeLayout = ({\n  renderRoot,\n  styleProps: { className },\n  labelSlot,\n}: {\n  renderRoot: RenderRoot;\n  styleProps: CommandGroupItemBoxBadgeType;\n  labelSlot: React.ReactNode;\n}) => renderRoot(<>{labelSlot}</>, `h-6 w-fit flex flex-row justify-center items-center px-2 ${className}`);\nexport const CommandGroupItemBoxBadgeWithIconLayout = ({\n  renderRoot,\n  styleProps: { className },\n  iconSlot,\n  labelSlot,\n}: {\n  renderRoot: RenderRoot;\n  styleProps: CommandGroupItemBoxBadgeType;\n  iconSlot: React.ReactNode;\n  labelSlot: React.ReactNode;\n}) =>\n  renderRoot(\n    <>\n      {iconSlot}\n      {labelSlot}\n    </>,\n    `h-6 w-fit flex flex-row justify-center items-center gap-1 pl-1 pr-2 ${className}`,\n  );\n\nexport type CommandGroupItemBoxAvatarType = {\n  className?: string;\n  commandProps?: CommandStyleProps;\n  commandGroupProps?: CommandGroupStyleProps;\n  commandGroupItemProps?: CommandGroupItemStyleProps;\n};\n\nexport const commandGroupItemBoxAvatarClass = ({ className }: CommandGroupItemBoxAvatarType) => {\n  return `\n  group/commandGroupItemBoxAvatar\n  bg-base-100\n  group-data-[disabled=true]/commandGroupItem:bg-base-100\n  rounded-[999px]\n  transition-all\n  group-hover/commandGroupItem:bg-base-50\n  group-data-[selected=true]/commandGroupItem:bg-base-50\n  group-active/commandGroupItem:bg-base-50\n  ${className}\n  `;\n};\n\nexport const commandGroupItemBoxAvatarImageClass = ({ className }: CommandGroupItemBoxAvatarType) => {\n  return `w-7 h-7 rounded-[999px] group-data-[disabled=true]/commandGroupItem:opacity-[0.6] ${className}`;\n};\n\nexport const commandGroupItemBoxAvatarLabelClass = ({ className }: CommandGroupItemBoxAvatarType) => {\n  return `text-base-600 text-sm font-text font-medium select-none group-data-[disabled=true]/commandGroupItem:text-base-400 ${className}`;\n};\n\nexport const commandGroupItemBoxAvatarIconClass = ({ className }: CommandGroupItemBoxAvatarType) => {\n  return `w-5 h-5 text-base-600 group-data-[disabled=true]/commandGroupItem:text-base-400 ${className}`;\n};\n\nexport const CommandGroupItemBoxAvatarLayout = ({\n  renderRoot,\n  styleProps: { className },\n  imageSlot,\n  labelSlot,\n}: {\n  renderRoot: RenderRoot;\n  styleProps: CommandGroupItemBoxAvatarType;\n  imageSlot: React.ReactNode;\n  labelSlot: React.ReactNode;\n}) =>\n  renderRoot(\n    <>\n      {imageSlot}\n      {labelSlot}\n    </>,\n    `h-7 w-7 flex flex-row justify-center items-center ${className}`,\n  );\nexport const CommandGroupItemBoxAvatarWithIconLayout = ({\n  renderRoot,\n  styleProps: { className },\n  imageSlot,\n  iconSlot,\n}: {\n  renderRoot: RenderRoot;\n  styleProps: CommandGroupItemBoxAvatarType;\n  imageSlot: React.ReactNode;\n  iconSlot: React.ReactNode;\n}) =>\n  renderRoot(\n    <>\n      {imageSlot}\n      {iconSlot}\n    </>,\n    `h-7 w-7 flex flex-row justify-center items-center ${className}`,\n  );\n\nexport type CommandGroupItemBoxSwitchType = {\n  className?: string;\n  commandProps?: CommandStyleProps;\n  commandGroupProps?: CommandGroupStyleProps;\n  commandGroupItemProps?: CommandGroupItemStyleProps;\n};\n\nexport const commandGroupItemBoxSwitchClass = ({ className, commandGroupItemProps }: CommandGroupItemBoxSwitchType) => {\n  const rootClass = tv({\n    base: \"group/commandGroupItemBoxSwitch group-data-[disabled=true]/commandGroupItem:group-data-[toggled=true]/commandGroupItem:bg-base-200 rounded-[50px] transition-all group-data-[disabled=true]/commandGroupItem:pointer-events-none\",\n    variants: {\n      groupItemVariant: {\n        default: `\nbg-base-200\n  group-active/commandGroupItem:bg-base-200\n  group-data-[disabled=true]/commandGroupItem:bg-base-200\n  group-hover/commandGroupItem:bg-base-300\n  group-data-[selected=true]/commandGroupItem:bg-base-300\n  group-data-[toggled=true]/commandGroupItem:bg-primary-950\n  group-hover/commandGroupItem:group-data-[toggled=true]/commandGroupItem:bg-primary-950\n  group-active/commandGroupItem:group-data-[toggled=true]/commandGroupItem:bg-primary-950\n  group-data-[selected=true]/commandGroupItem:group-data-[toggled=true]/commandGroupItem:bg-primary-950\n`,\n        destructive: `\nbg-danger-100\n  group-data-[disabled=true]/commandGroupItem:bg-base-200\n  group-data-[toggled=true]/commandGroupItem:bg-danger-500\n  group-hover/commandGroupItem:group-data-[toggled=true]/commandGroupItem:bg-base-50\n  group-data-[selected=true]/commandGroupItem:group-data-[toggled=true]/commandGroupItem:bg-base-50\n  group-active/commandGroupItem:group-data-[toggled=true]/commandGroupItem:bg-base-50\n`,\n      },\n    },\n\n    defaultVariants: { groupItemVariant: commandGroupItemDefaults.variant },\n  });\n  return rootClass({\n    class: className,\n    groupItemVariant: commandGroupItemProps?.variant,\n  });\n};\n\nexport const commandGroupItemBoxSwitchHandleClass = ({\n  className,\n  commandGroupItemProps,\n}: CommandGroupItemBoxSwitchType) => {\n  const handleClass = tv({\n    base: `\nw-6\n  h-6\n  rounded-[50px]\n  transition-all\n  group-data-[disabled=true]/commandGroupItem:bg-base-300\n  group-data-[toggled=true]/commandGroupItem:bg-base-50\n  group-data-[disabled=true]/commandGroupItem:group-data-[toggled=true]/commandGroupItem:bg-base-300\n`,\n    variants: {\n      groupItemVariant: {\n        default: \"bg-primary-950\",\n        destructive: `\nbg-danger-500\n  group-hover/commandGroupItem:group-data-[toggled=true]/commandGroupItem:bg-danger-500\n  group-data-[selected=true]/commandGroupItem:group-data-[toggled=true]/commandGroupItem:bg-danger-500\n  group-active/commandGroupItem:group-data-[toggled=true]/commandGroupItem:bg-danger-500\n`,\n      },\n    },\n\n    defaultVariants: { groupItemVariant: commandGroupItemDefaults.variant },\n  });\n  return handleClass({\n    class: className,\n\n    groupItemVariant: commandGroupItemProps?.variant,\n  });\n};\n\nexport const CommandGroupItemBoxSwitchLayout = ({\n  renderRoot,\n  styleProps: { className },\n  handleSlot,\n}: {\n  renderRoot: RenderRoot;\n  styleProps: CommandGroupItemBoxSwitchType;\n  handleSlot: React.ReactNode;\n}) =>\n  renderRoot(\n    <>{handleSlot}</>,\n    `h-7 w-12 flex flex-row items-center px-[2px] group-data-[toggled=true]/commandGroupItem:pl-[22px] group-data-[toggled=true]/commandGroupItem:pr-[2px] ${className}`,\n  );\n\nexport type CommandGroupItemBoxButtonType = {\n  className?: string;\n  commandProps?: CommandStyleProps;\n  commandGroupProps?: CommandGroupStyleProps;\n  commandGroupItemProps?: CommandGroupItemStyleProps;\n};\n\nexport const commandGroupItemBoxButtonClass = ({ className, commandGroupItemProps }: CommandGroupItemBoxButtonType) => {\n  const rootClass = tv({\n    base: `\ngroup/commandGroupItemBoxButton\n  border-solid\n  group-data-[disabled=true]/commandGroupItem:border-base-300\n  border-1\n  rounded-sm\n  transition-all\n  data-[ring=true]:shadow-focus-ring\n  data-[ring=true]:z-1\n  group-data-[disabled=true]/commandGroupItem:bg-base-200\n  data-[disabled=true]:bg-base-200\n  group-data-[disabled=true]/commandGroupItem:data-[ring=true]:shadow-none\n  group-data-[disabled=true]/commandGroupItem:hover:bg-base-200\n  group-data-[disabled=true]/commandGroupItem:data-[ring=true]:bg-base-200\n  group-data-[disabled=true]/commandGroupItem:data-[active=true]:bg-base-200\n  group-data-[disabled=true]/commandGroupItem:data-[state=open]:bg-base-200\n  group-data-[disabled=true]/commandGroupItem:data-[state=open]:border-base-300\n`,\n    variants: {\n      groupItemVariant: {\n        default: `\nborder-base-300\n  bg-base-50\n  data-[active=true]:bg-base-50\n  hover:bg-base-100\n  data-[state=open]:bg-base-100\n  data-[ring=true]:bg-base-100\n  data-[state=open]:border-primary-950\n  group-data-[disabled=true]/commandGroupItem:data-[active=true]:bg-base-50\n  group-data-[disabled=true]/commandGroupItem:hover:bg-base-100\n  group-data-[disabled=true]/commandGroupItem:data-[state=open]:bg-base-100\n  group-data-[disabled=true]/commandGroupItem:data-[ring=true]:bg-base-100\n  group-data-[disabled=true]/commandGroupItem:data-[state=open]:border-primary-950\n`,\n        destructive: `\ndata-[disabled=true]:border-base-300\n  border-danger-300\n  data-[active=true]:border-danger-300\n  bg-danger-50\n  data-[active=true]:bg-danger-50\n  hover:border-danger-400\n  data-[ring=true]:border-danger-400\n  hover:bg-danger-100\n  data-[state=open]:bg-danger-100\n  data-[ring=true]:bg-danger-100\n  data-[state=open]:border-danger-950\n  group-data-[disabled=true]/commandGroupItem:hover:border-base-300\n  group-data-[disabled=true]/commandGroupItem:data-[ring=true]:border-base-300\n  group-data-[disabled=true]/commandGroupItem:data-[active=true]:border-base-300\n  group-data-[disabled=true]/commandGroupItem:data-[active=true]:border-danger-300\n  group-data-[disabled=true]/commandGroupItem:data-[active=true]:bg-danger-50\n  group-data-[disabled=true]/commandGroupItem:hover:border-danger-400\n  group-data-[disabled=true]/commandGroupItem:data-[ring=true]:border-danger-400\n  group-data-[disabled=true]/commandGroupItem:hover:bg-danger-100\n  group-data-[disabled=true]/commandGroupItem:data-[state=open]:bg-danger-100\n  group-data-[disabled=true]/commandGroupItem:data-[ring=true]:bg-danger-100\n  group-data-[disabled=true]/commandGroupItem:data-[state=open]:border-danger-950\n`,\n      },\n    },\n\n    defaultVariants: { groupItemVariant: commandGroupItemDefaults.variant },\n  });\n  return rootClass({\n    class: className,\n    groupItemVariant: commandGroupItemProps?.variant,\n  });\n};\n\nexport const commandGroupItemBoxButtonIconClass = ({\n  className,\n  commandGroupItemProps,\n}: CommandGroupItemBoxButtonType) => {\n  const iconClass = tv({\n    base: `\nw-5\n  group-data-[disabled=true]/commandGroupItem:group-data-[disabled=true]/commandGroupItemBoxButton:w-5\n  h-5\n  group-data-[disabled=true]/commandGroupItem:group-data-[disabled=true]/commandGroupItemBoxButton:h-5\n  group-data-[disabled=true]/commandGroupItem:group-data-[disabled=true]/commandGroupItemBoxButton:text-base-400\n`,\n    variants: { groupItemVariant: { default: \"text-primary-600\", destructive: \"text-danger-600\" } },\n\n    defaultVariants: { groupItemVariant: commandGroupItemDefaults.variant },\n  });\n  return iconClass({\n    class: className,\n\n    groupItemVariant: commandGroupItemProps?.variant,\n  });\n};\n\nexport const CommandGroupItemBoxButtonLayout = ({\n  renderRoot,\n  styleProps: { className },\n  iconSlot,\n}: {\n  renderRoot: RenderRoot;\n  styleProps: CommandGroupItemBoxButtonType;\n  iconSlot: React.ReactNode;\n}) => renderRoot(<>{iconSlot}</>, `h-7 w-7 flex flex-row justify-center items-center gap-5 ${className}`);\n\n",
        "target": "underatom/components/cmdk/command/command.tsx"
      }
    ]
  },
  {
    "name": "floating-paper",
    "type": "registry:ui",
    "relativePath": "no-headless/floating-paper",
    "stylingName": "floating-paper.tsx",
    "files": [
      {
        "type": "registry:ui",
        "path": "ui/no-headless/floating-paper/FloatingPaper.atoms.tsx",
        "content": "import { FloatingPaperStyleProps } from \"./floating-paper\";\nimport { UFloatingPaperRoot, UFloatingPaperRootProps } from \"./FloatingPaper.underatoms\";\n\nexport type FloatingPaperProps = UFloatingPaperRootProps & Partial<FloatingPaperStyleProps>;\nexport const FloatingPaper = (props: FloatingPaperProps) => {\n  return <UFloatingPaperRoot {...props} />;\n};\n",
        "target": "underatom/components/no-headless/floating-paper/FloatingPaper.atoms.tsx"
      },
      {
        "type": "registry:ui",
        "path": "ui/no-headless/floating-paper/FloatingPaper.underatoms.tsx",
        "content": "import { floatingPaperClass, FloatingPaperStyleProps } from \"./floating-paper\";\n\nexport type UFloatingPaperRootProps = FloatingPaperStyleProps &\n  React.ComponentPropsWithoutRef<\"div\"> & {\n    invalid?: boolean;\n  };\nexport const UFloatingPaperRoot = ({ className, ...props }: UFloatingPaperRootProps) => {\n  const rootClass = floatingPaperClass({ className, floatingPaperProps: props });\n  return (\n    <div {...props} data-invalid={!!props.invalid} className={rootClass}>\n      {props.children}\n    </div>\n  );\n};\n",
        "target": "underatom/components/no-headless/floating-paper/FloatingPaper.underatoms.tsx"
      },
      {
        "type": "registry:ui",
        "path": "ui/no-headless/floating-paper/floating-paper.tsx",
        "content": "import { tv } from \"../../../utils/extendedTV\";\nimport type { RenderRoot } from \"../../../utils/utils\";\n\n/*\n  ====================================\n  FloatingPaper\n  ====================================\n*/\n\nexport type FloatingPaperStyleProps = {\n  elevation?: \"sm\" | \"md\" | \"lg\";\n  variant?: \"default\" | \"outline\";\n};\n\nexport type FloatingPaperType = {\n  className?: string;\n  floatingPaperProps?: FloatingPaperStyleProps;\n};\n\nexport const floatingPaperDefaults: Required<FloatingPaperStyleProps> = {\n  elevation: \"md\",\n  variant: \"default\",\n};\n\nexport const floatingPaperClass = ({ className, floatingPaperProps }: FloatingPaperType) => {\n  const rootClass = tv({\n    base: \"group/floatingPaper border-solid border-1 bg-base-50 rounded-md data-[invalid=true]:border-danger-600 data-[invalid=true]:bg-primary-50\",\n    variants: {\n      elevation: { sm: \"shadow-sm\", md: \"shadow-md\", lg: \"shadow-lg\" },\n      variant: { default: \"border-base-50\", outline: \"border-base-950\" },\n    },\n\n    defaultVariants: { elevation: floatingPaperDefaults.elevation, variant: floatingPaperDefaults.variant },\n  });\n  return rootClass({\n    class: className,\n    elevation: floatingPaperProps?.elevation,\n    variant: floatingPaperProps?.variant,\n  });\n};\n\nexport const FloatingPaperLayout = ({\n  renderRoot,\n  styleProps: { className },\n}: {\n  renderRoot: RenderRoot;\n  styleProps: FloatingPaperType;\n}) => renderRoot(<></>, `h-full w-full flex flex-row gap-5 p-5 ${className}`);\n",
        "target": "underatom/components/no-headless/floating-paper/floating-paper.tsx"
      }
    ]
  },
  {
    "name": "typography",
    "type": "registry:ui",
    "relativePath": "no-headless/typography",
    "stylingName": "typography.tsx",
    "files": [
      {
        "type": "registry:ui",
        "path": "ui/no-headless/typography/Typography.atoms.tsx",
        "content": "import { TypographyLayout, TypographyStyleProps } from \"./typography\";\nimport { UTypographyRoot, UTypographyRootProps, UTypographyText } from \"./Typography.underatoms\";\n\nexport type TypographyProps = UTypographyRootProps & Partial<TypographyStyleProps>;\nexport const Typography = (props: TypographyProps) => {\n  return (\n    <TypographyLayout\n      renderRoot={(children, className) => (\n        <UTypographyRoot {...props} className={className}>\n          {children}\n        </UTypographyRoot>\n      )}\n      styleProps={{ className: props.className, typographyProps: props }}\n      textSlot={<UTypographyText>{props.children}</UTypographyText>}\n    />\n  );\n};\n\nexport type H1Props = TypographyProps;\nexport const H1 = (props: H1Props) => {\n  return <Typography {...props} type=\"h1\" />;\n};\n\nexport type SubheaderProps = TypographyProps;\nexport const Subheader = (props: SubheaderProps) => {\n  return <Typography {...props} type=\"subheader\" />;\n};\n\nexport type H2Props = TypographyProps;\nexport const H2 = (props: H2Props) => {\n  return <Typography {...props} type=\"h2\" />;\n};\n\nexport type H3Props = TypographyProps;\nexport const H3 = (props: H3Props) => {\n  return <Typography {...props} type=\"h3\" />;\n};\n\nexport type BodyProps = TypographyProps;\nexport const Body = (props: BodyProps) => {\n  return <Typography {...props} type=\"body\" />;\n};\n\nexport type LabelProps = TypographyProps;\nexport const Label = (props: LabelProps) => {\n  return <Typography {...props} type=\"label\" />;\n};\n\nexport type CodeProps = TypographyProps;\nexport const Code = (props: CodeProps) => {\n  return <Typography {...props} type=\"code\" />;\n};\n",
        "target": "underatom/components/no-headless/typography/Typography.atoms.tsx"
      },
      {
        "type": "registry:ui",
        "path": "ui/no-headless/typography/Typography.underatoms.tsx",
        "content": "import { ReactNode } from \"react\";\nimport { TypographyStyleProps, typographyClass, typographyTextClass } from \"./typography\";\nimport { getGenericContext } from \"../../../utils/utils\";\n\nconst elementMap: Record<NonNullable<TypographyStyleProps[\"type\"]>, keyof JSX.IntrinsicElements> = {\n  h1: \"h1\",\n  h2: \"h2\",\n  h3: \"h3\",\n  body: \"p\",\n  subheader: \"div\",\n  code: \"span\",\n  label: \"span\",\n};\n\nconst displayMap: Record<NonNullable<TypographyStyleProps[\"type\"]>, string> = {\n  h1: \"flex\",\n  h2: \"flex\",\n  h3: \"flex\",\n  body: \"flex\",\n  subheader: \"flex\",\n  code: \"inline-flex\",\n  label: \"inline-flex\",\n};\n\nexport const { Provider: TypographyInternalProvider, useComponentContext: useTypographyInternalProvider } =\n  getGenericContext<UTypographyRootProps>(\"TypographyInternalProvider\");\n\nexport type UTypographyRootProps = TypographyStyleProps & {\n  children?: ReactNode;\n  className?: string;\n  style?: React.CSSProperties;\n};\nexport const UTypographyRoot = (props: UTypographyRootProps) => {\n  const Component = elementMap[props.type ?? \"body\"];\n  return (\n    <Component\n      className={typographyClass({ className: props.className, typographyProps: props })}\n      style={{ ...props.style, display: displayMap[props.type ?? \"body\"] }}\n    >\n      <TypographyInternalProvider value={props}>{props.children}</TypographyInternalProvider>\n    </Component>\n  );\n};\n\nexport type UTypographyTextProps = {\n  children?: ReactNode;\n  className?: string;\n};\nexport const UTypographyText = (props: UTypographyTextProps) => {\n  const typographyProps = useTypographyInternalProvider();\n  return <span className={typographyTextClass({ className: props.className, typographyProps })}>{props.children}</span>;\n};\n",
        "target": "underatom/components/no-headless/typography/Typography.underatoms.tsx"
      },
      {
        "type": "registry:ui",
        "path": "ui/no-headless/typography/typography.tsx",
        "content": "import { tv } from \"../../../utils/extendedTV\";\nimport type { RenderRoot } from \"../../../utils/utils\";\n\n/*\n  ====================================\n  Typography\n  ====================================\n*/\n\nexport type TypographyStyleProps = {\n  type?: \"h1\" | \"h2\" | \"h3\" | \"subheader\" | \"body\" | \"code\" | \"label\";\n  color?: \"base\" | \"secondary\";\n};\n\nexport type TypographyType = {\n  className?: string;\n  typographyProps?: TypographyStyleProps;\n};\n\nexport const typographyDefaults: Required<TypographyStyleProps> = {\n  type: \"body\",\n  color: \"base\",\n};\n\nexport const typographyClass = ({ className, typographyProps }: TypographyType) => {\n  const rootClass = tv({\n    base: \"group/typography \",\n    variants: {\n      type: {\n        h1: \"\",\n        h2: \"\",\n        h3: \"\",\n        subheader: \"\",\n        body: \"\",\n        label: \"\",\n        code: \"border-solid border-base-200 border-1 bg-base-50 rounded-md\",\n      },\n    },\n\n    defaultVariants: { type: typographyDefaults.type },\n  });\n  return rootClass({\n    class: className,\n    type: typographyProps?.type,\n  });\n};\n\nexport const typographyTextClass = ({ className, typographyProps }: TypographyType) => {\n  const textClass = tv({\n    base: \"\",\n    variants: {\n      type: {\n        h1: \"text-3xl font-display font-medium\",\n        h2: \"text-2xl font-display font-medium\",\n        h3: \"text-xl font-text font-medium\",\n        subheader: \"text-lg font-text font-normal\",\n        body: \"text-md font-text font-normal\",\n        label: \"text-sm font-text font-medium\",\n        code: \"text-[16px] font-['DMMono'] leading-[24px] font-normal\",\n      },\n      color: { base: \"text-base-900\", secondary: \"text-base-700\" },\n    },\n\n    defaultVariants: { type: typographyDefaults.type, color: typographyDefaults.color },\n  });\n  return textClass({\n    class: className,\n\n    type: typographyProps?.type,\n    color: typographyProps?.color,\n  });\n};\n\nexport const TypographyLayout = ({\n  renderRoot,\n  styleProps: { className, typographyProps },\n  textSlot,\n}: {\n  renderRoot: RenderRoot;\n  styleProps: TypographyType;\n  textSlot: React.ReactNode;\n}) =>\n  renderRoot(\n    <>{textSlot}</>,\n    tv({\n      base: \"h-fit w-fit flex flex-row justify-center items-center\",\n      variants: { type: { h1: \"\", h2: \"\", h3: \"\", subheader: \"\", body: \"\", label: \"\", code: \"py-[1px] px-[6px]\" } },\n\n      defaultVariants: { type: typographyDefaults.type },\n    })({\n      class: className,\n      type: typographyProps?.type,\n    }),\n  );\n",
        "target": "underatom/components/no-headless/typography/typography.tsx"
      }
    ]
  },
  {
    "name": "window",
    "type": "registry:ui",
    "relativePath": "no-headless/window",
    "stylingName": "window.tsx",
    "files": [
      {
        "type": "registry:ui",
        "path": "ui/no-headless/window/Window.atoms.tsx",
        "content": "import { UWindowRoot, UWindowRootProps } from \"./Window.underatoms\";\n\nexport type WindowProps = UWindowRootProps;\nexport const Window = (props: WindowProps) => {\n  return <UWindowRoot {...props} />;\n};\n",
        "target": "underatom/components/no-headless/window/Window.atoms.tsx"
      },
      {
        "type": "registry:ui",
        "path": "ui/no-headless/window/Window.underatoms.tsx",
        "content": "import { WindowStyleProps, windowClass } from \"./window\";\n\nexport type UWindowRootProps = WindowStyleProps & React.ComponentPropsWithoutRef<\"div\">;\nexport const UWindowRoot = (props: UWindowRootProps) => {\n  return <div {...props} className={windowClass({ className: props.className, windowProps: props })} />;\n};\n",
        "target": "underatom/components/no-headless/window/Window.underatoms.tsx"
      },
      {
        "type": "registry:ui",
        "path": "ui/no-headless/window/window.tsx",
        "content": "import { tv } from \"../../../utils/extendedTV\";\nimport type { RenderRoot } from \"../../../utils/utils\";\n\n/*\n  ====================================\n  Window\n  ====================================\n*/\n\nexport type WindowStyleProps = {\n  variant?: \"default\";\n};\n\nexport type WindowType = {\n  className?: string;\n  windowProps?: WindowStyleProps;\n};\n\nexport const windowDefaults: Required<WindowStyleProps> = {\n  variant: \"default\",\n};\n\nexport const windowClass = ({ className }: WindowType) => {\n  return `group/window border-solid border-base-300 border-1 bg-background-50 rounded-[16px] ${className}`;\n};\n\nexport const WindowLayout = ({\n  renderRoot,\n  styleProps: { className },\n}: {\n  renderRoot: RenderRoot;\n  styleProps: WindowType;\n}) => renderRoot(<></>, `h-fit w-fit flex flex-row gap-5 p-5 ${className}`);\n",
        "target": "underatom/components/no-headless/window/window.tsx"
      }
    ]
  },
  {
    "name": "accordion",
    "type": "registry:ui",
    "relativePath": "radix/accordion",
    "stylingName": "accordion.tsx",
    "dependencies": [
      "@radix-ui/react-accordion",
      "@radix-ui/react-progress",
      "@ark-ui/react"
    ],
    "files": [
      {
        "type": "registry:ui",
        "path": "ui/radix/accordion/Accordion.atoms.tsx",
        "content": "import {\n  AccordionItemHeaderBadgeLayout,\n  AccordionItemHeaderBadgeWithIconLayout,\n  AccordionItemHeaderLayout,\n  AccordionItemHeaderRateItemLayout,\n  AccordionItemHeaderRateLayout,\n  AccordionItemHeaderVotingLayout,\n  AccordionItemLayout,\n  AccordionLayout,\n} from \"./accordion\";\nimport {\n  UAccordionItemContent,\n  UAccordionItemHeaderBadgeIcon,\n  UAccordionItemHeaderBadgeLabel,\n  UAccordionItemHeaderBadgeRoot,\n  UAccordionItemHeaderBadgeRootProps,\n  UAccordionItemHeaderCaret,\n  UAccordionItemHeaderFill,\n  UAccordionItemHeaderIcon,\n  UAccordionItemHeaderLabel,\n  UAccordionItemHeaderPercentage,\n  UAccordionItemHeaderRateRoot,\n  UAccordionItemHeaderRateItemRoot,\n  UAccordionItemHeaderRateRootProps,\n  UAccordionItemHeaderRateItemRootProps,\n  UAccordionItemHeaderRateItemIcon,\n  UAccordionItemHeaderRoot,\n  UAccordionItemHeaderRootProps,\n  UAccordionItemHeaderVotingRoot,\n  UAccordionItemHeaderVotingRootProps,\n  UAccordionItemRoot,\n  UAccordionItemRootProps,\n  UAccordionRoot,\n  UAccordionRootProps,\n  useAccordionInternalProvider,\n  useAccordionItemInternalProvider,\n} from \"./Accordion.underatoms\";\n\n/*\n  ====================================\n  Accordion\n  ====================================\n*/\n\nexport type AccordionProps = UAccordionRootProps & {\n  itemSlots: React.ReactNode[];\n};\n\nexport const Accordion = ({ itemSlots, ...props }: AccordionProps) => {\n  return (\n    <AccordionLayout\n      renderRoot={(children, className) => (\n        <UAccordionRoot {...props} className={className}>\n          {children}\n        </UAccordionRoot>\n      )}\n      styleProps={{ className: props.className, accordionProps: props }}\n      itemSlots={itemSlots}\n    />\n  );\n};\n\n/*\n  ====================================\n  AccordionItem\n  ====================================\n*/\n\nexport type AccordionItemProps = Omit<UAccordionItemRootProps, \"children\"> & {\n  headerSlot?: React.ReactNode;\n  contentSlot?: React.ReactNode;\n};\nexport const AccordionItem = ({ contentSlot, headerSlot, ...props }: AccordionItemProps) => {\n  const accordionProps = useAccordionInternalProvider();\n  return (\n    <AccordionItemLayout\n      styleProps={{ className: props.className, accordionItemProps: props, accordionProps }}\n      renderRoot={(children, className) => (\n        <UAccordionItemRoot {...props} className={className}>\n          {children}\n          <UAccordionItemContent>{contentSlot}</UAccordionItemContent>\n        </UAccordionItemRoot>\n      )}\n      headerSlot={headerSlot}\n    />\n  );\n};\n\n/*\n  ====================================\n  AccordionItemHeader\n  ====================================\n*/\n\nexport type AccordionItemHeaderProps = Omit<UAccordionItemHeaderRootProps, \"children\"> & {\n  icon?: (className: string) => React.ReactNode;\n  label: string;\n  badgeSlot?: React.ReactNode;\n};\n\nexport const AccordionItemHeader = ({ icon, label, badgeSlot, ...props }: AccordionItemHeaderProps) => {\n  const accordionProps = useAccordionInternalProvider();\n  const accordionItemProps = useAccordionItemInternalProvider();\n  return (\n    <AccordionItemHeaderLayout\n      renderRoot={(children, className) => (\n        <UAccordionItemHeaderRoot {...props} className={className}>\n          {children}\n        </UAccordionItemHeaderRoot>\n      )}\n      styleProps={{ className: props.className, accordionItemProps, accordionProps }}\n      labelSlot={<UAccordionItemHeaderLabel>{label}</UAccordionItemHeaderLabel>}\n      iconSlot={icon && <UAccordionItemHeaderIcon>{icon}</UAccordionItemHeaderIcon>}\n      caretSlot={<UAccordionItemHeaderCaret />}\n      badgeSlot={badgeSlot}\n    />\n  );\n};\n\nexport type AccordionItemHeaderVotingProps = Omit<UAccordionItemHeaderVotingRootProps, \"children\"> & {\n  label: string;\n  badgeSlot?: React.ReactNode;\n  rateSlot?: React.ReactNode;\n};\n\nexport const AccordionItemHeaderVoting = ({ label, badgeSlot, rateSlot, ...props }: AccordionItemHeaderVotingProps) => {\n  const accordionProps = useAccordionInternalProvider();\n  const accordionItemProps = useAccordionItemInternalProvider();\n  return (\n    <AccordionItemHeaderVotingLayout\n      renderRoot={(children, className) => (\n        <UAccordionItemHeaderVotingRoot {...props} className={className + \" \" + (props.className ?? \"\")}>\n          {children}\n        </UAccordionItemHeaderVotingRoot>\n      )}\n      styleProps={{ className: props.className, accordionItemProps, accordionProps }}\n      labelSlot={<UAccordionItemHeaderLabel>{label}</UAccordionItemHeaderLabel>}\n      percentageSlot={<UAccordionItemHeaderPercentage>{props.progressProps.value}%</UAccordionItemHeaderPercentage>}\n      fillSlot={<UAccordionItemHeaderFill value={props.progressProps.value ?? 0} />}\n      caretSlot={<UAccordionItemHeaderCaret />}\n      rateSlot={rateSlot}\n      badgeSlot={badgeSlot}\n    />\n  );\n};\n\n/*\n  ====================================\n  AccordionItemHeaderRate\n  ====================================\n*/\n\nexport type AccordionItemHeaderRateProps = UAccordionItemHeaderRateRootProps;\nexport const AccordionItemHeaderRate = (props: AccordionItemHeaderRateProps) => {\n  const accordionProps = useAccordionInternalProvider();\n  const accordionItemProps = useAccordionItemInternalProvider();\n  return (\n    <AccordionItemHeaderRateLayout\n      renderRoot={(children, className) => (\n        <UAccordionItemHeaderRateRoot {...props} className={className}>\n          {children}\n        </UAccordionItemHeaderRateRoot>\n      )}\n      styleProps={{ className: props.className, accordionItemProps, accordionProps }}\n      itemSlots={Array.from({ length: props.count ?? 3 }, (_, index) => (\n        <AccordionItemHeaderRateItem key={index} index={index + 1} />\n      ))}\n    />\n  );\n};\n\n/*\n  ====================================\n  AccordionItemHeaderBadge\n  ====================================\n*/\n\nexport type AccordionItemHeaderBadgeProps = Omit<UAccordionItemHeaderBadgeRootProps, \"children\"> & {\n  label: string;\n};\n\nexport const AccordionItemHeaderBadge = ({ label, ...props }: AccordionItemHeaderBadgeProps) => {\n  const accordionProps = useAccordionInternalProvider();\n  const accordionItemProps = useAccordionItemInternalProvider();\n  return (\n    <AccordionItemHeaderBadgeLayout\n      renderRoot={(children, className) => (\n        <UAccordionItemHeaderBadgeRoot {...props} className={className}>\n          {children}\n        </UAccordionItemHeaderBadgeRoot>\n      )}\n      styleProps={{\n        className: props.className,\n        accordionItemHeaderBadgeProps: props,\n        accordionItemProps,\n        accordionProps,\n      }}\n      labelSlot={<UAccordionItemHeaderBadgeLabel>{label}</UAccordionItemHeaderBadgeLabel>}\n    />\n  );\n};\n\nexport type AccordionItemHeaderBadgeWithIconProps = Omit<UAccordionItemHeaderBadgeRootProps, \"children\"> & {\n  icon: (className: string) => React.ReactNode;\n  label: string;\n};\n\nexport const AccordionItemHeaderBadgeWithIcon = ({ icon, label, ...props }: AccordionItemHeaderBadgeWithIconProps) => {\n  const accordionProps = useAccordionInternalProvider();\n  const accordionItemProps = useAccordionItemInternalProvider();\n  return (\n    <AccordionItemHeaderBadgeWithIconLayout\n      renderRoot={(children, className) => (\n        <UAccordionItemHeaderBadgeRoot {...props} className={className}>\n          {children}\n        </UAccordionItemHeaderBadgeRoot>\n      )}\n      styleProps={{\n        className: props.className,\n        accordionItemHeaderBadgeProps: props,\n        accordionItemProps,\n        accordionProps,\n      }}\n      labelSlot={<UAccordionItemHeaderBadgeLabel>{label}</UAccordionItemHeaderBadgeLabel>}\n      iconSlot={<UAccordionItemHeaderBadgeIcon>{icon}</UAccordionItemHeaderBadgeIcon>}\n    />\n  );\n};\n\n/*\n  ====================================\n  AccordionItemHeaderRateItem\n  ====================================\n*/\n\nexport type AccordionItemHeaderRateItemProps = UAccordionItemHeaderRateItemRootProps;\nexport const AccordionItemHeaderRateItem = (props: AccordionItemHeaderRateItemProps) => {\n  const accordionProps = useAccordionInternalProvider();\n  const accordionItemProps = useAccordionItemInternalProvider();\n  return (\n    <AccordionItemHeaderRateItemLayout\n      renderRoot={(children, className) => (\n        <UAccordionItemHeaderRateItemRoot {...props} className={className}>\n          {children}\n        </UAccordionItemHeaderRateItemRoot>\n      )}\n      styleProps={{ className: props.className, accordionItemProps, accordionProps }}\n      iconSlot={<UAccordionItemHeaderRateItemIcon />}\n    />\n  );\n};\n",
        "target": "underatom/components/radix/accordion/Accordion.atoms.tsx"
      },
      {
        "type": "registry:ui",
        "path": "ui/radix/accordion/Accordion.underatoms.tsx",
        "content": "import * as RadixAccordion from \"@radix-ui/react-accordion\";\nimport {\n  accordionClass,\n  accordionItemClass,\n  accordionItemHeaderBadgeClass,\n  accordionItemHeaderBadgeIconClass,\n  accordionItemHeaderBadgeLabelClass,\n  AccordionItemHeaderBadgeStyleProps,\n  accordionItemHeaderCaretClass,\n  accordionItemHeaderClass,\n  accordionItemHeaderFillClass,\n  accordionItemHeaderIconClass,\n  accordionItemHeaderLabelClass,\n  accordionItemHeaderPercentageClass,\n  accordionItemHeaderRateClass,\n  accordionItemHeaderRateItemClass,\n  accordionItemHeaderRateItemIconClass,\n  AccordionItemStyleProps,\n  AccordionStyleProps,\n} from \"./accordion\";\nimport * as Progress from \"@radix-ui/react-progress\";\nimport React, { ReactNode } from \"react\";\nimport { CaretDown, Rosette } from \"../../../utils/Icons\";\nimport { mergeProps, useFocusRing } from \"react-aria\";\nimport { RatingGroup } from \"@ark-ui/react\";\nimport { getGenericContext } from \"../../../utils/utils\";\n\n/*\n  ====================================\n  Accordion\n  ====================================\n*/\n\nexport const { Provider: AccordionInternalProvider, useComponentContext: useAccordionInternalProvider } =\n  getGenericContext<UAccordionRootProps>(\"AccordionInternalProvider\");\n\nexport type UAccordionRootProps = (RadixAccordion.AccordionSingleProps | RadixAccordion.AccordionMultipleProps) &\n  AccordionStyleProps;\nexport const UAccordionRoot = (props: UAccordionRootProps) => {\n  return (\n    <RadixAccordion.Root {...props} className={accordionClass({ className: props.className, accordionProps: props })}>\n      <AccordionInternalProvider value={props}>{props.children}</AccordionInternalProvider>\n    </RadixAccordion.Root>\n  );\n};\n\n/*\n  ====================================\n  AccordionItem\n  ====================================\n*/\n\nexport const { Provider: AccordionItemInternalProvider, useComponentContext: useAccordionItemInternalProvider } =\n  getGenericContext<UAccordionItemRootProps>(\"AccordionItemInternalProvider\");\n\nexport type UAccordionItemRootProps = RadixAccordion.AccordionItemProps & AccordionItemStyleProps;\nexport const UAccordionItemRoot = (props: UAccordionItemRootProps) => {\n  const accordionProps = useAccordionInternalProvider();\n  return (\n    <RadixAccordion.Item\n      {...props}\n      className={accordionItemClass({ className: props.className, accordionItemProps: props, accordionProps })}\n    >\n      <AccordionItemInternalProvider value={props}>{props.children}</AccordionItemInternalProvider>\n    </RadixAccordion.Item>\n  );\n};\n\nexport type UAccordionItemContentProps = RadixAccordion.AccordionContentProps & {\n  /** The collapsible content for an item. */\n  children: RadixAccordion.AccordionContentProps[\"children\"];\n};\nexport const UAccordionItemContent = (props: UAccordionItemContentProps) => {\n  return <RadixAccordion.Content {...props} style={{ padding: \"4px 12px 12px 12px\" }} />;\n};\n\n/*\n  ====================================\n  AccordionItemHeader\n  ====================================\n*/\nexport type UAccordionItemHeaderRootProps = RadixAccordion.AccordionTriggerProps & {\n  /** `AccordionTrigger` content */\n  children: RadixAccordion.AccordionTriggerProps[\"children\"];\n};\nexport const UAccordionItemHeaderRoot = React.forwardRef<HTMLButtonElement, UAccordionItemHeaderRootProps>(\n  (props, forwardedRef) => {\n    const accordionProps = useAccordionInternalProvider();\n    const accordionItemProps = useAccordionItemInternalProvider();\n    const { focusProps, isFocusVisible } = useFocusRing();\n\n    return (\n      <RadixAccordion.Header>\n        <RadixAccordion.Trigger\n          {...mergeProps(props, focusProps)}\n          data-ring={isFocusVisible}\n          className={accordionItemHeaderClass({ className: props.className, accordionItemProps, accordionProps })}\n          ref={forwardedRef}\n        >\n          {props.children}\n        </RadixAccordion.Trigger>\n      </RadixAccordion.Header>\n    );\n  },\n);\n\nexport type UAccordionItemHeaderVotingRootProps = RadixAccordion.AccordionTriggerProps & {\n  /** `AccordionTrigger` content */\n  children: RadixAccordion.AccordionTriggerProps[\"children\"];\n  progressProps: Progress.ProgressProps;\n};\nexport const UAccordionItemHeaderVotingRoot = React.forwardRef<HTMLButtonElement, UAccordionItemHeaderVotingRootProps>(\n  ({ progressProps, ...props }, forwardedRef) => {\n    const accordionProps = useAccordionInternalProvider();\n    const accordionItemProps = useAccordionItemInternalProvider();\n    const { focusProps, isFocusVisible } = useFocusRing();\n\n    return (\n      <RadixAccordion.Header>\n        <Progress.Root {...progressProps} asChild>\n          <RadixAccordion.Trigger\n            {...mergeProps(props, focusProps)}\n            data-ring={isFocusVisible}\n            className={accordionItemHeaderClass({ className: props.className, accordionItemProps, accordionProps })}\n            ref={forwardedRef}\n            style={{ position: \"relative\", overflow: \"hidden\" }}\n          >\n            {props.children}\n          </RadixAccordion.Trigger>\n        </Progress.Root>\n      </RadixAccordion.Header>\n    );\n  },\n);\n\nexport type UAccordionItemHeaderPercentageProps = {\n  children: ReactNode;\n  className?: string;\n};\nexport const UAccordionItemHeaderPercentage = (props: UAccordionItemHeaderPercentageProps) => {\n  const accordionProps = useAccordionInternalProvider();\n  const accordionItemProps = useAccordionItemInternalProvider();\n  return (\n    <span\n      {...props}\n      className={accordionItemHeaderPercentageClass({ className: props.className, accordionItemProps, accordionProps })}\n    />\n  );\n};\n\nexport type UAccordionItemHeaderFillProps = Progress.ProgressIndicatorProps & {\n  value: number;\n};\nexport const UAccordionItemHeaderFill = (props: UAccordionItemHeaderFillProps) => {\n  const accordionProps = useAccordionInternalProvider();\n  const accordionItemProps = useAccordionItemInternalProvider();\n  return (\n    <Progress.Indicator\n      {...props}\n      className={accordionItemHeaderFillClass({ className: props.className, accordionItemProps, accordionProps })}\n      style={{ position: \"absolute\", width: \"auto\", left: 0, right: `calc(100% - ${props.value}%)` }}\n    />\n  );\n};\n\nexport type UAccordionItemHeaderIconProps = {\n  /** Text content. */\n  children: (className: string) => React.ReactNode;\n  className?: string;\n};\nexport const UAccordionItemHeaderIcon = ({ children, className }: UAccordionItemHeaderIconProps) => {\n  const accordionProps = useAccordionInternalProvider();\n  const accordionItemProps = useAccordionItemInternalProvider();\n  return <>{children(accordionItemHeaderIconClass({ className, accordionItemProps, accordionProps }))}</>;\n};\n\nexport type UAccordionItemHeaderLabelProps = {\n  /** Text content. */\n  children: ReactNode;\n  className?: string;\n};\nexport const UAccordionItemHeaderLabel = ({ children, className }: UAccordionItemHeaderLabelProps) => {\n  const accordionProps = useAccordionInternalProvider();\n  const accordionItemProps = useAccordionItemInternalProvider();\n  return (\n    <span className={accordionItemHeaderLabelClass({ className, accordionItemProps, accordionProps })}>{children}</span>\n  );\n};\n\nexport type UAccordionItemHeaderCaretProps = { className?: string };\nexport const UAccordionItemHeaderCaret = (props: UAccordionItemHeaderCaretProps) => {\n  const accordionProps = useAccordionInternalProvider();\n  const accordionItemProps = useAccordionItemInternalProvider();\n  return (\n    <CaretDown\n      className={accordionItemHeaderCaretClass({ className: props.className, accordionItemProps, accordionProps })}\n    />\n  );\n};\n\n/*\n  ====================================\n  AccordionItemHeaderRate\n  ====================================\n*/\n\nexport type UAccordionItemHeaderRateRootProps = RatingGroup.RootProps;\nexport const UAccordionItemHeaderRateRoot = ({ children, ...props }: UAccordionItemHeaderRateRootProps) => {\n  const { disabled: parentDisabled } = useAccordionItemInternalProvider();\n  const accordionProps = useAccordionInternalProvider();\n  const accordionItemProps = useAccordionItemInternalProvider();\n\n  return (\n    <RatingGroup.Root\n      {...props}\n      onClick={(e) => {\n        e.stopPropagation();\n        props.onClick?.(e);\n      }}\n      disabled={props.disabled || parentDisabled}\n    >\n      <RatingGroup.Control\n        className={accordionItemHeaderRateClass({ className: props.className, accordionItemProps, accordionProps })}\n      >\n        {children}\n      </RatingGroup.Control>\n    </RatingGroup.Root>\n  );\n};\n\n/*\n  ====================================\n  AccordionItemHeaderBadge\n  ====================================\n*/\n\nexport const {\n  Provider: AccordionItemHeaderBadgeInternalProvider,\n  useComponentContext: useAccordionItemHeaderBadgeInternalProvider,\n} = getGenericContext<UAccordionItemHeaderBadgeRootProps>(\"AccordionItemHeaderBadgeInternalProvider\");\n\nexport type UAccordionItemHeaderBadgeRootProps = AccordionItemHeaderBadgeStyleProps & {\n  children: ReactNode;\n  className?: string;\n};\nexport const UAccordionItemHeaderBadgeRoot = (props: UAccordionItemHeaderBadgeRootProps) => {\n  const accordionProps = useAccordionInternalProvider();\n  const accordionItemProps = useAccordionItemInternalProvider();\n  return (\n    <div\n      className={accordionItemHeaderBadgeClass({\n        className: props.className,\n        accordionItemHeaderBadgeProps: props,\n        accordionItemProps,\n        accordionProps,\n      })}\n    >\n      <AccordionItemHeaderBadgeInternalProvider value={props}>\n        {props.children}\n      </AccordionItemHeaderBadgeInternalProvider>\n    </div>\n  );\n};\n\nexport type UAccordionItemHeaderBadgeLabelProps = {\n  /** Text content. */\n  children: ReactNode;\n  className?: string;\n};\nexport const UAccordionItemHeaderBadgeLabel = (props: UAccordionItemHeaderBadgeLabelProps) => {\n  const accordionProps = useAccordionInternalProvider();\n  const accordionItemProps = useAccordionItemInternalProvider();\n  const accordionItemHeaderBadgeProps = useAccordionItemHeaderBadgeInternalProvider();\n  return (\n    <div\n      className={accordionItemHeaderBadgeLabelClass({\n        className: props.className,\n        accordionItemHeaderBadgeProps,\n        accordionItemProps,\n        accordionProps,\n      })}\n    >\n      {props.children}\n    </div>\n  );\n};\n\nexport type UAccordionItemHeaderBadgeIconProps = {\n  /** Text content. */\n  children: (className: string) => React.ReactNode;\n  className?: string;\n};\nexport const UAccordionItemHeaderBadgeIcon = ({ children, className }: UAccordionItemHeaderBadgeIconProps) => {\n  const accordionProps = useAccordionInternalProvider();\n  const accordionItemProps = useAccordionItemInternalProvider();\n  const accordionItemHeaderBadgeProps = useAccordionItemHeaderBadgeInternalProvider();\n  return (\n    <>\n      {children(\n        accordionItemHeaderBadgeIconClass({\n          className,\n          accordionItemHeaderBadgeProps,\n          accordionItemProps,\n          accordionProps,\n        }),\n      )}\n    </>\n  );\n};\n\n/*\n  ====================================\n  AccordionItemHeaderRateItem\n  ====================================\n*/\n\nexport type UAccordionItemHeaderRateItemRootProps = RatingGroup.ItemProps;\nexport const UAccordionItemHeaderRateItemRoot = (props: UAccordionItemHeaderRateItemRootProps) => {\n  const accordionProps = useAccordionInternalProvider();\n  const accordionItemProps = useAccordionItemInternalProvider();\n  const { focusProps, isFocusVisible } = useFocusRing();\n  return (\n    <RatingGroup.Item\n      {...mergeProps(props, focusProps)}\n      data-ring={isFocusVisible}\n      className={accordionItemHeaderRateItemClass({ className: props.className, accordionItemProps, accordionProps })}\n    />\n  );\n};\n\nexport type UAccordionItemHeaderRateItemIconProps = { className?: string };\nexport const UAccordionItemHeaderRateItemIcon = (props: UAccordionItemHeaderRateItemIconProps) => {\n  const accordionProps = useAccordionInternalProvider();\n  const accordionItemProps = useAccordionItemInternalProvider();\n  return (\n    <RatingGroup.ItemContext>\n      {({ highlighted }) =>\n        highlighted ? (\n          <Rosette\n            fill=\"currentColor\"\n            className={accordionItemHeaderRateItemIconClass({\n              className: props.className,\n              accordionItemProps,\n              accordionProps,\n            })}\n          />\n        ) : (\n          <Rosette\n            className={accordionItemHeaderRateItemIconClass({\n              className: props.className,\n              accordionItemProps,\n              accordionProps,\n            })}\n          />\n        )\n      }\n    </RatingGroup.ItemContext>\n  );\n};\n",
        "target": "underatom/components/radix/accordion/Accordion.underatoms.tsx"
      },
      {
        "type": "registry:ui",
        "path": "ui/radix/accordion/accordion.tsx",
        "content": "import { tv } from \"../../../utils/extendedTV\";\nimport type { RenderRoot } from \"../../../utils/utils\";\n\n/*\n  ====================================\n  Accordion\n  ====================================\n*/\n\nexport type AccordionStyleProps = {\n  variant?: \"attached\" | \"separated\";\n};\n\nexport type AccordionType = {\n  className?: string;\n  accordionProps?: AccordionStyleProps;\n};\n\nexport const accordionDefaults: Required<AccordionStyleProps> = {\n  variant: \"separated\",\n};\n\nexport const accordionClass = ({ className }: AccordionType) => {\n  return `group/accordion  ${className}`;\n};\n\nexport const AccordionLayout = ({\n  renderRoot,\n  styleProps: { className, accordionProps },\n  itemSlots,\n}: {\n  renderRoot: RenderRoot;\n  styleProps: AccordionType;\n  itemSlots: React.ReactNode;\n}) =>\n  renderRoot(\n    <>{itemSlots}</>,\n    tv({\n      base: \"h-fit w-full flex flex-col\",\n      variants: { variant: { attached: \"\", separated: \"gap-[6px]\" } },\n\n      defaultVariants: { variant: accordionDefaults.variant },\n    })({\n      class: className,\n      variant: accordionProps?.variant,\n    }),\n  );\nexport type AccordionItemStyleProps = {\n  attachment?: \"none\" | \"start\" | \"center\" | \"end\";\n};\n\nexport type AccordionItemType = {\n  className?: string;\n  accordionItemProps?: AccordionItemStyleProps;\n  accordionProps?: AccordionStyleProps;\n};\n\nexport const accordionItemDefaults: Required<AccordionItemStyleProps> = {\n  attachment: \"none\",\n};\n\nexport const accordionItemClass = ({ className, accordionProps }: AccordionItemType) => {\n  const rootClass = tv({\n    base: \"group/accordionItem border-solid transition-all\",\n    variants: {\n      variant: {\n        attached: \"border-primary-200 border-t-0 border-b-1 border-x-0\",\n        separated:\n          \"border-base-200 border-1 bg-background-100 shadow-sm rounded-[10px] data-[state=open]:border-primary-950 data-[state=open]:data-[disabled]:border-base-400\",\n      },\n    },\n\n    defaultVariants: { variant: accordionDefaults.variant },\n  });\n  return rootClass({\n    class: className,\n    variant: accordionProps?.variant,\n  });\n};\n\nexport const AccordionItemLayout = ({\n  renderRoot,\n  styleProps: { className },\n  headerSlot,\n}: {\n  renderRoot: RenderRoot;\n  styleProps: AccordionItemType;\n  headerSlot: React.ReactNode;\n}) => renderRoot(<>{headerSlot}</>, `h-fit w-full flex flex-col data-[state=open]:h-full ${className}`);\n\nexport type AccordionItemHeaderType = {\n  className?: string;\n  accordionProps?: AccordionStyleProps;\n  accordionItemProps?: AccordionItemStyleProps;\n};\n\nexport const accordionItemHeaderClass = ({ className, accordionProps }: AccordionItemHeaderType) => {\n  const rootClass = tv({\n    base: \"group/accordionItemHeader transition-all group-data-[disabled]/accordionItem:pointer-events-none data-[ring=true]:shadow-focus-ring\",\n    variants: {\n      variant: {\n        attached: `\nactive:[background:unset]\n  group-data-[disabled]/accordionItem:hover:[background:unset]\n  group-data-[disabled]/accordionItem:data-[ring=true]:[background:unset]\n  group-data-[disabled]/accordionItem:data-[ring=true]:shadow-none\n  hover:bg-base-100\n  data-[ring=true]:bg-base-100\n`,\n        separated: `\nhover:bg-base-100\n  data-[ring=true]:bg-base-100\n  shadow-sm\n  group-data-[disabled]/accordionItem:shadow-sm\n  rounded-tl-[9px]\n  rounded-bl-[10px]\n  rounded-tr-[9px]\n  rounded-br-[10px]\n  group-data-[disabled]/accordionItem:rounded-tl-[9px]\n  group-data-[disabled]/accordionItem:rounded-bl-[10px]\n  group-data-[disabled]/accordionItem:rounded-tr-[9px]\n  group-data-[disabled]/accordionItem:rounded-br-[10px]\n  group-data-[state=open]/accordionItem:hover:bg-primary-800\n  group-data-[state=open]/accordionItem:data-[ring=true]:bg-primary-800\n  group-data-[state=open]/accordionItem:rounded-tl-[9px]\n  group-data-[state=open]/accordionItem:rounded-bl-[0px]\n  group-data-[state=open]/accordionItem:rounded-tr-[9px]\n  group-data-[state=open]/accordionItem:rounded-br-[0px]\n  group-data-[state=open]/accordionItem:group-data-[disabled]/accordionItem:rounded-tl-[9px]\n  group-data-[state=open]/accordionItem:group-data-[disabled]/accordionItem:rounded-bl-[0px]\n  group-data-[state=open]/accordionItem:group-data-[disabled]/accordionItem:rounded-tr-[9px]\n  group-data-[state=open]/accordionItem:group-data-[disabled]/accordionItem:rounded-br-[0px]\n  bg-base-50\n  active:bg-base-50\n  group-data-[disabled]/accordionItem:[background:unset]\n  group-data-[state=open]/accordionItem:bg-primary-950\n  group-data-[state=open]/accordionItem:active:bg-primary-950\n  group-data-[state=open]/accordionItem:group-data-[disabled]/accordionItem:bg-base-200\n  data-[ring=true]:rounded-[9px]\n  group-data-[disabled]/accordionItem:active:[background:unset]\n  group-data-[disabled]/accordionItem:hover:[background:unset]\n  group-data-[disabled]/accordionItem:data-[ring=true]:[background:unset]\n  group-data-[disabled]/accordionItem:data-[ring=true]:shadow-sm\n  group-data-[disabled]/accordionItem:data-[ring=true]:rounded-tl-[9px]\n  group-data-[disabled]/accordionItem:data-[ring=true]:rounded-bl-[10px]\n  group-data-[disabled]/accordionItem:data-[ring=true]:rounded-tr-[9px]\n  group-data-[disabled]/accordionItem:data-[ring=true]:rounded-br-[10px]\n  group-data-[state=open]/accordionItem:group-data-[disabled]/accordionItem:active:bg-base-200\n  group-data-[state=open]/accordionItem:group-data-[disabled]/accordionItem:hover:bg-base-200\n  group-data-[state=open]/accordionItem:group-data-[disabled]/accordionItem:data-[ring=true]:bg-base-200\n  group-data-[state=open]/accordionItem:data-[ring=true]:rounded-[9px]\n`,\n      },\n    },\n\n    defaultVariants: { variant: accordionDefaults.variant },\n  });\n  return rootClass({\n    class: className,\n    variant: accordionProps?.variant,\n  });\n};\n\nexport const accordionItemHeaderIconClass = ({ className, accordionProps }: AccordionItemHeaderType) => {\n  const iconClass = tv({\n    base: \"w-5 h-5 z-10 group-data-[disabled]/accordionItem:text-base-400\",\n    variants: {\n      variant: {\n        separated:\n          \"text-base-600 group-data-[state=open]/accordionItem:text-base-50 group-data-[state=open]/accordionItem:group-data-[disabled]/accordionItem:text-base-400\",\n        attached: \"text-base-600\",\n      },\n    },\n\n    defaultVariants: { variant: accordionDefaults.variant },\n  });\n  return iconClass({\n    class: className,\n\n    variant: accordionProps?.variant,\n  });\n};\n\nexport const accordionItemHeaderLabelClass = ({ className, accordionProps }: AccordionItemHeaderType) => {\n  const labelClass = tv({\n    base: \"text-sm font-text font-medium z-10 group-data-[disabled]/accordionItem:text-base-400\",\n    variants: {\n      variant: {\n        separated:\n          \"text-base-950 group-data-[state=open]/accordionItem:text-base-50 group-data-[state=open]/accordionItem:group-data-[disabled]/accordionItem:text-base-400\",\n        attached: \"text-base-950\",\n      },\n    },\n\n    defaultVariants: { variant: accordionDefaults.variant },\n  });\n  return labelClass({\n    class: className,\n\n    variant: accordionProps?.variant,\n  });\n};\n\nexport const accordionItemHeaderCaretClass = ({ className, accordionProps }: AccordionItemHeaderType) => {\n  const caretClass = tv({\n    base: \"w-5 h-5 z-10 group-data-[disabled]/accordionItem:text-base-400\",\n    variants: {\n      variant: {\n        separated:\n          \"text-base-600 group-data-[state=open]/accordionItem:text-base-700 group-data-[state=open]/accordionItem:group-data-[disabled]/accordionItem:text-base-400\",\n        attached: \"text-base-600\",\n      },\n    },\n\n    defaultVariants: { variant: accordionDefaults.variant },\n  });\n  return caretClass({\n    class: className,\n\n    variant: accordionProps?.variant,\n  });\n};\n\nexport const accordionItemHeaderFillClass = ({ className, accordionProps }: AccordionItemHeaderType) => {\n  const fillClass = tv({\n    base: \"w-[64px] h-[42px] transition-all\",\n    variants: {\n      variant: {\n        separated: `\ngroup-data-[state=open]/accordionItem:bg-primary-900\n  group-data-[state=open]/accordionItem:group-active/accordionItemHeader:bg-primary-900\n  group-data-[state=open]/accordionItem:group-hover/accordionItemHeader:bg-primary-700\n  group-data-[state=open]/accordionItem:group-data-[ring=true]/accordionItemHeader:bg-primary-700\n  bg-base-100\n  group-active/accordionItemHeader:bg-base-100\n  group-data-[disabled]/accordionItem:bg-base-100\n  group-hover/accordionItemHeader:bg-base-200\n  group-data-[ring=true]/accordionItemHeader:bg-base-200\n  group-data-[state=open]/accordionItem:group-data-[disabled]/accordionItem:bg-base-100\n  group-data-[disabled]/accordionItem:group-hover/accordionItemHeader:bg-base-100\n  group-data-[disabled]/accordionItem:group-data-[ring=true]/accordionItemHeader:bg-base-100\n`,\n        attached: `\nbg-base-100\n  group-active/accordionItemHeader:bg-base-100\n  group-data-[disabled]/accordionItem:group-hover/accordionItemHeader:bg-base-100\n  group-data-[disabled]/accordionItem:group-data-[ring=true]/accordionItemHeader:bg-base-100\n  group-hover/accordionItemHeader:bg-base-200\n  group-data-[ring=true]/accordionItemHeader:bg-base-200\n`,\n      },\n    },\n\n    defaultVariants: { variant: accordionDefaults.variant },\n  });\n  return fillClass({\n    class: className,\n\n    variant: accordionProps?.variant,\n  });\n};\n\nexport const accordionItemHeaderPercentageClass = ({ className }: AccordionItemHeaderType) => {\n  return `text-base-500 text-xs font-text font-medium z-10 group-data-[disabled]/accordionItem:text-base-400 ${className}`;\n};\n\nexport const AccordionItemHeaderLayout = ({\n  renderRoot,\n  styleProps: { className },\n  iconSlot,\n  labelSlot,\n  badgeSlot,\n  caretSlot,\n}: {\n  renderRoot: RenderRoot;\n  styleProps: AccordionItemHeaderType;\n  iconSlot: React.ReactNode;\n  labelSlot: React.ReactNode;\n  badgeSlot: React.ReactNode;\n  caretSlot: React.ReactNode;\n}) =>\n  renderRoot(\n    <>\n      <div className=\"h-fit w-full flex flex-row items-center gap-[6px]\">\n        <div className=\"h-fit w-fit flex flex-row items-center gap-[6px]\">\n          {iconSlot}\n          {labelSlot}\n        </div>\n        {badgeSlot}\n      </div>\n      {caretSlot}\n    </>,\n    `h-[42px] w-full flex flex-row items-center gap-5 px-3 ${className}`,\n  );\nexport const AccordionItemHeaderVotingLayout = ({\n  renderRoot,\n  styleProps: { className },\n  percentageSlot,\n  labelSlot,\n  badgeSlot,\n  rateSlot,\n  caretSlot,\n  fillSlot,\n}: {\n  renderRoot: RenderRoot;\n  styleProps: AccordionItemHeaderType;\n  percentageSlot: React.ReactNode;\n  labelSlot: React.ReactNode;\n  badgeSlot: React.ReactNode;\n  rateSlot: React.ReactNode;\n  caretSlot: React.ReactNode;\n  fillSlot: React.ReactNode;\n}) =>\n  renderRoot(\n    <>\n      <div className=\"h-fit w-full flex flex-row items-center gap-[6px]\">\n        <div className=\"h-fit w-9 flex flex-row items-center gap-[10px]\">{percentageSlot}</div>\n        <div className=\"h-fit w-full flex flex-row items-center gap-[6px]\">\n          {labelSlot}\n          {badgeSlot}\n        </div>\n      </div>\n      {rateSlot}\n      {caretSlot}\n      {fillSlot}\n    </>,\n    `h-[42px] w-full flex flex-row items-center gap-5 px-3 ${className}`,\n  );\n\nexport type AccordionItemHeaderRateType = {\n  className?: string;\n  accordionProps?: AccordionStyleProps;\n  accordionItemProps?: AccordionItemStyleProps;\n};\n\nexport const accordionItemHeaderRateClass = ({ className }: AccordionItemHeaderRateType) => {\n  return `group/accordionItemHeaderRate z-10 ${className}`;\n};\n\nexport const AccordionItemHeaderRateLayout = ({\n  renderRoot,\n  styleProps: { className },\n  itemSlots,\n}: {\n  renderRoot: RenderRoot;\n  styleProps: AccordionItemHeaderRateType;\n  itemSlots: React.ReactNode;\n}) => renderRoot(<>{itemSlots}</>, `h-fit w-fit flex flex-row ${className}`);\n\nexport type AccordionItemHeaderBadgeStyleProps = {\n  color?: \"primary\" | \"base\" | \"green\" | \"red\";\n};\n\nexport type AccordionItemHeaderBadgeType = {\n  className?: string;\n  accordionItemHeaderBadgeProps?: AccordionItemHeaderBadgeStyleProps;\n  accordionProps?: AccordionStyleProps;\n  accordionItemProps?: AccordionItemStyleProps;\n};\n\nexport const accordionItemHeaderBadgeDefaults: Required<AccordionItemHeaderBadgeStyleProps> = {\n  color: \"primary\",\n};\n\nexport const accordionItemHeaderBadgeClass = ({\n  className,\n  accordionProps,\n  accordionItemHeaderBadgeProps,\n}: AccordionItemHeaderBadgeType) => {\n  const rootClass = tv({\n    base: \"group/accordionItemHeaderBadge rounded-[999px] z-10 group-data-[disabled]/accordionItem:bg-base-300\",\n    variants: {\n      variant: { attached: \"\", separated: \"\" },\n      itemHeaderBadgeColor: { base: \"\", primary: \"\", red: \"bg-danger-500\", green: \"bg-success-600\" },\n    },\n    compoundVariants: [\n      { variant: [\"attached\"], itemHeaderBadgeColor: [\"base\"], class: \"bg-base-950\" },\n      {\n        variant: [\"separated\"],\n        itemHeaderBadgeColor: [\"base\"],\n        class:\n          \"bg-base-950 transition-all group-data-[state=open]/accordionItem:bg-base-50 group-data-[state=open]/accordionItem:group-data-[disabled]/accordionItem:bg-base-300\",\n      },\n      { variant: [\"attached\"], itemHeaderBadgeColor: [\"primary\"], class: \"bg-primary-950\" },\n      {\n        variant: [\"separated\"],\n        itemHeaderBadgeColor: [\"primary\"],\n        class:\n          \"bg-primary-950 transition-all group-data-[state=open]/accordionItem:bg-base-50 group-data-[state=open]/accordionItem:group-data-[disabled]/accordionItem:bg-base-300\",\n      },\n    ],\n    defaultVariants: {\n      variant: accordionDefaults.variant,\n      itemHeaderBadgeColor: accordionItemHeaderBadgeDefaults.color,\n    },\n  });\n  return rootClass({\n    class: className,\n    variant: accordionProps?.variant,\n    itemHeaderBadgeColor: accordionItemHeaderBadgeProps?.color,\n  });\n};\n\nexport const accordionItemHeaderBadgeLabelClass = ({\n  className,\n  accordionProps,\n  accordionItemHeaderBadgeProps,\n}: AccordionItemHeaderBadgeType) => {\n  const labelClass = tv({\n    base: \"text-xs font-text font-normal\",\n    variants: {\n      variant: { attached: \"text-base-50\", separated: \"\" },\n      itemHeaderBadgeColor: { primary: \"\", base: \"\", green: \"text-base-50\", red: \"text-base-50\" },\n    },\n    compoundVariants: [\n      {\n        variant: [\"separated\"],\n        itemHeaderBadgeColor: [\"primary\", \"base\"],\n        class:\n          \"group-data-[disabled]/accordionItem:text-base-50 text-base-50 group-data-[state=open]/accordionItem:text-base-950 group-data-[state=open]/accordionItem:group-data-[disabled]/accordionItem:text-base-50\",\n      },\n    ],\n    defaultVariants: {\n      variant: accordionDefaults.variant,\n      itemHeaderBadgeColor: accordionItemHeaderBadgeDefaults.color,\n    },\n  });\n  return labelClass({\n    class: className,\n\n    variant: accordionProps?.variant,\n    itemHeaderBadgeColor: accordionItemHeaderBadgeProps?.color,\n  });\n};\n\nexport const accordionItemHeaderBadgeIconClass = ({\n  className,\n  accordionProps,\n  accordionItemHeaderBadgeProps,\n}: AccordionItemHeaderBadgeType) => {\n  const iconClass = tv({\n    base: \"w-3 h-3\",\n    variants: {\n      variant: { attached: \"text-base-50\", separated: \"\" },\n      itemHeaderBadgeColor: { primary: \"\", base: \"\", green: \"text-base-50\", red: \"text-base-50\" },\n    },\n    compoundVariants: [\n      {\n        variant: [\"separated\"],\n        itemHeaderBadgeColor: [\"primary\", \"base\"],\n        class:\n          \"group-data-[state=open]/accordionItem:text-base-950 text-base-50 group-data-[disabled]/accordionItem:text-base-50 group-data-[state=open]/accordionItem:group-data-[disabled]/accordionItem:text-base-50\",\n      },\n    ],\n    defaultVariants: {\n      variant: accordionDefaults.variant,\n      itemHeaderBadgeColor: accordionItemHeaderBadgeDefaults.color,\n    },\n  });\n  return iconClass({\n    class: className,\n\n    variant: accordionProps?.variant,\n    itemHeaderBadgeColor: accordionItemHeaderBadgeProps?.color,\n  });\n};\n\nexport const AccordionItemHeaderBadgeLayout = ({\n  renderRoot,\n  styleProps: { className },\n  labelSlot,\n}: {\n  renderRoot: RenderRoot;\n  styleProps: AccordionItemHeaderBadgeType;\n  labelSlot: React.ReactNode;\n}) => renderRoot(<>{labelSlot}</>, `h-6 w-fit flex flex-row justify-center items-center px-2 ${className}`);\nexport const AccordionItemHeaderBadgeWithIconLayout = ({\n  renderRoot,\n  styleProps: { className },\n  iconSlot,\n  labelSlot,\n}: {\n  renderRoot: RenderRoot;\n  styleProps: AccordionItemHeaderBadgeType;\n  iconSlot: React.ReactNode;\n  labelSlot: React.ReactNode;\n}) =>\n  renderRoot(\n    <>\n      {iconSlot}\n      {labelSlot}\n    </>,\n    `h-6 w-fit flex flex-row justify-center items-center gap-1 pl-1 pr-2 ${className}`,\n  );\n\nexport type AccordionItemHeaderRateItemType = {\n  className?: string;\n  accordionProps?: AccordionStyleProps;\n  accordionItemProps?: AccordionItemStyleProps;\n};\n\nexport const accordionItemHeaderRateItemClass = ({ className, accordionProps }: AccordionItemHeaderRateItemType) => {\n  const rootClass = tv({\n    base: \"group/accordionItemHeaderRateItem rounded-[50px] transition-all\",\n    variants: {\n      variant: {\n        attached: \"data-[ring=true]:border-solid data-[ring=true]:border-primary-950 data-[ring=true]:border-1\",\n        separated: `\ndata-[highlighted]:data-[ring=true]:rounded-[50px]\n  data-[ring=true]:rounded-[50px]\n  data-[highlighted]:data-[ring=true]:transition-all\n  data-[ring=true]:transition-all\n  data-[highlighted]:data-[ring=true]:border-solid\n  data-[ring=true]:border-solid\n  data-[highlighted]:data-[ring=true]:border-primary-950\n  data-[ring=true]:border-primary-950\n  data-[highlighted]:data-[ring=true]:border-1\n  data-[ring=true]:border-1\n  group-data-[state=open]/accordionItem:data-[highlighted]:data-[ring=true]:border-primary-50\n  group-data-[state=open]/accordionItem:data-[ring=true]:border-primary-50\n`,\n      },\n    },\n\n    defaultVariants: { variant: accordionDefaults.variant },\n  });\n  return rootClass({\n    class: className,\n    variant: accordionProps?.variant,\n  });\n};\n\nexport const accordionItemHeaderRateItemIconClass = ({\n  className,\n  accordionProps,\n}: AccordionItemHeaderRateItemType) => {\n  const iconClass = tv({\n    base: \"w-[22px] h-[22px] group-data-[highlighted]/accordionItemHeaderRateItem:text-warning-500\",\n    variants: {\n      variant: {\n        separated: `\ntext-base-300\n  group-data-[disabled]/accordionItemHeaderRate:text-base-300\n  group-data-[disabled]/accordionItem:group-data-[highlighted]/accordionItemHeaderRateItem:text-base-300\n  group-data-[state=open]/accordionItem:group-data-[disabled]/accordionItemHeaderRate:text-base-400\n  group-data-[state=open]/accordionItem:group-data-[disabled]/accordionItem:text-base-400\n  group-data-[state=open]/accordionItem:text-base-600\n  group-data-[state=open]/accordionItem:group-data-[highlighted]/accordionItemHeaderRateItem:text-warning-500\n  group-data-[state=open]/accordionItem:group-data-[disabled]/accordionItem:group-data-[highlighted]/accordionItemHeaderRateItem:text-base-400\n  group-data-[highlighted]/accordionItemHeaderRateItem:group-data-[disabled]/accordionItemHeaderRate:text-base-300\n`,\n        attached: `\ngroup-data-[disabled]/accordionItemHeaderRate:text-base-300\n  text-base-300\n  group-data-[disabled]/accordionItem:group-data-[highlighted]/accordionItemHeaderRateItem:text-base-300\n  group-data-[highlighted]/accordionItemHeaderRateItem:group-data-[disabled]/accordionItemHeaderRate:text-base-300\n`,\n      },\n    },\n\n    defaultVariants: { variant: accordionDefaults.variant },\n  });\n  return iconClass({\n    class: className,\n\n    variant: accordionProps?.variant,\n  });\n};\n\nexport const AccordionItemHeaderRateItemLayout = ({\n  renderRoot,\n  styleProps: { className },\n  iconSlot,\n}: {\n  renderRoot: RenderRoot;\n  styleProps: AccordionItemHeaderRateItemType;\n  iconSlot: React.ReactNode;\n}) => renderRoot(<>{iconSlot}</>, `h-7 w-7 flex flex-row justify-center items-center ${className}`);\n\n",
        "target": "underatom/components/radix/accordion/accordion.tsx"
      }
    ]
  },
  {
    "name": "action-panel",
    "type": "registry:ui",
    "relativePath": "radix/action-panel",
    "stylingName": "action-panel.tsx",
    "dependencies": [
      "@radix-ui/react-dropdown-menu",
      "@radix-ui/react-switch",
      "@radix-ui/react-avatar",
      "react-aria"
    ],
    "files": [
      {
        "type": "registry:ui",
        "path": "ui/radix/action-panel/ActionPanel.atoms.tsx",
        "content": "import { AvatarImageProps } from \"@radix-ui/react-avatar\";\nimport {\n  ActionPanelGroupItemBoxAvatarLayout,\n  ActionPanelGroupItemBoxAvatarWithIconLayout,\n  ActionPanelGroupItemBoxBadgeLayout,\n  ActionPanelGroupItemBoxBadgeWithIconLayout,\n  ActionPanelGroupItemBoxIconBoxLayout,\n  ActionPanelGroupItemBoxLayout,\n  ActionPanelGroupItemBoxSwitchLayout,\n  ActionPanelGroupItemBoxWithAvatarAndDescriptionLayout,\n  ActionPanelGroupItemBoxWithAvatarLayout,\n  ActionPanelGroupItemBoxWithDescriptionLayout,\n  ActionPanelGroupItemKBDLayout,\n  ActionPanelGroupItemKBDWithIconLayout,\n  ActionPanelGroupItemLayout,\n  ActionPanelGroupItemWithCaretLayout,\n  ActionPanelGroupItemWithKBDLayout,\n  ActionPanelGroupLayout,\n  ActionPanelLayout,\n} from \"./action-panel\";\nimport {\n  UActionPanelGroupItemBoxBadgeIcon,\n  UActionPanelGroupItemBoxBadgeLabel,\n  UActionPanelGroupItemBoxBadgeRoot,\n  UActionPanelGroupItemBoxBadgeRootProps,\n  UActionPanelGroupItemBoxAvatarIcon,\n  UActionPanelGroupItemBoxAvatarImage,\n  UActionPanelGroupItemBoxAvatarLabel,\n  UActionPanelGroupItemBoxAvatarRoot,\n  UActionPanelGroupItemBoxAvatarRootProps,\n  UActionPanelGroupItemBoxDescription,\n  UActionPanelGroupItemBoxIcon,\n  UActionPanelGroupItemBoxIconBoxIcon,\n  UActionPanelGroupItemBoxIconBoxRoot,\n  UActionPanelGroupItemBoxIconBoxRootProps,\n  UActionPanelGroupItemKBDIcon,\n  UActionPanelGroupItemKBDLabel,\n  UActionPanelGroupItemKBDRoot,\n  UActionPanelGroupItemKBDRootProps,\n  UActionPanelGroupItemBoxLabel,\n  UActionPanelGroupItemBoxRoot,\n  UActionPanelGroupItemBoxRootProps,\n  UActionPanelGroupItemBoxSupporting,\n  UActionPanelGroupItemBoxSwitchHandle,\n  UActionPanelGroupItemBoxSwitchRoot,\n  UActionPanelGroupItemBoxSwitchRootProps,\n  UActionPanelGroupItemCaret,\n  UActionPanelGroupItemCheck,\n  UActionPanelGroupItemRoot,\n  UActionPanelGroupItemRootProps,\n  UActionPanelGroupRoot,\n  UActionPanelGroupRootProps,\n  UActionPanelGroupTitle,\n  UActionPanelRoot,\n  UActionPanelRootProps,\n  UActionPanelGroupCheckboxItemRootProps,\n  UActionPanelGroupCheckboxItemRoot,\n  UActionPanelGroupItemBoxAvatarFallback,\n  useActionPanelInternalProvider,\n  useActionPanelGroupInternalProvider,\n  useActionPanelGroupItemInternalProvider,\n} from \"./ActionPanel.underatoms\";\n\n/*\n  ====================================\n  ActionPanel\n  ====================================\n*/\n\nexport type ActionPanelProps = UActionPanelRootProps & {\n  groupSlots: React.ReactNode;\n};\n\nexport const ActionPanel = ({ groupSlots, ...props }: ActionPanelProps) => {\n  return (\n    <ActionPanelLayout\n      renderRoot={(children, className) => (\n        <UActionPanelRoot {...props} className={className}>\n          {children}\n        </UActionPanelRoot>\n      )}\n      styleProps={{ className: props.className, actionPanelProps: props }}\n      groupSlots={groupSlots}\n    />\n  );\n};\n\n/*\n  ====================================\n  ActionPanelGroup\n  ====================================\n*/\n\nexport type ActionPanelGroupProps = UActionPanelGroupRootProps & {\n  title?: string;\n  itemSlots?: React.ReactNode;\n};\nexport const ActionPanelGroup = ({ title, itemSlots, ...props }: ActionPanelGroupProps) => {\n  const actionPanelProps = useActionPanelInternalProvider();\n  return (\n    <ActionPanelGroupLayout\n      renderRoot={(children, className) => (\n        <UActionPanelGroupRoot {...props} className={className}>\n          {children}\n        </UActionPanelGroupRoot>\n      )}\n      styleProps={{ className: props.className, actionPanelProps, actionPanelGroupProps: props }}\n      titleSlot={title && <UActionPanelGroupTitle>{title}</UActionPanelGroupTitle>}\n      itemSlots={itemSlots}\n    />\n  );\n};\n\n/*\n  ====================================\n  ActionPanelGroupItem\n  ====================================\n*/\n\nexport type ActionPanelGroupItemProps = UActionPanelGroupItemRootProps & {\n  boxSlot: React.ReactNode;\n};\nexport const ActionPanelGroupItem = ({ boxSlot, ...props }: ActionPanelGroupItemProps) => {\n  const actionPanelProps = useActionPanelInternalProvider();\n  const actionPanelGroupProps = useActionPanelGroupInternalProvider();\n  return (\n    <ActionPanelGroupItemLayout\n      renderRoot={(children, className) => (\n        <UActionPanelGroupItemRoot {...props} className={className}>\n          {children}\n        </UActionPanelGroupItemRoot>\n      )}\n      styleProps={{\n        className: props.className,\n        actionPanelProps,\n        actionPanelGroupProps,\n        actionPanelGroupItemProps: props,\n      }}\n      checkIconSlot={null}\n      boxSlot={boxSlot}\n    />\n  );\n};\n\nexport type ActionPanelGroupCheckboxItemProps = UActionPanelGroupCheckboxItemRootProps & {\n  boxSlot: React.ReactNode;\n};\nexport const ActionPanelGroupCheckboxItem = ({ boxSlot, ...props }: ActionPanelGroupCheckboxItemProps) => {\n  const actionPanelProps = useActionPanelInternalProvider();\n  const actionPanelGroupProps = useActionPanelGroupInternalProvider();\n  return (\n    <ActionPanelGroupItemLayout\n      renderRoot={(children, className) => (\n        <UActionPanelGroupCheckboxItemRoot {...props} className={className}>\n          {children}\n        </UActionPanelGroupCheckboxItemRoot>\n      )}\n      styleProps={{\n        className: props.className,\n        actionPanelProps,\n        actionPanelGroupProps,\n        actionPanelGroupItemProps: props,\n      }}\n      checkIconSlot={<UActionPanelGroupItemCheck />}\n      boxSlot={boxSlot}\n    />\n  );\n};\n\nexport type ActionPanelGroupItemWithCaretProps = UActionPanelGroupItemRootProps & {\n  boxSlot: React.ReactNode;\n};\nexport const ActionPanelGroupItemWithCaret = ({ boxSlot, ...props }: ActionPanelGroupItemWithCaretProps) => {\n  const actionPanelProps = useActionPanelInternalProvider();\n  const actionPanelGroupProps = useActionPanelGroupInternalProvider();\n  return (\n    <ActionPanelGroupItemWithCaretLayout\n      renderRoot={(children, className) => (\n        <UActionPanelGroupItemRoot {...props} className={className}>\n          {children}\n        </UActionPanelGroupItemRoot>\n      )}\n      styleProps={{\n        className: props.className,\n        actionPanelProps,\n        actionPanelGroupProps,\n        actionPanelGroupItemProps: props,\n      }}\n      checkIconSlot={<UActionPanelGroupItemCheck />}\n      caretSlot={<UActionPanelGroupItemCaret />}\n      boxSlot={boxSlot}\n    />\n  );\n};\n\nexport type ActionPanelGroupItemWithKBDProps = UActionPanelGroupItemRootProps & {\n  boxSlot: React.ReactNode;\n  KBDSlot?: React.ReactNode;\n};\nexport const ActionPanelGroupItemWithKBD = ({ boxSlot, KBDSlot, ...props }: ActionPanelGroupItemWithKBDProps) => {\n  const actionPanelProps = useActionPanelInternalProvider();\n  const actionPanelGroupProps = useActionPanelGroupInternalProvider();\n  return (\n    <ActionPanelGroupItemWithKBDLayout\n      renderRoot={(children, className) => (\n        <UActionPanelGroupItemRoot {...props} className={className}>\n          {children}\n        </UActionPanelGroupItemRoot>\n      )}\n      styleProps={{\n        className: props.className,\n        actionPanelProps,\n        actionPanelGroupProps,\n        actionPanelGroupItemProps: props,\n      }}\n      checkIconSlot={<UActionPanelGroupItemCheck />}\n      kBDSlot={KBDSlot}\n      boxSlot={boxSlot}\n    />\n  );\n};\n\n/*\n  ====================================\n  ActionPanelGroupItemKBD\n  ====================================\n*/\n\nexport type ActionPanelGroupItemKBDProps = Omit<UActionPanelGroupItemKBDRootProps, \"children\"> & {\n  label: string;\n};\nexport const ActionPanelGroupItemKBD = ({ label, ...props }: ActionPanelGroupItemKBDProps) => {\n  const actionPanelProps = useActionPanelInternalProvider();\n  const actionPanelGroupProps = useActionPanelGroupInternalProvider();\n  const actionPanelGroupItemProps = useActionPanelGroupItemInternalProvider();\n  return (\n    <ActionPanelGroupItemKBDLayout\n      renderRoot={(children, className) => (\n        <UActionPanelGroupItemKBDRoot {...props} className={className}>\n          {children}\n        </UActionPanelGroupItemKBDRoot>\n      )}\n      styleProps={{\n        className: props.className,\n        actionPanelProps,\n        actionPanelGroupProps,\n        actionPanelGroupItemProps,\n      }}\n      labelSlot={<UActionPanelGroupItemKBDLabel>{label}</UActionPanelGroupItemKBDLabel>}\n    />\n  );\n};\n\nexport type ActionPanelGroupItemKBDWithIconProps = Omit<UActionPanelGroupItemKBDRootProps, \"children\"> & {\n  icon?: (className: string) => React.ReactNode;\n  label?: string;\n};\nexport const ActionPanelGroupItemKBDWithIcon = ({ icon, label, ...props }: ActionPanelGroupItemKBDWithIconProps) => {\n  const actionPanelProps = useActionPanelInternalProvider();\n  const actionPanelGroupProps = useActionPanelGroupInternalProvider();\n  const actionPanelGroupItemProps = useActionPanelGroupItemInternalProvider();\n  return (\n    <ActionPanelGroupItemKBDWithIconLayout\n      renderRoot={(children, className) => (\n        <UActionPanelGroupItemKBDRoot {...props} className={className}>\n          {children}\n        </UActionPanelGroupItemKBDRoot>\n      )}\n      styleProps={{\n        className: props.className,\n        actionPanelProps,\n        actionPanelGroupProps,\n        actionPanelGroupItemProps,\n      }}\n      iconSlot={icon && <UActionPanelGroupItemKBDIcon>{icon}</UActionPanelGroupItemKBDIcon>}\n      labelSlot={label && <UActionPanelGroupItemKBDLabel>{label}</UActionPanelGroupItemKBDLabel>}\n    />\n  );\n};\n\n/*\n  ====================================\n  ActionPanelGroupItemBox\n  ====================================\n*/\n\nexport type ActionPanelGroupItemBoxProps = Omit<UActionPanelGroupItemBoxRootProps, \"children\"> & {\n  icon?: (className: string) => React.ReactNode;\n  label?: string;\n  badgeSlot?: React.ReactNode;\n  switchSlot?: React.ReactNode;\n};\nexport const ActionPanelGroupItemBox = ({\n  icon,\n  label,\n  badgeSlot,\n  switchSlot,\n  ...props\n}: ActionPanelGroupItemBoxProps) => {\n  const actionPanelProps = useActionPanelInternalProvider();\n  const actionPanelGroupProps = useActionPanelGroupInternalProvider();\n  const actionPanelGroupItemProps = useActionPanelGroupItemInternalProvider();\n  return (\n    <ActionPanelGroupItemBoxLayout\n      renderRoot={(children, className) => (\n        <UActionPanelGroupItemBoxRoot {...props} className={className}>\n          {children}\n        </UActionPanelGroupItemBoxRoot>\n      )}\n      styleProps={{\n        className: props.className,\n        actionPanelProps,\n        actionPanelGroupProps,\n        actionPanelGroupItemProps,\n      }}\n      iconSlot={icon && <UActionPanelGroupItemBoxIcon>{icon}</UActionPanelGroupItemBoxIcon>}\n      labelSlot={label && <UActionPanelGroupItemBoxLabel>{label}</UActionPanelGroupItemBoxLabel>}\n      badgeSlot={badgeSlot}\n      switchSlot={switchSlot}\n    />\n  );\n};\n\nexport type ActionPanelGroupItemBoxWithAvatarProps = Omit<UActionPanelGroupItemBoxRootProps, \"children\"> & {\n  label?: string;\n  badgeSlot?: React.ReactNode;\n  switchSlot?: React.ReactNode;\n  avatarSlot?: React.ReactNode;\n};\nexport const ActionPanelGroupItemBoxWithAvatar = ({\n  avatarSlot,\n  label,\n  badgeSlot,\n  switchSlot,\n  ...props\n}: ActionPanelGroupItemBoxWithAvatarProps) => {\n  const actionPanelProps = useActionPanelInternalProvider();\n  const actionPanelGroupProps = useActionPanelGroupInternalProvider();\n  const actionPanelGroupItemProps = useActionPanelGroupItemInternalProvider();\n  return (\n    <ActionPanelGroupItemBoxWithAvatarLayout\n      renderRoot={(children, className) => (\n        <UActionPanelGroupItemBoxRoot {...props} className={className}>\n          {children}\n        </UActionPanelGroupItemBoxRoot>\n      )}\n      styleProps={{\n        className: props.className,\n        actionPanelProps,\n        actionPanelGroupProps,\n        actionPanelGroupItemProps,\n      }}\n      labelSlot={label && <UActionPanelGroupItemBoxLabel>{label}</UActionPanelGroupItemBoxLabel>}\n      avatarSlot={avatarSlot}\n      badgeSlot={badgeSlot}\n      switchSlot={switchSlot}\n    />\n  );\n};\n\nexport type ActionPanelGroupItemBoxWithDescriptionProps = Omit<UActionPanelGroupItemBoxRootProps, \"children\"> & {\n  label?: string;\n  description?: string;\n  supportingText?: string;\n  badgeSlot?: React.ReactNode;\n  switchSlot?: React.ReactNode;\n  iconBoxSlot?: React.ReactNode;\n};\nexport const ActionPanelGroupItemBoxWithDescription = ({\n  label,\n  description,\n  supportingText,\n  badgeSlot,\n  switchSlot,\n  iconBoxSlot,\n  ...props\n}: ActionPanelGroupItemBoxWithDescriptionProps) => {\n  const actionPanelProps = useActionPanelInternalProvider();\n  const actionPanelGroupProps = useActionPanelGroupInternalProvider();\n  const actionPanelGroupItemProps = useActionPanelGroupItemInternalProvider();\n  return (\n    <ActionPanelGroupItemBoxWithDescriptionLayout\n      renderRoot={(children, className) => (\n        <UActionPanelGroupItemBoxRoot {...props} className={className}>\n          {children}\n        </UActionPanelGroupItemBoxRoot>\n      )}\n      styleProps={{\n        className: props.className,\n        actionPanelProps,\n        actionPanelGroupProps,\n        actionPanelGroupItemProps,\n      }}\n      labelSlot={<UActionPanelGroupItemBoxLabel>{label}</UActionPanelGroupItemBoxLabel>}\n      descriptionSlot={\n        description && <UActionPanelGroupItemBoxDescription>{description}</UActionPanelGroupItemBoxDescription>\n      }\n      supportingSlot={\n        supportingText && <UActionPanelGroupItemBoxSupporting>{supportingText}</UActionPanelGroupItemBoxSupporting>\n      }\n      badgeSlot={badgeSlot}\n      switchSlot={switchSlot}\n      iconBoxSlot={iconBoxSlot}\n    />\n  );\n};\n\nexport type ActionPanelGroupItemBoxWithAvatarAndDescriptionProps = Omit<\n  UActionPanelGroupItemBoxRootProps,\n  \"children\"\n> & {\n  label?: string;\n  description?: string;\n  supportingText?: string;\n  badgeSlot?: React.ReactNode;\n  switchSlot?: React.ReactNode;\n  avatarSlot?: React.ReactNode;\n};\nexport const ActionPanelGroupItemBoxWithAvatarAndDescription = ({\n  label,\n  description,\n  supportingText,\n  badgeSlot,\n  switchSlot,\n  avatarSlot,\n  ...props\n}: ActionPanelGroupItemBoxWithAvatarAndDescriptionProps) => {\n  const actionPanelProps = useActionPanelInternalProvider();\n  const actionPanelGroupProps = useActionPanelGroupInternalProvider();\n  const actionPanelGroupItemProps = useActionPanelGroupItemInternalProvider();\n  return (\n    <ActionPanelGroupItemBoxWithAvatarAndDescriptionLayout\n      renderRoot={(children, className) => (\n        <UActionPanelGroupItemBoxRoot {...props} className={className}>\n          {children}\n        </UActionPanelGroupItemBoxRoot>\n      )}\n      styleProps={{\n        className: props.className,\n        actionPanelProps,\n        actionPanelGroupProps,\n        actionPanelGroupItemProps,\n      }}\n      labelSlot={<UActionPanelGroupItemBoxLabel>{label}</UActionPanelGroupItemBoxLabel>}\n      descriptionSlot={\n        description && <UActionPanelGroupItemBoxDescription>{description}</UActionPanelGroupItemBoxDescription>\n      }\n      supportingSlot={\n        supportingText && <UActionPanelGroupItemBoxSupporting>{supportingText}</UActionPanelGroupItemBoxSupporting>\n      }\n      avatarSlot={avatarSlot}\n      badgeSlot={badgeSlot}\n      switchSlot={switchSlot}\n    />\n  );\n};\n\n/*\n  ====================================\n  ActionPanelGroupItemBoxIconBox\n  ====================================\n*/\n\nexport type ActionPanelGroupItemBoxIconBoxProps = Omit<UActionPanelGroupItemBoxIconBoxRootProps, \"children\"> & {\n  icon: (className: string) => React.ReactNode;\n};\nexport const ActionPanelGroupItemBoxIconBox = ({ icon, ...props }: ActionPanelGroupItemBoxIconBoxProps) => {\n  const actionPanelProps = useActionPanelInternalProvider();\n  const actionPanelGroupProps = useActionPanelGroupInternalProvider();\n  const actionPanelGroupItemProps = useActionPanelGroupItemInternalProvider();\n  return (\n    <ActionPanelGroupItemBoxIconBoxLayout\n      renderRoot={(children, className) => (\n        <UActionPanelGroupItemBoxIconBoxRoot {...props} className={className}>\n          {children}\n        </UActionPanelGroupItemBoxIconBoxRoot>\n      )}\n      styleProps={{\n        className: props.className,\n        actionPanelProps,\n        actionPanelGroupProps,\n        actionPanelGroupItemProps,\n      }}\n      iconSlot={<UActionPanelGroupItemBoxIconBoxIcon>{icon}</UActionPanelGroupItemBoxIconBoxIcon>}\n    />\n  );\n};\n\n/*\n  ====================================\n  ActionPanelGroupItemBoxSwitch\n  ====================================\n*/\n\nexport type ActionPanelGroupItemBoxSwitchProps = UActionPanelGroupItemBoxSwitchRootProps;\nexport const ActionPanelGroupItemBoxSwitch = (props: ActionPanelGroupItemBoxSwitchProps) => {\n  const actionPanelProps = useActionPanelInternalProvider();\n  const actionPanelGroupProps = useActionPanelGroupInternalProvider();\n  const actionPanelGroupItemProps = useActionPanelGroupItemInternalProvider();\n  return (\n    <ActionPanelGroupItemBoxSwitchLayout\n      renderRoot={(children, className) => (\n        <UActionPanelGroupItemBoxSwitchRoot {...props} className={className}>\n          {children}\n        </UActionPanelGroupItemBoxSwitchRoot>\n      )}\n      styleProps={{\n        className: props.className,\n        actionPanelProps,\n        actionPanelGroupProps,\n        actionPanelGroupItemProps,\n      }}\n      handleSlot={<UActionPanelGroupItemBoxSwitchHandle />}\n    />\n  );\n};\n\n/*\n  ====================================\n  ActionPanelGroupItemBoxAvatar\n  ====================================\n*/\n\nexport type ActionPanelGroupItemBoxAvatarProps = Omit<UActionPanelGroupItemBoxAvatarRootProps, \"children\"> & {\n  imageProps?: AvatarImageProps;\n  fallbackText?: string;\n};\nexport const ActionPanelGroupItemBoxAvatar = ({\n  imageProps,\n  fallbackText,\n  ...props\n}: ActionPanelGroupItemBoxAvatarProps) => {\n  const actionPanelProps = useActionPanelInternalProvider();\n  const actionPanelGroupProps = useActionPanelGroupInternalProvider();\n  const actionPanelGroupItemProps = useActionPanelGroupItemInternalProvider();\n  return (\n    <ActionPanelGroupItemBoxAvatarLayout\n      renderRoot={(children, className) => (\n        <UActionPanelGroupItemBoxAvatarRoot {...props} className={className}>\n          {children}\n        </UActionPanelGroupItemBoxAvatarRoot>\n      )}\n      styleProps={{\n        className: props.className,\n        actionPanelProps,\n        actionPanelGroupProps,\n        actionPanelGroupItemProps,\n        actionPanelGroupItemBoxAvatarProps: props,\n      }}\n      imageSlot={imageProps && <UActionPanelGroupItemBoxAvatarImage {...imageProps} />}\n      labelSlot={\n        fallbackText && (\n          <UActionPanelGroupItemBoxAvatarFallback>\n            <UActionPanelGroupItemBoxAvatarLabel>{fallbackText}</UActionPanelGroupItemBoxAvatarLabel>\n          </UActionPanelGroupItemBoxAvatarFallback>\n        )\n      }\n    />\n  );\n};\n\nexport type ActionPanelGroupItemBoxAvatarWithIconProps = Omit<UActionPanelGroupItemBoxAvatarRootProps, \"children\"> & {\n  imageProps?: AvatarImageProps;\n  fallbackIcon?: (className: string) => React.ReactNode;\n};\nexport const ActionPanelGroupItemBoxAvatarWithIcon = ({\n  imageProps,\n  fallbackIcon,\n  ...props\n}: ActionPanelGroupItemBoxAvatarWithIconProps) => {\n  const actionPanelProps = useActionPanelInternalProvider();\n  const actionPanelGroupProps = useActionPanelGroupInternalProvider();\n  const actionPanelGroupItemProps = useActionPanelGroupItemInternalProvider();\n  return (\n    <ActionPanelGroupItemBoxAvatarWithIconLayout\n      renderRoot={(children, className) => (\n        <UActionPanelGroupItemBoxAvatarRoot {...props} className={className}>\n          {children}\n        </UActionPanelGroupItemBoxAvatarRoot>\n      )}\n      styleProps={{\n        className: props.className,\n        actionPanelProps,\n        actionPanelGroupProps,\n        actionPanelGroupItemProps,\n        actionPanelGroupItemBoxAvatarProps: props,\n      }}\n      imageSlot={imageProps && <UActionPanelGroupItemBoxAvatarImage {...imageProps} />}\n      iconSlot={\n        fallbackIcon && (\n          <UActionPanelGroupItemBoxAvatarFallback>\n            <UActionPanelGroupItemBoxAvatarIcon>{fallbackIcon}</UActionPanelGroupItemBoxAvatarIcon>\n          </UActionPanelGroupItemBoxAvatarFallback>\n        )\n      }\n    />\n  );\n};\n\n/*\n  ====================================\n  ActionPanelGroupItemBoxBadge\n  ====================================\n*/\n\nexport type ActionPanelGroupItemBoxBadgeProps = Omit<UActionPanelGroupItemBoxBadgeRootProps, \"children\"> & {\n  label: string;\n};\nexport const ActionPanelGroupItemBoxBadge = ({ label, ...props }: ActionPanelGroupItemBoxBadgeProps) => {\n  const actionPanelProps = useActionPanelInternalProvider();\n  const actionPanelGroupProps = useActionPanelGroupInternalProvider();\n  const actionPanelGroupItemProps = useActionPanelGroupItemInternalProvider();\n  return (\n    <ActionPanelGroupItemBoxBadgeLayout\n      renderRoot={(children, className) => (\n        <UActionPanelGroupItemBoxBadgeRoot {...props} className={className}>\n          {children}\n        </UActionPanelGroupItemBoxBadgeRoot>\n      )}\n      styleProps={{\n        className: props.className,\n        actionPanelProps,\n        actionPanelGroupProps,\n        actionPanelGroupItemProps,\n        actionPanelGroupItemBoxBadgeProps: props,\n      }}\n      labelSlot={<UActionPanelGroupItemBoxBadgeLabel>{label}</UActionPanelGroupItemBoxBadgeLabel>}\n    />\n  );\n};\n\nexport type ActionPanelGroupItemBoxBadgeWithIconProps = Omit<UActionPanelGroupItemBoxBadgeRootProps, \"children\"> & {\n  icon?: (className: string) => React.ReactNode;\n  label?: string;\n};\nexport const ActionPanelGroupItemBoxBadgeWithIcon = ({\n  icon,\n  label,\n  ...props\n}: ActionPanelGroupItemBoxBadgeWithIconProps) => {\n  const actionPanelProps = useActionPanelInternalProvider();\n  const actionPanelGroupProps = useActionPanelGroupInternalProvider();\n  const actionPanelGroupItemProps = useActionPanelGroupItemInternalProvider();\n  return (\n    <ActionPanelGroupItemBoxBadgeWithIconLayout\n      renderRoot={(children, className) => (\n        <UActionPanelGroupItemBoxBadgeRoot {...props} className={className}>\n          {children}\n        </UActionPanelGroupItemBoxBadgeRoot>\n      )}\n      styleProps={{\n        className: props.className,\n        actionPanelProps,\n        actionPanelGroupProps,\n        actionPanelGroupItemProps,\n        actionPanelGroupItemBoxBadgeProps: props,\n      }}\n      iconSlot={icon && <UActionPanelGroupItemBoxBadgeIcon>{icon}</UActionPanelGroupItemBoxBadgeIcon>}\n      labelSlot={label && <UActionPanelGroupItemBoxBadgeLabel>{label}</UActionPanelGroupItemBoxBadgeLabel>}\n    />\n  );\n};\n",
        "target": "underatom/components/radix/action-panel/ActionPanel.atoms.tsx"
      },
      {
        "type": "registry:ui",
        "path": "ui/radix/action-panel/ActionPanel.underatoms.tsx",
        "content": "import * as DropdownMenu from \"@radix-ui/react-dropdown-menu\";\nimport * as Switch from \"@radix-ui/react-switch\";\nimport * as Avatar from \"@radix-ui/react-avatar\";\nimport { CaretDown, Check } from \"../../../utils/Icons\";\nimport { ReactNode } from \"react\";\nimport { mergeProps, useFocusRing } from \"react-aria\";\nimport { getGenericContext } from \"../../../utils/utils\";\nimport {\n  ActionPanelGroupItemBoxAvatarStyleProps,\n  ActionPanelGroupItemBoxBadgeStyleProps,\n  ActionPanelGroupItemStyleProps,\n  ActionPanelGroupStyleProps,\n  ActionPanelStyleProps,\n  actionPanelClass,\n  actionPanelGroupClass,\n  actionPanelGroupItemBoxAvatarClass,\n  actionPanelGroupItemBoxAvatarIconClass,\n  actionPanelGroupItemBoxAvatarImageClass,\n  actionPanelGroupItemBoxAvatarLabelClass,\n  actionPanelGroupItemBoxBadgeClass,\n  actionPanelGroupItemBoxBadgeIconClass,\n  actionPanelGroupItemBoxBadgeLabelClass,\n  actionPanelGroupItemBoxClass,\n  actionPanelGroupItemBoxDescriptionClass,\n  actionPanelGroupItemBoxIconBoxClass,\n  actionPanelGroupItemBoxIconBoxIconClass,\n  actionPanelGroupItemBoxIconClass,\n  actionPanelGroupItemBoxLabelClass,\n  actionPanelGroupItemBoxSupportingClass,\n  actionPanelGroupItemBoxSwitchClass,\n  actionPanelGroupItemBoxSwitchHandleClass,\n  actionPanelGroupItemCaretClass,\n  actionPanelGroupItemCheckIconClass,\n  actionPanelGroupItemClass,\n  actionPanelGroupItemKBDClass,\n  actionPanelGroupItemKBDIconClass,\n  actionPanelGroupItemKBDLabelClass,\n  actionPanelGroupTitleClass,\n} from \"./action-panel\";\n\n/*\n  ====================================\n  ActionPanel\n  ====================================\n*/\n\nexport const { Provider: ActionPanelInternalProvider, useComponentContext: useActionPanelInternalProvider } =\n  getGenericContext<UActionPanelRootProps>(\"ActionPanelInternalProvider\");\n\nexport type UActionPanelRootProps = ActionPanelStyleProps & DropdownMenu.DropdownMenuContentProps;\nexport const UActionPanelRoot = (props: UActionPanelRootProps) => {\n  return (\n    <DropdownMenu.Content\n      {...props}\n      className={actionPanelClass({ className: props.className, actionPanelProps: props })}\n    >\n      <ActionPanelInternalProvider value={props}>{props.children}</ActionPanelInternalProvider>\n    </DropdownMenu.Content>\n  );\n};\n\nexport type UActionPanelDividerProps = DropdownMenu.DropdownMenuSeparatorProps;\nexport const UActionPanelDivider = (props: UActionPanelDividerProps) => {\n  return <DropdownMenu.Separator {...props} />;\n};\n\n/*\n  ====================================\n  ActionPanelGroup\n  ====================================\n*/\n\nexport const { Provider: ActionPanelGroupInternalProvider, useComponentContext: useActionPanelGroupInternalProvider } =\n  getGenericContext<UActionPanelGroupRootProps>(\"ActionPanelGroupInternalProvider\");\n\nexport type UActionPanelGroupRootProps = ActionPanelGroupStyleProps & DropdownMenu.DropdownMenuGroupProps;\nexport const UActionPanelGroupRoot = (props: UActionPanelGroupRootProps) => {\n  const actionPanelProps = useActionPanelInternalProvider();\n  return (\n    <DropdownMenu.Group\n      {...props}\n      className={actionPanelGroupClass({ className: props.className, actionPanelProps, actionPanelGroupProps: props })}\n    >\n      <ActionPanelGroupInternalProvider value={props}>{props.children}</ActionPanelGroupInternalProvider>\n    </DropdownMenu.Group>\n  );\n};\n\nexport type UActionPanelGroupTitleProps = DropdownMenu.DropdownMenuLabelProps;\nexport const UActionPanelGroupTitle = (props: UActionPanelGroupTitleProps) => {\n  const actionPanelProps = useActionPanelInternalProvider();\n  const actionPanelGroupProps = useActionPanelGroupInternalProvider();\n  return (\n    <DropdownMenu.Label\n      {...props}\n      className={actionPanelGroupTitleClass({ className: props.className, actionPanelProps, actionPanelGroupProps })}\n    />\n  );\n};\n\n/*\n====================================\nActionPanelGroupItem\n====================================\n*/\n\nexport const {\n  Provider: ActionPanelGroupItemInternalProvider,\n  useComponentContext: useActionPanelGroupItemInternalProvider,\n} = getGenericContext<UActionPanelGroupItemRootProps>(\"ActionPanelGroupItemInternalProvider\");\n\nexport type UActionPanelGroupItemRootProps = ActionPanelGroupItemStyleProps & DropdownMenu.DropdownMenuItemProps;\nexport const UActionPanelGroupItemRoot = (props: UActionPanelGroupItemRootProps) => {\n  const actionPanelProps = useActionPanelInternalProvider();\n  const actionPanelGroupProps = useActionPanelGroupInternalProvider();\n  return (\n    <DropdownMenu.Item\n      {...props}\n      className={actionPanelGroupItemClass({\n        className: props.className,\n        actionPanelProps,\n        actionPanelGroupProps,\n        actionPanelGroupItemProps: props,\n      })}\n    >\n      <ActionPanelGroupItemInternalProvider value={props}>{props.children}</ActionPanelGroupItemInternalProvider>\n    </DropdownMenu.Item>\n  );\n};\n\nexport type UActionPanelGroupCheckboxItemRootProps = ActionPanelGroupItemStyleProps &\n  DropdownMenu.DropdownMenuCheckboxItemProps;\nexport const UActionPanelGroupCheckboxItemRoot = (props: UActionPanelGroupCheckboxItemRootProps) => {\n  const actionPanelProps = useActionPanelInternalProvider();\n  const actionPanelGroupProps = useActionPanelGroupInternalProvider();\n  return (\n    <DropdownMenu.CheckboxItem\n      {...props}\n      className={actionPanelGroupItemClass({\n        className: props.className,\n        actionPanelProps,\n        actionPanelGroupProps,\n        actionPanelGroupItemProps: props,\n      })}\n    >\n      <ActionPanelGroupItemInternalProvider value={props}>{props.children}</ActionPanelGroupItemInternalProvider>\n    </DropdownMenu.CheckboxItem>\n  );\n};\n\nexport const UActionPanelGroupItemCaret = () => {\n  const actionPanelProps = useActionPanelInternalProvider();\n  const actionPanelGroupProps = useActionPanelGroupInternalProvider();\n  const actionPanelGroupItemProps = useActionPanelGroupItemInternalProvider();\n  return (\n    <CaretDown\n      className={actionPanelGroupItemCaretClass({ actionPanelProps, actionPanelGroupProps, actionPanelGroupItemProps })}\n    />\n  );\n};\n\nexport const UActionPanelGroupItemCheck = () => {\n  const actionPanelProps = useActionPanelInternalProvider();\n  const actionPanelGroupProps = useActionPanelGroupInternalProvider();\n  const actionPanelGroupItemProps = useActionPanelGroupItemInternalProvider();\n  return (\n    <DropdownMenu.ItemIndicator style={{ display: \"flex\" }}>\n      <Check\n        className={actionPanelGroupItemCheckIconClass({\n          actionPanelProps,\n          actionPanelGroupProps,\n          actionPanelGroupItemProps,\n        })}\n      />\n    </DropdownMenu.ItemIndicator>\n  );\n};\n\n/*\n  ====================================\n  ActionPanelGroupItemKBD\n  ====================================\n*/\n\nexport type UActionPanelGroupItemKBDRootProps = {\n  children: ReactNode;\n  className?: string;\n};\nexport const UActionPanelGroupItemKBDRoot = (props: UActionPanelGroupItemKBDRootProps) => {\n  const actionPanelProps = useActionPanelInternalProvider();\n  const actionPanelGroupProps = useActionPanelGroupInternalProvider();\n  const actionPanelGroupItemProps = useActionPanelGroupItemInternalProvider();\n  return (\n    <div\n      className={actionPanelGroupItemKBDClass({\n        className: props.className,\n        actionPanelProps,\n        actionPanelGroupProps,\n        actionPanelGroupItemProps,\n      })}\n    >\n      {props.children}\n    </div>\n  );\n};\n\nexport type UActionPanelGroupItemKBDLabelProps = {\n  children: ReactNode;\n};\nexport const UActionPanelGroupItemKBDLabel = ({ children }: UActionPanelGroupItemKBDLabelProps) => {\n  const actionPanelProps = useActionPanelInternalProvider();\n  const actionPanelGroupProps = useActionPanelGroupInternalProvider();\n  const actionPanelGroupItemProps = useActionPanelGroupItemInternalProvider();\n  return (\n    <span\n      className={actionPanelGroupItemKBDLabelClass({\n        actionPanelProps,\n        actionPanelGroupProps,\n        actionPanelGroupItemProps,\n      })}\n    >\n      {children}\n    </span>\n  );\n};\n\nexport type UActionPanelGroupItemKBDIconProps = {\n  children: (className: string) => ReactNode;\n};\nexport const UActionPanelGroupItemKBDIcon = ({ children }: UActionPanelGroupItemKBDIconProps) => {\n  const actionPanelProps = useActionPanelInternalProvider();\n  const actionPanelGroupProps = useActionPanelGroupInternalProvider();\n  const actionPanelGroupItemProps = useActionPanelGroupItemInternalProvider();\n  return (\n    <>\n      {children(\n        actionPanelGroupItemKBDIconClass({ actionPanelProps, actionPanelGroupProps, actionPanelGroupItemProps }),\n      )}\n    </>\n  );\n};\n\n/*\n  ====================================\n  ActionPanelGroupItemBox\n  ====================================\n*/\n\nexport type UActionPanelGroupItemBoxRootProps = {\n  children: ReactNode;\n  className?: string;\n};\nexport const UActionPanelGroupItemBoxRoot = (props: UActionPanelGroupItemBoxRootProps) => {\n  const actionPanelProps = useActionPanelInternalProvider();\n  const actionPanelGroupProps = useActionPanelGroupInternalProvider();\n  const actionPanelGroupItemProps = useActionPanelGroupItemInternalProvider();\n  return (\n    <div\n      {...props}\n      className={actionPanelGroupItemBoxClass({\n        className: props.className,\n        actionPanelProps,\n        actionPanelGroupProps,\n        actionPanelGroupItemProps,\n      })}\n    />\n  );\n};\n\nexport type UActionPanelGroupItemBoxIconProps = {\n  children: (className: string) => ReactNode;\n};\nexport const UActionPanelGroupItemBoxIcon = ({ children }: UActionPanelGroupItemBoxIconProps) => {\n  const actionPanelProps = useActionPanelInternalProvider();\n  const actionPanelGroupProps = useActionPanelGroupInternalProvider();\n  const actionPanelGroupItemProps = useActionPanelGroupItemInternalProvider();\n  return (\n    <>\n      {children(\n        actionPanelGroupItemBoxIconClass({ actionPanelProps, actionPanelGroupProps, actionPanelGroupItemProps }),\n      )}\n    </>\n  );\n};\n\nexport type UActionPanelGroupItemBoxLabelProps = {\n  children: ReactNode;\n};\nexport const UActionPanelGroupItemBoxLabel = ({ children }: UActionPanelGroupItemBoxLabelProps) => {\n  const actionPanelProps = useActionPanelInternalProvider();\n  const actionPanelGroupProps = useActionPanelGroupInternalProvider();\n  const actionPanelGroupItemProps = useActionPanelGroupItemInternalProvider();\n  return (\n    <span\n      className={actionPanelGroupItemBoxLabelClass({\n        actionPanelProps,\n        actionPanelGroupProps,\n        actionPanelGroupItemProps,\n      })}\n    >\n      {children}\n    </span>\n  );\n};\n\nexport type UActionPanelGroupItemBoxDescriptionProps = {\n  children: ReactNode;\n};\nexport const UActionPanelGroupItemBoxDescription = ({ children }: UActionPanelGroupItemBoxDescriptionProps) => {\n  const actionPanelProps = useActionPanelInternalProvider();\n  const actionPanelGroupProps = useActionPanelGroupInternalProvider();\n  const actionPanelGroupItemProps = useActionPanelGroupItemInternalProvider();\n  return (\n    <span\n      className={actionPanelGroupItemBoxDescriptionClass({\n        actionPanelProps,\n        actionPanelGroupProps,\n        actionPanelGroupItemProps,\n      })}\n    >\n      {children}\n    </span>\n  );\n};\n\nexport type UActionPanelGroupItemBoxSupportingProps = {\n  children: ReactNode;\n};\nexport const UActionPanelGroupItemBoxSupporting = ({ children }: UActionPanelGroupItemBoxSupportingProps) => {\n  const actionPanelProps = useActionPanelInternalProvider();\n  const actionPanelGroupProps = useActionPanelGroupInternalProvider();\n  const actionPanelGroupItemProps = useActionPanelGroupItemInternalProvider();\n  return (\n    <span\n      className={actionPanelGroupItemBoxSupportingClass({\n        actionPanelProps,\n        actionPanelGroupProps,\n        actionPanelGroupItemProps,\n      })}\n    >\n      {children}\n    </span>\n  );\n};\n\n/*\n  ====================================\n  ActionPanelGroupItemBoxIconBox\n  ====================================\n*/\n\nexport type UActionPanelGroupItemBoxIconBoxRootProps = {\n  children: ReactNode;\n  className?: string;\n};\n\nexport const UActionPanelGroupItemBoxIconBoxRoot = (props: UActionPanelGroupItemBoxIconBoxRootProps) => {\n  const actionPanelProps = useActionPanelInternalProvider();\n  const actionPanelGroupProps = useActionPanelGroupInternalProvider();\n  const actionPanelGroupItemProps = useActionPanelGroupItemInternalProvider();\n  return (\n    <div\n      {...props}\n      className={actionPanelGroupItemBoxIconBoxClass({\n        className: props.className,\n        actionPanelProps,\n        actionPanelGroupProps,\n        actionPanelGroupItemProps,\n      })}\n    />\n  );\n};\n\nexport type UActionPanelGroupItemBoxIconBoxIconProps = {\n  children: (className: string) => ReactNode;\n};\nexport const UActionPanelGroupItemBoxIconBoxIcon = ({ children }: UActionPanelGroupItemBoxIconBoxIconProps) => {\n  const actionPanelProps = useActionPanelInternalProvider();\n  const actionPanelGroupProps = useActionPanelGroupInternalProvider();\n  const actionPanelGroupItemProps = useActionPanelGroupItemInternalProvider();\n  return (\n    <>\n      {children(\n        actionPanelGroupItemBoxIconBoxIconClass({ actionPanelProps, actionPanelGroupProps, actionPanelGroupItemProps }),\n      )}\n    </>\n  );\n};\n\n/*\n  ====================================\n  ActionPanelGroupItemBoxSwitch\n  ====================================\n*/\n\nexport type UActionPanelGroupItemBoxSwitchRootProps = Switch.SwitchProps;\nexport const UActionPanelGroupItemBoxSwitchRoot = (props: UActionPanelGroupItemBoxSwitchRootProps) => {\n  const actionPanelProps = useActionPanelInternalProvider();\n  const actionPanelGroupProps = useActionPanelGroupInternalProvider();\n  const actionPanelGroupItemProps = useActionPanelGroupItemInternalProvider();\n  const { disabled: parentDisabled } = useActionPanelGroupItemInternalProvider();\n  const fullProps = { ...props, disabled: props.disabled || parentDisabled };\n  const { focusProps, isFocusVisible } = useFocusRing();\n  return (\n    <Switch.Root\n      {...mergeProps(fullProps, focusProps)}\n      className={actionPanelGroupItemBoxSwitchClass({\n        className: props.className,\n        actionPanelProps,\n        actionPanelGroupProps,\n        actionPanelGroupItemProps,\n      })}\n      data-ring={isFocusVisible}\n    />\n  );\n};\n\nexport type UActionPanelGroupItemBoxSwitchHandle = Switch.SwitchThumbProps;\nexport const UActionPanelGroupItemBoxSwitchHandle = (props: UActionPanelGroupItemBoxSwitchHandle) => {\n  const actionPanelProps = useActionPanelInternalProvider();\n  const actionPanelGroupProps = useActionPanelGroupInternalProvider();\n  const actionPanelGroupItemProps = useActionPanelGroupItemInternalProvider();\n  return (\n    <Switch.Thumb\n      {...props}\n      className={actionPanelGroupItemBoxSwitchHandleClass({\n        className: props.className,\n        actionPanelProps,\n        actionPanelGroupProps,\n        actionPanelGroupItemProps,\n      })}\n    />\n  );\n};\n\n/*\n  ====================================\n  ActionPanelGroupItemBoxAvatar\n  ====================================\n*/\n\nexport type UActionPanelGroupItemBoxAvatarRootProps = ActionPanelGroupItemBoxAvatarStyleProps &\n  Avatar.AvatarProps & {\n    /** Avatar content */\n    children: Avatar.AvatarProps[\"children\"];\n    className?: string;\n  };\nexport const UActionPanelGroupItemBoxAvatarRoot = ({\n  className,\n  ...props\n}: UActionPanelGroupItemBoxAvatarRootProps) => {\n  const actionPanelProps = useActionPanelInternalProvider();\n  const actionPanelGroupProps = useActionPanelGroupInternalProvider();\n  const actionPanelGroupItemProps = useActionPanelGroupItemInternalProvider();\n  return (\n    <Avatar.Root\n      {...props}\n      className={actionPanelGroupItemBoxAvatarClass({\n        className,\n        actionPanelProps,\n        actionPanelGroupProps,\n        actionPanelGroupItemProps,\n      })}\n    >\n      {props.children}\n    </Avatar.Root>\n  );\n};\n\nexport type UActionPanelGroupItemBoxAvatarFallbackProps = Avatar.AvatarFallbackProps;\nexport const UActionPanelGroupItemBoxAvatarFallback = (props: UActionPanelGroupItemBoxAvatarFallbackProps) => {\n  return <Avatar.Fallback style={{ display: \"flex\" }} {...props} />;\n};\n\nexport type UActionPanelGroupItemBoxAvatarLabelProps = {\n  children: ReactNode;\n};\nexport const UActionPanelGroupItemBoxAvatarLabel = ({ children }: UActionPanelGroupItemBoxAvatarLabelProps) => {\n  const actionPanelProps = useActionPanelInternalProvider();\n  const actionPanelGroupProps = useActionPanelGroupInternalProvider();\n  const actionPanelGroupItemProps = useActionPanelGroupItemInternalProvider();\n  return (\n    <span\n      className={actionPanelGroupItemBoxAvatarLabelClass({\n        actionPanelProps,\n        actionPanelGroupProps,\n        actionPanelGroupItemProps,\n      })}\n    >\n      {children}\n    </span>\n  );\n};\n\nexport type UActionPanelGroupItemBoxAvatarIconProps = {\n  /** Icon render function */\n  children: (className: string) => ReactNode;\n};\nexport const UActionPanelGroupItemBoxAvatarIcon = ({ children }: UActionPanelGroupItemBoxAvatarIconProps) => {\n  const actionPanelProps = useActionPanelInternalProvider();\n  const actionPanelGroupProps = useActionPanelGroupInternalProvider();\n  const actionPanelGroupItemProps = useActionPanelGroupItemInternalProvider();\n  return (\n    <>\n      {children(\n        actionPanelGroupItemBoxAvatarIconClass({ actionPanelProps, actionPanelGroupProps, actionPanelGroupItemProps }),\n      )}\n    </>\n  );\n};\n\nexport type UActionPanelGroupItemBoxAvatarImageProps = Avatar.AvatarImageProps;\nexport const UActionPanelGroupItemBoxAvatarImage = (props: UActionPanelGroupItemBoxAvatarImageProps) => {\n  const actionPanelProps = useActionPanelInternalProvider();\n  const actionPanelGroupProps = useActionPanelGroupInternalProvider();\n  const actionPanelGroupItemProps = useActionPanelGroupItemInternalProvider();\n  return (\n    <Avatar.Image\n      {...props}\n      className={actionPanelGroupItemBoxAvatarImageClass({\n        className: props.className,\n        actionPanelProps,\n        actionPanelGroupProps,\n        actionPanelGroupItemProps,\n      })}\n    />\n  );\n};\n\n/*\n  ====================================\n  ActionPanelGroupItemBoxBadge\n  ====================================\n*/\n\nexport const {\n  Provider: ActionPanelGroupItemBoxBadgeInternalProvider,\n  useComponentContext: useActionPanelGroupItemBoxBadgeInternalProvider,\n} = getGenericContext<UActionPanelGroupItemBoxBadgeRootProps>(\"ActionPanelGroupItemBoxBadgeInternalProvider\");\n\nexport type UActionPanelGroupItemBoxBadgeRootProps = ActionPanelGroupItemBoxBadgeStyleProps & {\n  children: ReactNode;\n  className?: string;\n};\nexport const UActionPanelGroupItemBoxBadgeRoot = (props: UActionPanelGroupItemBoxBadgeRootProps) => {\n  const actionPanelProps = useActionPanelInternalProvider();\n  const actionPanelGroupProps = useActionPanelGroupInternalProvider();\n  const actionPanelGroupItemProps = useActionPanelGroupItemInternalProvider();\n  return (\n    <div\n      className={actionPanelGroupItemBoxBadgeClass({\n        className: props.className,\n        actionPanelProps,\n        actionPanelGroupProps,\n        actionPanelGroupItemProps,\n        actionPanelGroupItemBoxBadgeProps: props,\n      })}\n    >\n      <ActionPanelGroupItemBoxBadgeInternalProvider value={props}>\n        {props.children}\n      </ActionPanelGroupItemBoxBadgeInternalProvider>\n    </div>\n  );\n};\n\nexport type UActionPanelGroupItemBoxBadgeLabelProps = {\n  children: ReactNode;\n};\nexport const UActionPanelGroupItemBoxBadgeLabel = ({ children }: UActionPanelGroupItemBoxBadgeLabelProps) => {\n  const actionPanelProps = useActionPanelInternalProvider();\n  const actionPanelGroupProps = useActionPanelGroupInternalProvider();\n  const actionPanelGroupItemProps = useActionPanelGroupItemInternalProvider();\n  const actionPanelGroupItemBoxBadgeProps = useActionPanelGroupItemBoxBadgeInternalProvider();\n  return (\n    <span\n      className={actionPanelGroupItemBoxBadgeLabelClass({\n        actionPanelProps,\n        actionPanelGroupProps,\n        actionPanelGroupItemProps,\n        actionPanelGroupItemBoxBadgeProps,\n      })}\n    >\n      {children}\n    </span>\n  );\n};\n\nexport type UActionPanelGroupItemBoxBadgeIconProps = {\n  children: (className: string) => ReactNode;\n};\nexport const UActionPanelGroupItemBoxBadgeIcon = ({ children }: UActionPanelGroupItemBoxBadgeIconProps) => {\n  const actionPanelProps = useActionPanelInternalProvider();\n  const actionPanelGroupProps = useActionPanelGroupInternalProvider();\n  const actionPanelGroupItemProps = useActionPanelGroupItemInternalProvider();\n  const actionPanelGroupItemBoxBadgeProps = useActionPanelGroupItemBoxBadgeInternalProvider();\n  return (\n    <>\n      {children(\n        actionPanelGroupItemBoxBadgeIconClass({\n          actionPanelProps,\n          actionPanelGroupProps,\n          actionPanelGroupItemProps,\n          actionPanelGroupItemBoxBadgeProps,\n        }),\n      )}\n    </>\n  );\n};\n",
        "target": "underatom/components/radix/action-panel/ActionPanel.underatoms.tsx"
      },
      {
        "type": "registry:ui",
        "path": "ui/radix/action-panel/action-panel.tsx",
        "content": "import { tv } from \"../../../utils/extendedTV\";\nimport type { RenderRoot } from \"../../../utils/utils\";\n\n/*\n  ====================================\n  ActionPanel\n  ====================================\n*/\n\nexport type ActionPanelStyleProps = {\n  size?: \"sm\" | \"md\" | \"lg\";\n};\n\nexport type ActionPanelType = {\n  className?: string;\n  actionPanelProps?: ActionPanelStyleProps;\n};\n\nexport const actionPanelDefaults: Required<ActionPanelStyleProps> = {\n  size: \"md\",\n};\n\nexport const actionPanelClass = ({ className }: ActionPanelType) => {\n  return `group/actionPanel border-solid border-base-100 border-1 bg-background-50 shadow-md rounded-md min-w-[300px] ${className}`;\n};\n\nexport const ActionPanelLayout = ({\n  renderRoot,\n  styleProps: { className },\n  groupSlots,\n}: {\n  renderRoot: RenderRoot;\n  styleProps: ActionPanelType;\n  groupSlots: React.ReactNode;\n}) => renderRoot(<>{groupSlots}</>, `h-fit w-full flex flex-col gap-[10px] pb-2 ${className}`);\nexport type ActionPanelGroupStyleProps = {\n  togglable?: true | false;\n};\n\nexport type ActionPanelGroupType = {\n  className?: string;\n  actionPanelGroupProps?: ActionPanelGroupStyleProps;\n  actionPanelProps?: ActionPanelStyleProps;\n};\n\nexport const actionPanelGroupDefaults: Required<ActionPanelGroupStyleProps> = {\n  togglable: false,\n};\n\nexport const actionPanelGroupClass = ({ className }: ActionPanelGroupType) => {\n  return `group/actionPanelGroup  ${className}`;\n};\n\nexport const actionPanelGroupTitleClass = ({ className }: ActionPanelGroupType) => {\n  return `text-primary-500 text-sm font-text font-medium ${className}`;\n};\n\nexport const ActionPanelGroupLayout = ({\n  renderRoot,\n  styleProps: { className },\n  titleSlot,\n  itemSlots,\n}: {\n  renderRoot: RenderRoot;\n  styleProps: ActionPanelGroupType;\n  titleSlot: React.ReactNode;\n  itemSlots: React.ReactNode;\n}) =>\n  renderRoot(\n    <>\n      <div className=\"h-fit w-full flex flex-col pl-[6px]\">{titleSlot}</div>\n      <div className=\"h-fit w-full flex flex-col gap-[2px]\">{itemSlots}</div>\n    </>,\n    `h-fit w-full flex flex-col gap-[6px] pt-[6px] px-2 ${className}`,\n  );\n\nexport type ActionPanelGroupItemStyleProps = {\n  variant?: \"default\" | \"destructive\";\n};\n\nexport type ActionPanelGroupItemType = {\n  className?: string;\n  actionPanelGroupItemProps?: ActionPanelGroupItemStyleProps;\n  actionPanelProps?: ActionPanelStyleProps;\n  actionPanelGroupProps?: ActionPanelGroupStyleProps;\n};\n\nexport const actionPanelGroupItemDefaults: Required<ActionPanelGroupItemStyleProps> = {\n  variant: \"default\",\n};\n\nexport const actionPanelGroupItemClass = ({ className, actionPanelGroupItemProps }: ActionPanelGroupItemType) => {\n  const rootClass = tv({\n    base: \"group/actionPanelGroupItem bg-transparent data-[disabled]:bg-transparent rounded-sm cursor-pointer transition-all data-[disabled]:pointer-events-none\",\n    variants: {\n      groupItemVariant: {\n        default: \"hover:bg-base-100 data-[highlighted]:bg-base-100 active:bg-base-50 data-[state=open]:bg-base-50\",\n        destructive:\n          \"hover:bg-danger-500 data-[highlighted]:bg-danger-500 active:bg-danger-600 data-[state=open]:bg-danger-600\",\n      },\n    },\n\n    defaultVariants: { groupItemVariant: actionPanelGroupItemDefaults.variant },\n  });\n  return rootClass({\n    class: className,\n    groupItemVariant: actionPanelGroupItemProps?.variant,\n  });\n};\n\nexport const actionPanelGroupItemCheckIconClass = ({\n  className,\n  actionPanelGroupProps,\n  actionPanelGroupItemProps,\n}: ActionPanelGroupItemType) => {\n  const checkIconClass = tv({\n    base: \"w-[14px] h-[14px]\",\n    variants: {\n      groupTogglable: {\n        true: \"group-data-[disabled]/actionPanelGroupItem:group-data-[state=checked]/actionPanelGroupItem:text-base-400\",\n        false: \"\",\n      },\n      groupItemVariant: { default: \"\", destructive: \"\" },\n    },\n    compoundVariants: [\n      {\n        groupTogglable: [true],\n        groupItemVariant: [\"default\"],\n        class: \"group-data-[state=checked]/actionPanelGroupItem:text-base-800\",\n      },\n      {\n        groupTogglable: [true],\n        groupItemVariant: [\"destructive\"],\n        class: `\ngroup-data-[state=checked]/actionPanelGroupItem:text-danger-500\n  group-hover/actionPanelGroupItem:group-data-[state=checked]/actionPanelGroupItem:text-white\n  group-active/actionPanelGroupItem:group-data-[state=checked]/actionPanelGroupItem:text-white\n  group-data-[highlighted]/actionPanelGroupItem:group-data-[state=checked]/actionPanelGroupItem:text-white\n  group-data-[state=open]/actionPanelGroupItem:group-data-[state=checked]/actionPanelGroupItem:text-white\n`,\n      },\n    ],\n    defaultVariants: {\n      groupTogglable: actionPanelGroupDefaults.togglable,\n      groupItemVariant: actionPanelGroupItemDefaults.variant,\n    },\n  });\n  return checkIconClass({\n    class: className,\n\n    groupTogglable: actionPanelGroupProps?.togglable,\n    groupItemVariant: actionPanelGroupItemProps?.variant,\n  });\n};\n\nexport const actionPanelGroupItemCaretClass = ({ className, actionPanelGroupItemProps }: ActionPanelGroupItemType) => {\n  const caretClass = tv({\n    base: \"w-5 h-5 group-data-[disabled]/actionPanelGroupItem:text-base-400\",\n    variants: {\n      groupItemVariant: {\n        default: \"text-base-800\",\n        destructive:\n          \"text-danger-500 group-hover/actionPanelGroupItem:text-base-50 group-active/actionPanelGroupItem:text-base-50 group-data-[highlighted]/actionPanelGroupItem:text-base-50 group-data-[state=open]/actionPanelGroupItem:text-base-50\",\n      },\n    },\n\n    defaultVariants: { groupItemVariant: actionPanelGroupItemDefaults.variant },\n  });\n  return caretClass({\n    class: className,\n\n    groupItemVariant: actionPanelGroupItemProps?.variant,\n  });\n};\n\nexport const ActionPanelGroupItemWithCaretLayout = ({\n  renderRoot,\n  styleProps: { className, actionPanelGroupProps },\n  checkIconSlot,\n  boxSlot,\n  caretSlot,\n}: {\n  renderRoot: RenderRoot;\n  styleProps: ActionPanelGroupItemType;\n  checkIconSlot: React.ReactNode;\n  boxSlot: React.ReactNode;\n  caretSlot: React.ReactNode;\n}) =>\n  renderRoot(\n    <>\n      <div\n        className={tv({\n          base: \"h-fit w-full flex flex-row items-center\",\n          variants: { groupTogglable: { false: \"\", true: \"gap-[6px]\" } },\n\n          defaultVariants: { groupTogglable: actionPanelGroupDefaults.togglable },\n        })({ groupTogglable: actionPanelGroupProps?.togglable })}\n      >\n        <div\n          className={tv({\n            base: \"flex flex-row justify-center items-center\",\n            variants: { groupTogglable: { false: \"h-6 w-[0.00009999999747378752px]\", true: \"h-5 w-5 min-w-[16px]\" } },\n\n            defaultVariants: { groupTogglable: actionPanelGroupDefaults.togglable },\n          })({ groupTogglable: actionPanelGroupProps?.togglable })}\n        >\n          {checkIconSlot}\n        </div>\n        {boxSlot}\n      </div>\n      {caretSlot}\n    </>,\n    `h-fit w-full flex flex-row items-center gap-2 py-1 px-[6px] ${className}`,\n  );\n\nexport const ActionPanelGroupItemWithKBDLayout = ({\n  renderRoot,\n  styleProps: { className, actionPanelGroupProps },\n  checkIconSlot,\n  boxSlot,\n  kBDSlot,\n}: {\n  renderRoot: RenderRoot;\n  styleProps: ActionPanelGroupItemType;\n  checkIconSlot: React.ReactNode;\n  boxSlot: React.ReactNode;\n  kBDSlot: React.ReactNode;\n}) =>\n  renderRoot(\n    <>\n      <div\n        className={tv({\n          base: \"h-fit w-full flex flex-row items-center\",\n          variants: { groupTogglable: { false: \"\", true: \"gap-[6px]\" } },\n\n          defaultVariants: { groupTogglable: actionPanelGroupDefaults.togglable },\n        })({ groupTogglable: actionPanelGroupProps?.togglable })}\n      >\n        <div\n          className={tv({\n            base: \"flex flex-row justify-center items-center\",\n            variants: { groupTogglable: { false: \"h-6 w-[0.00009999999747378752px]\", true: \"h-5 w-5 min-w-[16px]\" } },\n\n            defaultVariants: { groupTogglable: actionPanelGroupDefaults.togglable },\n          })({ groupTogglable: actionPanelGroupProps?.togglable })}\n        >\n          {checkIconSlot}\n        </div>\n        {boxSlot}\n      </div>\n      {kBDSlot}\n    </>,\n    `h-fit w-full flex flex-row items-center gap-[6px] py-1 px-[6px] ${className}`,\n  );\nexport const ActionPanelGroupItemLayout = ({\n  renderRoot,\n  styleProps: { className, actionPanelGroupProps },\n  checkIconSlot,\n  boxSlot,\n}: {\n  renderRoot: RenderRoot;\n  styleProps: ActionPanelGroupItemType;\n  checkIconSlot: React.ReactNode;\n  boxSlot: React.ReactNode;\n}) =>\n  renderRoot(\n    <>\n      <div\n        className={tv({\n          base: \"h-fit w-full flex flex-row items-center\",\n          variants: { groupTogglable: { false: \"\", true: \"gap-[6px]\" } },\n\n          defaultVariants: { groupTogglable: actionPanelGroupDefaults.togglable },\n        })({ groupTogglable: actionPanelGroupProps?.togglable })}\n      >\n        <div\n          className={tv({\n            base: \"flex flex-row justify-center items-center\",\n            variants: { groupTogglable: { false: \"h-6 w-[0.00009999999747378752px]\", true: \"h-5 w-5 min-w-[16px]\" } },\n\n            defaultVariants: { groupTogglable: actionPanelGroupDefaults.togglable },\n          })({ groupTogglable: actionPanelGroupProps?.togglable })}\n        >\n          {checkIconSlot}\n        </div>\n        {boxSlot}\n      </div>\n    </>,\n    `h-fit w-full flex flex-row justify-between items-center gap-3 py-1 px-[6px] ${className}`,\n  );\nexport type ActionPanelGroupItemKBDType = {\n  className?: string;\n  actionPanelProps?: ActionPanelStyleProps;\n  actionPanelGroupProps?: ActionPanelGroupStyleProps;\n  actionPanelGroupItemProps?: ActionPanelGroupItemStyleProps;\n};\n\nexport const actionPanelGroupItemKBDClass = ({ className, actionPanelGroupItemProps }: ActionPanelGroupItemKBDType) => {\n  const rootClass = tv({\n    base: \"group/actionPanelGroupItemKBD border-solid border-1 rounded-sm group-data-[disabled]/actionPanelGroupItem:border-base-400\",\n    variants: {\n      groupItemVariant: {\n        default:\n          \"border-base-100 group-hover/actionPanelGroupItem:border-base-200 group-active/actionPanelGroupItem:border-base-200 group-data-[highlighted]/actionPanelGroupItem:border-base-200 group-data-[state=open]/actionPanelGroupItem:border-base-200\",\n        destructive: `\nborder-danger-300\n  group-hover/actionPanelGroupItem:border-danger-50\n  group-active/actionPanelGroupItem:border-danger-50\n  group-data-[highlighted]/actionPanelGroupItem:border-danger-50\n  group-data-[state=open]/actionPanelGroupItem:border-danger-50\n`,\n      },\n    },\n\n    defaultVariants: { groupItemVariant: actionPanelGroupItemDefaults.variant },\n  });\n  return rootClass({\n    class: className,\n    groupItemVariant: actionPanelGroupItemProps?.variant,\n  });\n};\n\nexport const actionPanelGroupItemKBDLabelClass = ({\n  className,\n  actionPanelGroupItemProps,\n}: ActionPanelGroupItemKBDType) => {\n  const labelClass = tv({\n    base: \"text-xs font-text font-medium select-none group-data-[disabled]/actionPanelGroupItem:text-base-400\",\n    variants: {\n      groupItemVariant: {\n        default: \"text-base-600\",\n        destructive:\n          \"text-danger-400 group-hover/actionPanelGroupItem:text-danger-50 group-active/actionPanelGroupItem:text-danger-50 group-data-[highlighted]/actionPanelGroupItem:text-danger-50 group-data-[state=open]/actionPanelGroupItem:text-danger-50\",\n      },\n    },\n\n    defaultVariants: { groupItemVariant: actionPanelGroupItemDefaults.variant },\n  });\n  return labelClass({\n    class: className,\n\n    groupItemVariant: actionPanelGroupItemProps?.variant,\n  });\n};\n\nexport const actionPanelGroupItemKBDIconClass = ({\n  className,\n  actionPanelGroupItemProps,\n}: ActionPanelGroupItemKBDType) => {\n  const iconClass = tv({\n    base: \"w-[14px] h-[14px]\",\n    variants: {\n      groupItemVariant: {\n        default:\n          \"group-data-[disabled]/actionPanelGroupItem:w-[14px] group-data-[disabled]/actionPanelGroupItem:h-[14px] text-base-600 group-data-[disabled]/actionPanelGroupItem:text-base-400\",\n        destructive:\n          \"text-danger-400 group-hover/actionPanelGroupItem:text-danger-50 group-active/actionPanelGroupItem:text-danger-50 group-data-[highlighted]/actionPanelGroupItem:text-danger-50 group-data-[state=open]/actionPanelGroupItem:text-danger-50\",\n      },\n    },\n\n    defaultVariants: { groupItemVariant: actionPanelGroupItemDefaults.variant },\n  });\n  return iconClass({\n    class: className,\n\n    groupItemVariant: actionPanelGroupItemProps?.variant,\n  });\n};\n\nexport const ActionPanelGroupItemKBDLayout = ({\n  renderRoot,\n  styleProps: { className },\n  labelSlot,\n}: {\n  renderRoot: RenderRoot;\n  styleProps: ActionPanelGroupItemKBDType;\n  labelSlot: React.ReactNode;\n}) => renderRoot(<>{labelSlot}</>, `h-6 w-fit flex flex-row justify-center items-center gap-1 px-1 ${className}`);\n\nexport const ActionPanelGroupItemKBDWithIconLayout = ({\n  renderRoot,\n  styleProps: { className },\n  labelSlot,\n  iconSlot,\n}: {\n  renderRoot: RenderRoot;\n  styleProps: ActionPanelGroupItemKBDType;\n  labelSlot: React.ReactNode;\n  iconSlot: React.ReactNode;\n}) =>\n  renderRoot(\n    <>\n      {labelSlot}\n      {iconSlot}\n    </>,\n    `h-6 w-fit flex flex-row justify-center items-center gap-1 px-1 ${className}`,\n  );\nexport type ActionPanelGroupItemBoxType = {\n  className?: string;\n  actionPanelProps?: ActionPanelStyleProps;\n  actionPanelGroupProps?: ActionPanelGroupStyleProps;\n  actionPanelGroupItemProps?: ActionPanelGroupItemStyleProps;\n};\n\nexport const actionPanelGroupItemBoxClass = ({ className }: ActionPanelGroupItemBoxType) => {\n  return `group/actionPanelGroupItemBox  ${className}`;\n};\n\nexport const actionPanelGroupItemBoxIconClass = ({\n  className,\n  actionPanelGroupItemProps,\n}: ActionPanelGroupItemBoxType) => {\n  const iconClass = tv({\n    base: \"w-5 h-5 group-data-[disabled]/actionPanelGroupItem:text-base-400\",\n    variants: {\n      groupItemVariant: {\n        default: \"text-base-600\",\n        destructive:\n          \"text-danger-500 group-hover/actionPanelGroupItem:text-base-50 group-active/actionPanelGroupItem:text-base-50 group-data-[highlighted]/actionPanelGroupItem:text-base-50 group-data-[state=open]/actionPanelGroupItem:text-base-50\",\n      },\n    },\n\n    defaultVariants: { groupItemVariant: actionPanelGroupItemDefaults.variant },\n  });\n  return iconClass({\n    class: className,\n\n    groupItemVariant: actionPanelGroupItemProps?.variant,\n  });\n};\n\nexport const actionPanelGroupItemBoxLabelClass = ({\n  className,\n  actionPanelGroupItemProps,\n}: ActionPanelGroupItemBoxType) => {\n  const labelClass = tv({\n    base: \"text-sm font-text font-medium select-none group-data-[disabled]/actionPanelGroupItem:text-base-400\",\n    variants: {\n      groupItemVariant: {\n        default: \"text-base-950\",\n        destructive: `\ntext-danger-600\n  group-hover/actionPanelGroupItem:text-background-50\n  group-active/actionPanelGroupItem:text-background-50\n  group-data-[highlighted]/actionPanelGroupItem:text-background-50\n  group-data-[state=open]/actionPanelGroupItem:text-background-50\n`,\n      },\n    },\n\n    defaultVariants: { groupItemVariant: actionPanelGroupItemDefaults.variant },\n  });\n  return labelClass({\n    class: className,\n\n    groupItemVariant: actionPanelGroupItemProps?.variant,\n  });\n};\n\nexport const actionPanelGroupItemBoxDescriptionClass = ({\n  className,\n  actionPanelGroupItemProps,\n}: ActionPanelGroupItemBoxType) => {\n  const descriptionClass = tv({\n    base: \"text-base-700 text-sm font-text font-medium select-none group-data-[disabled]/actionPanelGroupItem:text-base-400\",\n    variants: {\n      groupItemVariant: {\n        default: \"\",\n        destructive:\n          \"group-hover/actionPanelGroupItem:text-base-50 group-active/actionPanelGroupItem:text-base-50 group-data-[highlighted]/actionPanelGroupItem:text-base-50 group-data-[state=open]/actionPanelGroupItem:text-base-50\",\n      },\n    },\n\n    defaultVariants: { groupItemVariant: actionPanelGroupItemDefaults.variant },\n  });\n  return descriptionClass({\n    class: className,\n\n    groupItemVariant: actionPanelGroupItemProps?.variant,\n  });\n};\n\nexport const actionPanelGroupItemBoxSupportingClass = ({\n  className,\n  actionPanelGroupItemProps,\n}: ActionPanelGroupItemBoxType) => {\n  const supportingClass = tv({\n    base: \"text-base-500 text-xs font-text font-medium select-none group-data-[disabled]/actionPanelGroupItem:text-base-400\",\n    variants: {\n      groupItemVariant: {\n        default: \"\",\n        destructive:\n          \"group-hover/actionPanelGroupItem:text-base-50 group-active/actionPanelGroupItem:text-base-50 group-data-[highlighted]/actionPanelGroupItem:text-base-50 group-data-[state=open]/actionPanelGroupItem:text-base-50\",\n      },\n    },\n\n    defaultVariants: { groupItemVariant: actionPanelGroupItemDefaults.variant },\n  });\n  return supportingClass({\n    class: className,\n\n    groupItemVariant: actionPanelGroupItemProps?.variant,\n  });\n};\n\nexport const ActionPanelGroupItemBoxLayout = ({\n  renderRoot,\n  styleProps: { className },\n  iconSlot,\n  labelSlot,\n  badgeSlot,\n  switchSlot,\n}: {\n  renderRoot: RenderRoot;\n  styleProps: ActionPanelGroupItemBoxType;\n  iconSlot: React.ReactNode;\n  labelSlot: React.ReactNode;\n  badgeSlot: React.ReactNode;\n  switchSlot: React.ReactNode;\n}) =>\n  renderRoot(\n    <>\n      <div className=\"h-fit w-full flex flex-row items-center gap-[6px]\">\n        {iconSlot}\n        {labelSlot}\n      </div>\n      <div className=\"h-fit w-fit flex flex-row justify-end items-center gap-[6px]\">\n        {badgeSlot}\n        {switchSlot}\n      </div>\n    </>,\n    `h-7 w-full flex flex-row items-center gap-5 ${className}`,\n  );\nexport const ActionPanelGroupItemBoxWithAvatarLayout = ({\n  renderRoot,\n  styleProps: { className },\n  avatarSlot,\n  labelSlot,\n  badgeSlot,\n  switchSlot,\n}: {\n  renderRoot: RenderRoot;\n  styleProps: ActionPanelGroupItemBoxType;\n  avatarSlot: React.ReactNode;\n  labelSlot: React.ReactNode;\n  badgeSlot: React.ReactNode;\n  switchSlot: React.ReactNode;\n}) =>\n  renderRoot(\n    <>\n      <div className=\"h-fit w-full flex flex-row items-center gap-[6px]\">\n        {avatarSlot}\n        {labelSlot}\n      </div>\n      <div className=\"h-fit w-fit flex flex-row justify-end items-center gap-[6px]\">\n        {badgeSlot}\n        {switchSlot}\n      </div>\n    </>,\n    `h-7 w-full flex flex-row items-center gap-5 ${className}`,\n  );\nexport const ActionPanelGroupItemBoxWithDescriptionLayout = ({\n  renderRoot,\n  styleProps: { className },\n  iconBoxSlot,\n  labelSlot,\n  supportingSlot,\n  descriptionSlot,\n  badgeSlot,\n  switchSlot,\n}: {\n  renderRoot: RenderRoot;\n  styleProps: ActionPanelGroupItemBoxType;\n  iconBoxSlot: React.ReactNode;\n  labelSlot: React.ReactNode;\n  supportingSlot: React.ReactNode;\n  descriptionSlot: React.ReactNode;\n  badgeSlot: React.ReactNode;\n  switchSlot: React.ReactNode;\n}) =>\n  renderRoot(\n    <>\n      <div className=\"h-fit w-full flex flex-row items-center gap-2\">\n        {iconBoxSlot}\n        <div className=\"h-fit w-full flex flex-col justify-center [&>*:not(:first-child)]:[margin-top:-4px]\">\n          <div className=\"h-fit w-full flex flex-row items-end gap-1\">\n            {labelSlot}\n            {supportingSlot}\n          </div>\n          {descriptionSlot}\n        </div>\n      </div>\n      <div className=\"h-fit w-fit flex flex-row justify-end items-center gap-[6px]\">\n        {badgeSlot}\n        {switchSlot}\n      </div>\n    </>,\n    `h-12 w-full flex flex-row items-center gap-5 ${className}`,\n  );\nexport const ActionPanelGroupItemBoxWithAvatarAndDescriptionLayout = ({\n  renderRoot,\n  styleProps: { className },\n  avatarSlot,\n  labelSlot,\n  supportingSlot,\n  descriptionSlot,\n  badgeSlot,\n  switchSlot,\n}: {\n  renderRoot: RenderRoot;\n  styleProps: ActionPanelGroupItemBoxType;\n  avatarSlot: React.ReactNode;\n  labelSlot: React.ReactNode;\n  supportingSlot: React.ReactNode;\n  descriptionSlot: React.ReactNode;\n  badgeSlot: React.ReactNode;\n  switchSlot: React.ReactNode;\n}) =>\n  renderRoot(\n    <>\n      <div className=\"h-fit w-full flex flex-row items-center gap-2\">\n        {avatarSlot}\n        <div className=\"h-fit w-full flex flex-col justify-center [&>*:not(:first-child)]:[margin-top:-4px]\">\n          <div className=\"h-fit w-full flex flex-row items-end gap-1\">\n            {labelSlot}\n            {supportingSlot}\n          </div>\n          {descriptionSlot}\n        </div>\n      </div>\n      <div className=\"h-fit w-fit flex flex-row justify-end items-center gap-[6px]\">\n        {badgeSlot}\n        {switchSlot}\n      </div>\n    </>,\n    `h-12 w-full flex flex-row items-center gap-5 ${className}`,\n  );\n\nexport type ActionPanelGroupItemBoxBadgeStyleProps = {\n  color?: \"primary\" | \"base\" | \"red\" | \"green\";\n};\n\nexport type ActionPanelGroupItemBoxBadgeType = {\n  className?: string;\n  actionPanelGroupItemBoxBadgeProps?: ActionPanelGroupItemBoxBadgeStyleProps;\n  actionPanelProps?: ActionPanelStyleProps;\n  actionPanelGroupProps?: ActionPanelGroupStyleProps;\n  actionPanelGroupItemProps?: ActionPanelGroupItemStyleProps;\n};\n\nexport const actionPanelGroupItemBoxBadgeDefaults: Required<ActionPanelGroupItemBoxBadgeStyleProps> = {\n  color: \"primary\",\n};\n\nexport const actionPanelGroupItemBoxBadgeClass = ({\n  className,\n  actionPanelGroupItemProps,\n  actionPanelGroupItemBoxBadgeProps,\n}: ActionPanelGroupItemBoxBadgeType) => {\n  const rootClass = tv({\n    base: \"group/actionPanelGroupItemBoxBadge rounded-[999px]\",\n    variants: {\n      groupItemVariant: {\n        default: \"\",\n        destructive:\n          \"transition-all group-hover/actionPanelGroupItem:bg-white group-active/actionPanelGroupItem:bg-white group-data-[highlighted]/actionPanelGroupItem:bg-white group-data-[state=open]/actionPanelGroupItem:bg-white\",\n      },\n      groupItemBoxBadgeColor: {\n        primary: \"bg-base-950 group-data-[disabled]/actionPanelGroupItem:bg-base-200\",\n        base: \"group-data-[disabled]/actionPanelGroupItem:bg-base-200 bg-primary-950\",\n        red: \"bg-danger-500\",\n        green: \"bg-success-600\",\n      },\n    },\n\n    defaultVariants: {\n      groupItemVariant: actionPanelGroupItemDefaults.variant,\n      groupItemBoxBadgeColor: actionPanelGroupItemBoxBadgeDefaults.color,\n    },\n  });\n  return rootClass({\n    class: className,\n    groupItemVariant: actionPanelGroupItemProps?.variant,\n    groupItemBoxBadgeColor: actionPanelGroupItemBoxBadgeProps?.color,\n  });\n};\n\nexport const actionPanelGroupItemBoxBadgeLabelClass = ({\n  className,\n  actionPanelGroupItemProps,\n}: ActionPanelGroupItemBoxBadgeType) => {\n  const labelClass = tv({\n    base: \"text-white text-xs font-text font-medium select-none text-nowrap group-data-[disabled]/actionPanelGroupItem:text-base-400\",\n    variants: {\n      groupItemVariant: {\n        default: \"\",\n        destructive:\n          \"group-hover/actionPanelGroupItem:text-base-950 group-active/actionPanelGroupItem:text-base-950 group-data-[highlighted]/actionPanelGroupItem:text-base-950 group-data-[state=open]/actionPanelGroupItem:text-base-950\",\n      },\n    },\n\n    defaultVariants: { groupItemVariant: actionPanelGroupItemDefaults.variant },\n  });\n  return labelClass({\n    class: className,\n\n    groupItemVariant: actionPanelGroupItemProps?.variant,\n  });\n};\n\nexport const actionPanelGroupItemBoxBadgeIconClass = ({\n  className,\n  actionPanelGroupItemProps,\n}: ActionPanelGroupItemBoxBadgeType) => {\n  const iconClass = tv({\n    base: \"w-3 h-3 text-white group-data-[disabled]/actionPanelGroupItem:text-base-400\",\n    variants: {\n      groupItemVariant: {\n        default: \"\",\n        destructive:\n          \"group-hover/actionPanelGroupItem:text-base-950 group-active/actionPanelGroupItem:text-base-950 group-data-[highlighted]/actionPanelGroupItem:text-base-950 group-data-[state=open]/actionPanelGroupItem:text-base-950\",\n      },\n    },\n\n    defaultVariants: { groupItemVariant: actionPanelGroupItemDefaults.variant },\n  });\n  return iconClass({\n    class: className,\n\n    groupItemVariant: actionPanelGroupItemProps?.variant,\n  });\n};\n\nexport const ActionPanelGroupItemBoxBadgeLayout = ({\n  renderRoot,\n  styleProps: { className },\n  labelSlot,\n}: {\n  renderRoot: RenderRoot;\n  styleProps: ActionPanelGroupItemBoxBadgeType;\n  labelSlot: React.ReactNode;\n}) => renderRoot(<>{labelSlot}</>, `h-[22px] w-fit flex flex-row justify-center items-center px-[10px] ${className}`);\nexport const ActionPanelGroupItemBoxBadgeWithIconLayout = ({\n  renderRoot,\n  styleProps: { className },\n  iconSlot,\n  labelSlot,\n}: {\n  renderRoot: RenderRoot;\n  styleProps: ActionPanelGroupItemBoxBadgeType;\n  iconSlot: React.ReactNode;\n  labelSlot: React.ReactNode;\n}) =>\n  renderRoot(\n    <>\n      {iconSlot}\n      {labelSlot}\n    </>,\n    `h-[22px] w-fit flex flex-row justify-center items-center gap-1 pl-1 pr-2 ${className}`,\n  );\n\nexport type ActionPanelGroupItemBoxSwitchType = {\n  className?: string;\n  actionPanelProps?: ActionPanelStyleProps;\n  actionPanelGroupProps?: ActionPanelGroupStyleProps;\n  actionPanelGroupItemProps?: ActionPanelGroupItemStyleProps;\n};\n\nexport const actionPanelGroupItemBoxSwitchClass = ({\n  className,\n  actionPanelGroupItemProps,\n}: ActionPanelGroupItemBoxSwitchType) => {\n  const rootClass = tv({\n    base: \"group/actionPanelGroupItemBoxSwitch group-data-[disabled]/actionPanelGroupItem:group-data-[state=checked]/actionPanelGroupItem:bg-base-200 group-data-[disabled]/actionPanelGroupItem:pointer-events-none\",\n    variants: {\n      groupItemVariant: {\n        default: `\nbg-base-200\n  group-active/actionPanelGroupItem:bg-base-200\n  group-data-[disabled]/actionPanelGroupItem:bg-base-200\n  rounded-[50px]\n  group-data-[state=checked]/actionPanelGroupItem:rounded-[50px]\n  transition-all\n  group-data-[state=checked]/actionPanelGroupItem:transition-all\n  group-hover/actionPanelGroupItem:bg-base-300\n  group-data-[highlighted]/actionPanelGroupItem:bg-base-300\n  group-data-[state=open]/actionPanelGroupItem:bg-base-300\n  group-data-[state=checked]/actionPanelGroupItem:bg-primary-950\n  group-hover/actionPanelGroupItem:group-data-[state=checked]/actionPanelGroupItem:bg-primary-950\n  group-active/actionPanelGroupItem:group-data-[state=checked]/actionPanelGroupItem:bg-primary-950\n  group-data-[highlighted]/actionPanelGroupItem:group-data-[state=checked]/actionPanelGroupItem:bg-primary-950\n`,\n        destructive: `\nbg-danger-100\n  rounded-[50px]\n  transition-all\n  group-data-[disabled]/actionPanelGroupItem:bg-base-200\n  group-data-[state=checked]/actionPanelGroupItem:bg-danger-500\n  group-hover/actionPanelGroupItem:group-data-[state=checked]/actionPanelGroupItem:bg-base-50\n  group-data-[highlighted]/actionPanelGroupItem:group-data-[state=checked]/actionPanelGroupItem:bg-base-50\n  group-active/actionPanelGroupItem:group-data-[state=checked]/actionPanelGroupItem:bg-base-50\n  group-data-[state=open]/actionPanelGroupItem:group-data-[state=checked]/actionPanelGroupItem:bg-base-50\n`,\n      },\n    },\n\n    defaultVariants: { groupItemVariant: actionPanelGroupItemDefaults.variant },\n  });\n  return rootClass({\n    class: className,\n    groupItemVariant: actionPanelGroupItemProps?.variant,\n  });\n};\n\nexport const actionPanelGroupItemBoxSwitchHandleClass = ({\n  className,\n  actionPanelGroupItemProps,\n}: ActionPanelGroupItemBoxSwitchType) => {\n  const handleClass = tv({\n    base: \"group-data-[disabled]/actionPanelGroupItem:bg-base-300 group-data-[state=checked]/actionPanelGroupItem:bg-base-50 group-data-[disabled]/actionPanelGroupItem:group-data-[state=checked]/actionPanelGroupItem:bg-base-300\",\n    variants: {\n      groupItemVariant: {\n        default: `\nw-6\n  group-data-[state=checked]/actionPanelGroupItem:w-6\n  h-6\n  group-data-[state=checked]/actionPanelGroupItem:h-6\n  bg-primary-950\n  rounded-[50px]\n  group-data-[state=checked]/actionPanelGroupItem:rounded-[50px]\n  transition-all\n  group-data-[state=checked]/actionPanelGroupItem:transition-all\n`,\n        destructive: `\nw-6\n  h-6\n  rounded-[50px]\n  bg-danger-500\n  group-hover/actionPanelGroupItem:group-data-[state=checked]/actionPanelGroupItem:bg-danger-500\n  group-data-[highlighted]/actionPanelGroupItem:group-data-[state=checked]/actionPanelGroupItem:bg-danger-500\n  group-active/actionPanelGroupItem:group-data-[state=checked]/actionPanelGroupItem:bg-danger-500\n  group-data-[state=open]/actionPanelGroupItem:group-data-[state=checked]/actionPanelGroupItem:bg-danger-500\n  transition-all\n`,\n      },\n    },\n\n    defaultVariants: { groupItemVariant: actionPanelGroupItemDefaults.variant },\n  });\n  return handleClass({\n    class: className,\n\n    groupItemVariant: actionPanelGroupItemProps?.variant,\n  });\n};\n\nexport const ActionPanelGroupItemBoxSwitchLayout = ({\n  renderRoot,\n  styleProps: { className },\n  handleSlot,\n}: {\n  renderRoot: RenderRoot;\n  styleProps: ActionPanelGroupItemBoxSwitchType;\n  handleSlot: React.ReactNode;\n}) =>\n  renderRoot(\n    <>{handleSlot}</>,\n    `h-7 w-12 flex flex-row items-center px-[2px] group-data-[state=checked]/actionPanelGroupItem:pl-[22px] group-data-[state=checked]/actionPanelGroupItem:pr-[2px] ${className}`,\n  );\n\nexport type ActionPanelGroupItemBoxAvatarStyleProps = {\n  multiline?: true | false;\n};\n\nexport type ActionPanelGroupItemBoxAvatarType = {\n  className?: string;\n  actionPanelGroupItemBoxAvatarProps?: ActionPanelGroupItemBoxAvatarStyleProps;\n  actionPanelProps?: ActionPanelStyleProps;\n  actionPanelGroupProps?: ActionPanelGroupStyleProps;\n  actionPanelGroupItemProps?: ActionPanelGroupItemStyleProps;\n};\n\nexport const actionPanelGroupItemBoxAvatarDefaults: Required<ActionPanelGroupItemBoxAvatarStyleProps> = {\n  multiline: false,\n};\n\nexport const actionPanelGroupItemBoxAvatarClass = ({\n  className,\n  actionPanelGroupItemProps,\n}: ActionPanelGroupItemBoxAvatarType) => {\n  const rootClass = tv({\n    base: \"group/actionPanelGroupItemBoxAvatar rounded-[999px]\",\n    variants: {\n      groupItemVariant: {\n        default:\n          \"bg-base-100 group-active/actionPanelGroupItem:bg-base-100 group-data-[highlighted]/actionPanelGroupItem:bg-base-100 group-hover/actionPanelGroupItem:bg-base-50 group-data-[disabled]/actionPanelGroupItem:bg-base-50\",\n        destructive:\n          \"bg-danger-100 group-active/actionPanelGroupItem:bg-danger-100 group-data-[highlighted]/actionPanelGroupItem:bg-danger-100 group-hover/actionPanelGroupItem:bg-danger-50\",\n      },\n    },\n\n    defaultVariants: { groupItemVariant: actionPanelGroupItemDefaults.variant },\n  });\n  return rootClass({\n    class: className,\n    groupItemVariant: actionPanelGroupItemProps?.variant,\n  });\n};\n\nexport const actionPanelGroupItemBoxAvatarImageClass = ({\n  className,\n  actionPanelGroupItemBoxAvatarProps,\n}: ActionPanelGroupItemBoxAvatarType) => {\n  const imageClass = tv({\n    base: \"rounded-[50px] group-data-[disabled]/actionPanelGroupItem:opacity-[0.42]\",\n    variants: { groupItemBoxAvatarMultiline: { true: \"w-10 h-10\", false: \"w-7 h-7\" } },\n\n    defaultVariants: { groupItemBoxAvatarMultiline: actionPanelGroupItemBoxAvatarDefaults.multiline },\n  });\n  return imageClass({\n    class: className,\n\n    groupItemBoxAvatarMultiline: actionPanelGroupItemBoxAvatarProps?.multiline,\n  });\n};\n\nexport const actionPanelGroupItemBoxAvatarLabelClass = ({\n  className,\n  actionPanelGroupItemProps,\n  actionPanelGroupItemBoxAvatarProps,\n}: ActionPanelGroupItemBoxAvatarType) => {\n  const labelClass = tv({\n    base: \"text-base-600 font-text font-medium select-none group-data-[disabled]/actionPanelGroupItem:text-base-400\",\n    variants: {\n      groupItemVariant: { default: \"\", destructive: \"text-danger-500\" },\n      groupItemBoxAvatarMultiline: { true: \"text-xs\", false: \"text-sm\" },\n    },\n\n    defaultVariants: {\n      groupItemVariant: actionPanelGroupItemDefaults.variant,\n      groupItemBoxAvatarMultiline: actionPanelGroupItemBoxAvatarDefaults.multiline,\n    },\n  });\n  return labelClass({\n    class: className,\n\n    groupItemVariant: actionPanelGroupItemProps?.variant,\n    groupItemBoxAvatarMultiline: actionPanelGroupItemBoxAvatarProps?.multiline,\n  });\n};\n\nexport const actionPanelGroupItemBoxAvatarIconClass = ({\n  className,\n  actionPanelGroupItemProps,\n  actionPanelGroupItemBoxAvatarProps,\n}: ActionPanelGroupItemBoxAvatarType) => {\n  const iconClass = tv({\n    base: \"group-data-[disabled]/actionPanelGroupItem:text-base-400\",\n    variants: {\n      groupItemVariant: { default: \"text-base-600\", destructive: \"text-danger-600\" },\n      groupItemBoxAvatarMultiline: { false: \"w-3 h-3\", true: \"w-6 h-6\" },\n    },\n\n    defaultVariants: {\n      groupItemVariant: actionPanelGroupItemDefaults.variant,\n      groupItemBoxAvatarMultiline: actionPanelGroupItemBoxAvatarDefaults.multiline,\n    },\n  });\n  return iconClass({\n    class: className,\n\n    groupItemVariant: actionPanelGroupItemProps?.variant,\n    groupItemBoxAvatarMultiline: actionPanelGroupItemBoxAvatarProps?.multiline,\n  });\n};\n\nexport const ActionPanelGroupItemBoxAvatarLayout = ({\n  renderRoot,\n  styleProps: { className, actionPanelGroupItemBoxAvatarProps },\n  imageSlot,\n  labelSlot,\n}: {\n  renderRoot: RenderRoot;\n  styleProps: ActionPanelGroupItemBoxAvatarType;\n  imageSlot: React.ReactNode;\n  labelSlot: React.ReactNode;\n}) =>\n  renderRoot(\n    <>\n      {imageSlot}\n      {labelSlot}\n    </>,\n    tv({\n      base: \"flex flex-row justify-center items-center\",\n      variants: { groupItemBoxAvatarMultiline: { true: \"h-10 w-10 min-w-[36px]\", false: \"h-7 w-7\" } },\n\n      defaultVariants: { groupItemBoxAvatarMultiline: actionPanelGroupItemBoxAvatarDefaults.multiline },\n    })({\n      class: className,\n      groupItemBoxAvatarMultiline: actionPanelGroupItemBoxAvatarProps?.multiline,\n    }),\n  );\nexport const ActionPanelGroupItemBoxAvatarWithIconLayout = ({\n  renderRoot,\n  styleProps: { className, actionPanelGroupItemBoxAvatarProps },\n  imageSlot,\n  iconSlot,\n}: {\n  renderRoot: RenderRoot;\n  styleProps: ActionPanelGroupItemBoxAvatarType;\n  imageSlot: React.ReactNode;\n  iconSlot: React.ReactNode;\n}) =>\n  renderRoot(\n    <>\n      {imageSlot}\n      {iconSlot}\n    </>,\n    tv({\n      base: \"flex flex-row justify-center items-center\",\n      variants: { groupItemBoxAvatarMultiline: { true: \"h-10 w-10 min-w-[36px]\", false: \"h-7 w-7\" } },\n\n      defaultVariants: { groupItemBoxAvatarMultiline: actionPanelGroupItemBoxAvatarDefaults.multiline },\n    })({\n      class: className,\n      groupItemBoxAvatarMultiline: actionPanelGroupItemBoxAvatarProps?.multiline,\n    }),\n  );\n\nexport type ActionPanelGroupItemBoxIconBoxType = {\n  className?: string;\n  actionPanelProps?: ActionPanelStyleProps;\n  actionPanelGroupProps?: ActionPanelGroupStyleProps;\n  actionPanelGroupItemProps?: ActionPanelGroupItemStyleProps;\n};\n\nexport const actionPanelGroupItemBoxIconBoxClass = ({\n  className,\n  actionPanelGroupItemProps,\n}: ActionPanelGroupItemBoxIconBoxType) => {\n  const rootClass = tv({\n    base: \"group/actionPanelGroupItemBoxIconBox group-data-[disabled]/actionPanelGroupItem:bg-base-100 rounded-sm transition-all\",\n    variants: {\n      groupItemVariant: {\n        default:\n          \"bg-base-100 group-hover/actionPanelGroupItem:bg-base-50 group-data-[highlighted]/actionPanelGroupItem:bg-base-50 group-active/actionPanelGroupItem:bg-base-50 group-data-[state=open]/actionPanelGroupItem:bg-base-50\",\n        destructive:\n          \"bg-danger-100 group-hover/actionPanelGroupItem:bg-danger-50 group-data-[highlighted]/actionPanelGroupItem:bg-danger-50 group-active/actionPanelGroupItem:bg-danger-50 group-data-[state=open]/actionPanelGroupItem:bg-danger-50\",\n      },\n    },\n\n    defaultVariants: { groupItemVariant: actionPanelGroupItemDefaults.variant },\n  });\n  return rootClass({\n    class: className,\n    groupItemVariant: actionPanelGroupItemProps?.variant,\n  });\n};\n\nexport const actionPanelGroupItemBoxIconBoxIconClass = ({\n  className,\n  actionPanelGroupItemProps,\n}: ActionPanelGroupItemBoxIconBoxType) => {\n  const iconClass = tv({\n    base: \"w-5 h-5 group-data-[disabled]/actionPanelGroupItem:text-base-400\",\n    variants: {\n      groupItemVariant: {\n        default: \"text-base-600\",\n        destructive:\n          \"w-5 group-data-[disabled]/actionPanelGroupItem:w-5 h-5 group-data-[disabled]/actionPanelGroupItem:h-5 text-danger-600 text-danger-600\",\n      },\n    },\n\n    defaultVariants: { groupItemVariant: actionPanelGroupItemDefaults.variant },\n  });\n  return iconClass({\n    class: className,\n\n    groupItemVariant: actionPanelGroupItemProps?.variant,\n  });\n};\n\nexport const ActionPanelGroupItemBoxIconBoxLayout = ({\n  renderRoot,\n  styleProps: { className },\n  iconSlot,\n}: {\n  renderRoot: RenderRoot;\n  styleProps: ActionPanelGroupItemBoxIconBoxType;\n  iconSlot: React.ReactNode;\n}) => renderRoot(<>{iconSlot}</>, `h-10 w-10 flex flex-row justify-center items-center min-w-[36px] ${className}`);\n\n",
        "target": "underatom/components/radix/action-panel/action-panel.tsx"
      }
    ]
  },
  {
    "name": "avatar",
    "type": "registry:ui",
    "relativePath": "radix/avatar",
    "stylingName": "avatar.tsx",
    "dependencies": [
      "@radix-ui/react-avatar",
      "react-aria"
    ],
    "files": [
      {
        "type": "registry:ui",
        "path": "ui/radix/avatar/Avatar.atoms.tsx",
        "content": "import { ReactNode } from \"react\";\nimport {\n  AvatarActionLayout,\n  AvatarBadgeLayout,\n  AvatarContentLayout,\n  AvatarIndicatorLayout,\n  AvatarIndicatorWithIconLayout,\n  AvatarLayout,\n  AvatarNotificationLayout,\n  AvatarStatusLayout,\n} from \"./avatar\";\nimport {\n  UAvatarActionIcon,\n  UAvatarActionRoot,\n  UAvatarActionRootProps,\n  UAvatarBadgeLabel,\n  UAvatarBadgeRoot,\n  UAvatarBadgeRootProps,\n  UAvatarContentFallback,\n  UAvatarContentIcon,\n  UAvatarContentImage,\n  UAvatarContentLabel,\n  UAvatarContentRoot,\n  UAvatarContentRootProps,\n  UAvatarIndicatorFallback,\n  UAvatarIndicatorIcon,\n  UAvatarIndicatorImage,\n  UAvatarIndicatorRoot,\n  UAvatarIndicatorRootProps,\n  UAvatarNotificationCounter,\n  UAvatarNotificationRoot,\n  UAvatarNotificationRootProps,\n  UAvatarRoot,\n  UAvatarRootProps,\n  UAvatarStatusIcon,\n  UAvatarStatusRoot,\n  UAvatarStatusRootProps,\n  useAvatarInternalProvider,\n} from \"./Avatar.underatoms\";\nimport { AvatarImageProps } from \"@radix-ui/react-avatar\";\n\n/*\n  ====================================\n  Avatar\n  ====================================\n*/\n\nexport type AvatarProps = Omit<UAvatarRootProps, \"children\"> & {\n  contentSlot: React.ReactNode;\n  actionSlot?: React.ReactNode;\n  notificationSlot?: React.ReactNode;\n  badgeSlot?: React.ReactNode;\n  indicatorSlot?: React.ReactNode;\n  statusSlot?: React.ReactNode;\n};\nexport const Avatar = ({\n  contentSlot,\n  actionSlot,\n  notificationSlot,\n  badgeSlot,\n  indicatorSlot,\n  statusSlot,\n  ...props\n}: AvatarProps) => {\n  return (\n    <AvatarLayout\n      renderRoot={(children, className) => {\n        return (\n          <UAvatarRoot {...props} className={className}>\n            {children}\n          </UAvatarRoot>\n        );\n      }}\n      styleProps={{ className: props.className, avatarProps: props }}\n      contentSlot={contentSlot}\n      actionSlot={actionSlot}\n      notificationSlot={notificationSlot}\n      badgeSlot={badgeSlot}\n      indicatorSlot={indicatorSlot}\n      statusSlot={statusSlot}\n    />\n  );\n};\n\n/*\n  ====================================\n  AvatarNotification\n  ====================================\n*/\n\nexport type AvatarNotificationProps = Omit<UAvatarNotificationRootProps, \"children\"> & {\n  counterText: string;\n};\nexport const AvatarNotification = ({ counterText, ...props }: AvatarNotificationProps) => {\n  const avatarProps = useAvatarInternalProvider();\n  return (\n    <AvatarNotificationLayout\n      renderRoot={(children, className) => (\n        <UAvatarNotificationRoot {...props} className={className}>\n          {children}\n        </UAvatarNotificationRoot>\n      )}\n      styleProps={{ className: props.className, avatarProps, avatarNotificationProps: props }}\n      counterSlot={<UAvatarNotificationCounter>{counterText}</UAvatarNotificationCounter>}\n    />\n  );\n};\n\n/*\n  ====================================\n  AvatarIndicator\n  ====================================\n*/\n\nexport type AvatarIndicatorProps = Omit<UAvatarIndicatorRootProps, \"children\"> & {\n  imageProps: AvatarImageProps;\n};\nexport const AvatarIndicator = ({ imageProps, ...props }: AvatarIndicatorProps) => {\n  const avatarProps = useAvatarInternalProvider();\n  return (\n    <AvatarIndicatorLayout\n      renderRoot={(children, className) => (\n        <UAvatarIndicatorRoot {...props} className={className}>\n          {children}\n        </UAvatarIndicatorRoot>\n      )}\n      styleProps={{ className: props.className, avatarProps }}\n      imageSlot={<UAvatarIndicatorImage {...imageProps} />}\n    />\n  );\n};\n\nexport type AvatarIndicatorWithIconProps = Omit<UAvatarIndicatorRootProps, \"children\"> & {\n  icon: (className: string) => ReactNode;\n};\nexport const AvatarIndicatorWithIcon = ({ icon, ...props }: AvatarIndicatorWithIconProps) => {\n  const avatarProps = useAvatarInternalProvider();\n  return (\n    <AvatarIndicatorWithIconLayout\n      renderRoot={(children, className) => (\n        <UAvatarIndicatorRoot {...props} className={className}>\n          {children}\n        </UAvatarIndicatorRoot>\n      )}\n      styleProps={{ className: props.className, avatarProps }}\n      iconSlot={\n        <UAvatarIndicatorFallback>\n          <UAvatarIndicatorIcon>{icon}</UAvatarIndicatorIcon>\n        </UAvatarIndicatorFallback>\n      }\n    />\n  );\n};\n\n/*\n  ====================================\n  AvatarContent\n  ====================================\n*/\n\nexport type AvatarContentProps = Omit<UAvatarContentRootProps, \"children\"> & {\n  imageProps?: AvatarImageProps;\n  fallbackText?: string;\n};\nexport const AvatarContent = ({ imageProps, fallbackText, ...props }: AvatarContentProps) => {\n  const avatarProps = useAvatarInternalProvider();\n  return (\n    <AvatarContentLayout\n      renderRoot={(children, className) => {\n        return (\n          <UAvatarContentRoot {...props} className={className}>\n            {children}\n          </UAvatarContentRoot>\n        );\n      }}\n      styleProps={{ className: props.className, avatarProps }}\n      imageSlot={imageProps && <UAvatarContentImage {...imageProps} />}\n      labelSlot={\n        fallbackText && (\n          <UAvatarContentFallback>\n            <UAvatarContentLabel>{fallbackText}</UAvatarContentLabel>\n          </UAvatarContentFallback>\n        )\n      }\n    />\n  );\n};\n\nexport type AvatarContentWithIconProps = Omit<UAvatarContentRootProps, \"children\"> & {\n  imageProps?: AvatarImageProps;\n  fallbackIcon?: (className: string) => ReactNode;\n};\nexport const AvatarContentWithIcon = ({ imageProps, fallbackIcon, ...props }: AvatarContentWithIconProps) => {\n  const avatarProps = useAvatarInternalProvider();\n  return (\n    <AvatarContentLayout\n      renderRoot={(children, className) => {\n        return (\n          <UAvatarContentRoot {...props} className={className}>\n            {children}\n          </UAvatarContentRoot>\n        );\n      }}\n      styleProps={{ className: props.className, avatarProps }}\n      imageSlot={imageProps && <UAvatarContentImage {...imageProps} />}\n      labelSlot={\n        fallbackIcon && (\n          <UAvatarContentFallback>\n            <UAvatarContentIcon>{fallbackIcon}</UAvatarContentIcon>\n          </UAvatarContentFallback>\n        )\n      }\n    />\n  );\n};\n\n/*\n  ====================================\n  AvatarAction\n  ====================================\n*/\n\nexport type AvatarActionProps = Omit<UAvatarActionRootProps, \"children\"> & {\n  icon: (className: string) => ReactNode;\n  className?: string;\n};\n\nexport const AvatarAction = ({ icon, ...props }: AvatarActionProps) => {\n  const avatarProps = useAvatarInternalProvider();\n  return (\n    <AvatarActionLayout\n      renderRoot={(children, className) => (\n        <UAvatarActionRoot {...props} className={className}>\n          {children}\n        </UAvatarActionRoot>\n      )}\n      styleProps={{ className: props.className, avatarProps }}\n      iconSlot={<UAvatarActionIcon>{icon}</UAvatarActionIcon>}\n    />\n  );\n};\n\n/*\n  ====================================\n  AvatarStatus\n  ====================================\n*/\n\nexport type AvatarStatusProps = Omit<UAvatarStatusRootProps, \"children\"> & {\n  icon?: (className: string) => ReactNode;\n  className?: string;\n};\n\nexport const AvatarStatus = ({ icon, ...props }: AvatarStatusProps) => {\n  const avatarProps = useAvatarInternalProvider();\n  return (\n    <AvatarStatusLayout\n      renderRoot={(children, className) => (\n        <UAvatarStatusRoot {...props} className={className}>\n          {children}\n        </UAvatarStatusRoot>\n      )}\n      styleProps={{ className: props.className, avatarProps, avatarStatusProps: props }}\n      iconSlot={icon && <UAvatarStatusIcon>{icon}</UAvatarStatusIcon>}\n    />\n  );\n};\n\n/*\n  ====================================\n  AvatarBadge\n  ====================================\n*/\n\nexport type AvatarBadgeProps = Omit<UAvatarBadgeRootProps, \"children\"> & {\n  label: string;\n  className?: string;\n};\nexport const AvatarBadge = ({ label, ...props }: AvatarBadgeProps) => {\n  const avatarProps = useAvatarInternalProvider();\n  return (\n    <AvatarBadgeLayout\n      renderRoot={(children, className) => (\n        <UAvatarBadgeRoot {...props} className={className}>\n          {children}\n        </UAvatarBadgeRoot>\n      )}\n      styleProps={{ className: props.className, avatarProps, avatarBadgeProps: props }}\n      labelSlot={<UAvatarBadgeLabel>{label}</UAvatarBadgeLabel>}\n    />\n  );\n};\n",
        "target": "underatom/components/radix/avatar/Avatar.atoms.tsx"
      },
      {
        "type": "registry:ui",
        "path": "ui/radix/avatar/Avatar.underatoms.tsx",
        "content": "import { ReactNode, useRef } from \"react\";\nimport { AriaButtonProps, mergeProps, useButton, useFocusRing } from \"react-aria\";\nimport * as Avatar from \"@radix-ui/react-avatar\";\nimport {\n  AvatarBadgeStyleProps,\n  AvatarNotificationStyleProps,\n  AvatarStatusStyleProps,\n  AvatarStyleProps,\n  avatarActionClass,\n  avatarActionIconClass,\n  avatarBadgeClass,\n  avatarBadgeLabelClass,\n  avatarClass,\n  avatarContentClass,\n  avatarContentIconClass,\n  avatarContentImageClass,\n  avatarContentLabelClass,\n  avatarIndicatorClass,\n  avatarIndicatorIconClass,\n  avatarIndicatorImageClass,\n  avatarNotificationClass,\n  avatarNotificationCounterClass,\n  avatarStatusClass,\n  avatarStatusIconClass,\n} from \"./avatar\";\nimport { getGenericContext } from \"../../../utils/utils\";\n\n/*\n  ====================================\n  Avatar\n  ====================================\n*/\n\nexport const { Provider: AvatarInternalProvider, useComponentContext: useAvatarInternalProvider } =\n  getGenericContext<UAvatarRootProps>(\"AvatarInternalProvider\");\n\nexport type UAvatarRootProps = AvatarStyleProps & {\n  /** Avatar content */\n  children: ReactNode;\n  className?: string;\n};\nexport const UAvatarRoot = (props: UAvatarRootProps) => {\n  return (\n    <div className={avatarClass({ className: props.className, avatarProps: props })}>\n      <AvatarInternalProvider value={props}>{props.children}</AvatarInternalProvider>\n    </div>\n  );\n};\n\n/*\n  ====================================\n  AvatarNotification\n  ====================================\n*/\n\nexport const {\n  Provider: AvatarNotificationInternalProvider,\n  useComponentContext: useAvatarNotificationInternalProvider,\n} = getGenericContext<UAvatarNotificationRootProps>(\"AvatarNotificationInternalProvider\");\n\nexport type UAvatarNotificationRootProps = AvatarNotificationStyleProps & {\n  children: ReactNode;\n  className?: string;\n};\nexport const UAvatarNotificationRoot = (props: UAvatarNotificationRootProps) => {\n  const avatarProps = useAvatarInternalProvider();\n  return (\n    <div\n      className={avatarNotificationClass({ className: props.className, avatarProps, avatarNotificationProps: props })}\n    >\n      <AvatarNotificationInternalProvider value={props}>{props.children}</AvatarNotificationInternalProvider>\n    </div>\n  );\n};\n\nexport type UAvatarNotificationCounterProps = {\n  children: ReactNode;\n};\nexport const UAvatarNotificationCounter = ({ children }: UAvatarNotificationCounterProps) => {\n  const avatarProps = useAvatarInternalProvider();\n  const avatarNotificationProps = useAvatarNotificationInternalProvider();\n  return <span className={avatarNotificationCounterClass({ avatarProps, avatarNotificationProps })}>{children}</span>;\n};\n\n/*\n  ====================================\n  AvatarIndicator\n  ====================================\n*/\n\nexport type UAvatarIndicatorRootProps = React.ComponentPropsWithoutRef<\"div\">;\nexport const UAvatarIndicatorRoot = (props: UAvatarIndicatorRootProps) => {\n  const avatarProps = useAvatarInternalProvider();\n  return (\n    <Avatar.Root {...props} className={avatarIndicatorClass({ className: props.className, avatarProps })}>\n      {props.children}\n    </Avatar.Root>\n  );\n};\n\nexport type UAvatarIndicatorFallbackProps = Avatar.AvatarFallbackProps;\nexport const UAvatarIndicatorFallback = (props: UAvatarIndicatorFallbackProps) => {\n  return <Avatar.Fallback {...props} />;\n};\n\nexport type UAvatarIndicatorIconProps = {\n  /** Icon render function */\n  children: (className: string) => ReactNode;\n};\nexport const UAvatarIndicatorIcon = ({ children }: UAvatarIndicatorIconProps) => {\n  const avatarProps = useAvatarInternalProvider();\n  return <>{children(avatarIndicatorIconClass({ avatarProps }))}</>;\n};\n\nexport type UAvatarIndicatorImageProps = Avatar.AvatarImageProps;\nexport const UAvatarIndicatorImage = (props: UAvatarIndicatorImageProps) => {\n  const avatarProps = useAvatarInternalProvider();\n  return <Avatar.Image className={avatarIndicatorImageClass({ avatarProps })} {...props} />;\n};\n\n/*\n  ====================================\n  AvatarContent\n  ====================================\n*/\n\nexport type UAvatarContentRootProps = Avatar.AvatarProps & {\n  /** Avatar content */\n  children: Avatar.AvatarProps[\"children\"];\n  className?: string;\n};\n\nexport const UAvatarContentRoot = ({ className, ...props }: UAvatarContentRootProps) => {\n  const avatarProps = useAvatarInternalProvider();\n  return (\n    <Avatar.Root {...props} className={avatarContentClass({ className, avatarProps })}>\n      {props.children}\n    </Avatar.Root>\n  );\n};\n\nexport type UAvatarContentFallbackProps = Avatar.AvatarFallbackProps;\nexport const UAvatarContentFallback = (props: UAvatarContentFallbackProps) => {\n  return <Avatar.Fallback {...props} />;\n};\n\nexport type UAvatarContentLabelProps = {\n  children: ReactNode;\n};\nexport const UAvatarContentLabel = ({ children }: UAvatarContentLabelProps) => {\n  const avatarProps = useAvatarInternalProvider();\n  return <span className={avatarContentLabelClass({ avatarProps })}>{children}</span>;\n};\n\nexport type UAvatarContentIconProps = {\n  /** Icon render function */\n  children: (className: string) => ReactNode;\n};\nexport const UAvatarContentIcon = ({ children }: UAvatarContentIconProps) => {\n  const avatarProps = useAvatarInternalProvider();\n  return <>{children(avatarContentIconClass({ avatarProps }))}</>;\n};\n\nexport type UAvatarContentImageProps = Avatar.AvatarImageProps;\nexport const UAvatarContentImage = (props: UAvatarContentImageProps) => {\n  const avatarProps = useAvatarInternalProvider();\n  return <Avatar.Image className={avatarContentImageClass({ avatarProps })} {...props} />;\n};\n\n/*\n  ====================================\n  AvatarAction\n  ====================================\n*/\n\nexport type UAvatarActionRootProps = AriaButtonProps<\"button\"> & {\n  innerRef?: React.RefObject<HTMLButtonElement>;\n  className?: string;\n  disabled?: boolean;\n};\nexport const UAvatarActionRoot = ({ className, ...props }: UAvatarActionRootProps) => {\n  const refs = useRef<HTMLButtonElement>(null);\n  const { innerRef = refs } = props;\n  const { buttonProps, isPressed } = useButton(props, refs);\n  const avatarProps = useAvatarInternalProvider();\n  const { isFocusVisible, focusProps } = useFocusRing();\n\n  return (\n    <button\n      ref={innerRef}\n      data-active={isPressed}\n      data-ring={isFocusVisible}\n      data-disabled={props.disabled}\n      className={avatarActionClass({ className, avatarProps })}\n      {...mergeProps(buttonProps, focusProps)}\n    >\n      {props.children}\n    </button>\n  );\n};\n\nexport type UAvatarActionIconProps = {\n  /** Icon render function */\n  children: (className: string) => ReactNode;\n  className?: string;\n};\nexport const UAvatarActionIcon = ({ children, className }: UAvatarActionIconProps) => {\n  const avatarProps = useAvatarInternalProvider();\n  return <>{children(avatarActionIconClass({ avatarProps, className }))}</>;\n};\n\n/*\n  ====================================\n  AvatarStatus\n  ====================================\n*/\n\nexport const { Provider: AvatarStatusInternalProvider, useComponentContext: useAvatarStatusInternalProvider } =\n  getGenericContext<UAvatarStatusRootProps>(\"AvatarStatusInternalProvider\");\n\nexport type UAvatarStatusRootProps = AvatarStatusStyleProps & {\n  children: ReactNode;\n  className?: string;\n};\nexport const UAvatarStatusRoot = (props: UAvatarStatusRootProps) => {\n  const avatarProps = useAvatarInternalProvider();\n  return (\n    <div className={avatarStatusClass({ className: props.className, avatarProps, avatarStatusProps: props })}>\n      <AvatarStatusInternalProvider value={props}>{props.children}</AvatarStatusInternalProvider>\n    </div>\n  );\n};\n\nexport type UAvatarStatusIconProps = {\n  /** Icon render function */\n  children: (className: string) => ReactNode;\n  className?: string;\n};\nexport const UAvatarStatusIcon = ({ children, className }: UAvatarStatusIconProps) => {\n  const avatarProps = useAvatarInternalProvider();\n  const avatarStatusProps = useAvatarStatusInternalProvider();\n  return <>{children(avatarStatusIconClass({ avatarProps, avatarStatusProps, className }))}</>;\n};\n\n/*\n  ====================================\n  AvatarBadge\n  ====================================\n*/\n\nexport const { Provider: AvatarBadgeInternalProvider, useComponentContext: useAvatarBadgeInternalProvider } =\n  getGenericContext<UAvatarBadgeRootProps>(\"AvatarBadgeInternalProvider\");\n\nexport type UAvatarBadgeRootProps = AvatarBadgeStyleProps & {\n  children: ReactNode;\n  className?: string;\n};\nexport const UAvatarBadgeRoot = (props: UAvatarBadgeRootProps) => {\n  const avatarProps = useAvatarInternalProvider();\n  return (\n    <div className={avatarBadgeClass({ className: props.className, avatarProps, avatarBadgeProps: props })}>\n      <AvatarBadgeInternalProvider value={props}>{props.children}</AvatarBadgeInternalProvider>\n    </div>\n  );\n};\n\nexport type UAvatarBadgeLabelProps = {\n  children: ReactNode;\n};\nexport const UAvatarBadgeLabel = ({ children }: UAvatarBadgeLabelProps) => {\n  const avatarProps = useAvatarInternalProvider();\n  const avatarBadgeProps = useAvatarBadgeInternalProvider();\n  return <span className={avatarBadgeLabelClass({ avatarProps, avatarBadgeProps })}>{children}</span>;\n};\n",
        "target": "underatom/components/radix/avatar/Avatar.underatoms.tsx"
      },
      {
        "type": "registry:ui",
        "path": "ui/radix/avatar/avatar.tsx",
        "content": "import { tv } from \"../../../utils/extendedTV\";\nimport type { RenderRoot } from \"../../../utils/utils\";\n\n/*\n  ====================================\n  Avatar\n  ====================================\n*/\n\nexport type AvatarStyleProps = {\n  size?: \"sm\" | \"md\" | \"lg\" | \"xl\";\n};\n\nexport type AvatarType = {\n  className?: string;\n  avatarProps?: AvatarStyleProps;\n};\n\nexport const avatarDefaults: Required<AvatarStyleProps> = {\n  size: \"md\",\n};\n\nexport const avatarClass = ({ className }: AvatarType) => {\n  return `group/avatar  ${className}`;\n};\n\nexport const AvatarLayout = ({\n  renderRoot,\n  styleProps: { className },\n  contentSlot,\n  notificationSlot,\n  badgeSlot,\n  actionSlot,\n  statusSlot,\n  indicatorSlot,\n}: {\n  renderRoot: RenderRoot;\n  styleProps: AvatarType;\n  contentSlot: React.ReactNode;\n  notificationSlot: React.ReactNode;\n  badgeSlot: React.ReactNode;\n  actionSlot: React.ReactNode;\n  statusSlot: React.ReactNode;\n  indicatorSlot: React.ReactNode;\n}) =>\n  renderRoot(\n    <>\n      {contentSlot}\n      <div className=\"h-fit w-fit flex flex-row top-[14.6%] right-[14.6%] absolute translate-x-[50%] translate-y-[-50%]\">\n        {notificationSlot}\n      </div>\n      <div className=\"h-fit w-fit flex flex-row bottom-[0] left-[50%] absolute translate-x-[-50%] translate-y-[50%]\">\n        {badgeSlot}\n      </div>\n      <div className=\"h-fit w-fit flex flex-row bottom-[14.6%] right-[14.6%] absolute translate-x-[50%] translate-y-[50%]\">\n        {actionSlot}\n        {statusSlot}\n        {indicatorSlot}\n      </div>\n    </>,\n    `h-fit w-fit flex flex-row relative ${className}`,\n  );\nexport type AvatarBadgeStyleProps = {\n  color?: \"primary\" | \"base\" | \"red\" | \"green\";\n};\n\nexport type AvatarBadgeType = {\n  className?: string;\n  avatarBadgeProps?: AvatarBadgeStyleProps;\n  avatarProps?: AvatarStyleProps;\n};\n\nexport const avatarBadgeDefaults: Required<AvatarBadgeStyleProps> = {\n  color: \"primary\",\n};\n\nexport const avatarBadgeClass = ({ className, avatarProps, avatarBadgeProps }: AvatarBadgeType) => {\n  const rootClass = tv({\n    base: \"group/avatarBadge rounded-[50px]\",\n    variants: {\n      size: {\n        sm: \"shadow-cut-in-elevated-sm\",\n        md: \"shadow-cut-in-elevated-sm\",\n        lg: \"shadow-cut-in-elevated-lg\",\n        xl: \"shadow-cut-in-elevated-lg\",\n      },\n      badgeColor: { base: \"bg-base-200\", red: \"bg-danger-500\", primary: \"bg-primary-950\", green: \"bg-success-600\" },\n    },\n\n    defaultVariants: { size: avatarDefaults.size, badgeColor: avatarBadgeDefaults.color },\n  });\n  return rootClass({\n    class: className,\n    size: avatarProps?.size,\n    badgeColor: avatarBadgeProps?.color,\n  });\n};\n\nexport const avatarBadgeLabelClass = ({ className, avatarProps, avatarBadgeProps }: AvatarBadgeType) => {\n  const labelClass = tv({\n    base: \"font-text font-medium\",\n    variants: {\n      size: { sm: \"text-xs\", md: \"text-xs\", lg: \"text-sm\", xl: \"text-md\" },\n      badgeColor: { base: \"text-base-950\", primary: \"text-white\", red: \"text-white\", green: \"text-white\" },\n    },\n\n    defaultVariants: { size: avatarDefaults.size, badgeColor: avatarBadgeDefaults.color },\n  });\n  return labelClass({\n    class: className,\n\n    size: avatarProps?.size,\n    badgeColor: avatarBadgeProps?.color,\n  });\n};\n\nexport const avatarBadgeIconClass = ({ className, avatarProps, avatarBadgeProps }: AvatarBadgeType) => {\n  const iconClass = tv({\n    base: \"\",\n    variants: {\n      size: { sm: \"w-[14px] h-[14px]\", md: \"w-[14px] h-[14px]\", lg: \"w-5 h-5\", xl: \"w-6 h-6\" },\n      badgeColor: { base: \"text-warning-950\", primary: \"text-white\", red: \"text-white\", green: \"text-white\" },\n    },\n\n    defaultVariants: { size: avatarDefaults.size, badgeColor: avatarBadgeDefaults.color },\n  });\n  return iconClass({\n    class: className,\n\n    size: avatarProps?.size,\n    badgeColor: avatarBadgeProps?.color,\n  });\n};\n\nexport const AvatarBadgeLayout = ({\n  renderRoot,\n  styleProps: { className, avatarProps },\n  labelSlot,\n}: {\n  renderRoot: RenderRoot;\n  styleProps: AvatarBadgeType;\n  labelSlot: React.ReactNode;\n}) =>\n  renderRoot(\n    <>{labelSlot}</>,\n    tv({\n      base: \"w-fit flex flex-row justify-center items-center\",\n      variants: { size: { sm: \"h-6 px-2\", md: \"h-6 px-2\", lg: \"h-8 px-3\", xl: \"h-9 px-5\" } },\n\n      defaultVariants: { size: avatarDefaults.size },\n    })({\n      class: className,\n      size: avatarProps?.size,\n    }),\n  );\nexport const AvatarBadgeWithIconLayout = ({\n  renderRoot,\n  styleProps: { className, avatarProps },\n  labelSlot,\n  iconSlot,\n}: {\n  renderRoot: RenderRoot;\n  styleProps: AvatarBadgeType;\n  labelSlot: React.ReactNode;\n  iconSlot: React.ReactNode;\n}) =>\n  renderRoot(\n    <>\n      {labelSlot}\n      {iconSlot}\n    </>,\n    tv({\n      base: \"w-fit flex flex-row justify-center items-center gap-1\",\n      variants: { size: { sm: \"h-6 px-2\", md: \"h-6 px-2\", lg: \"h-8 px-3\", xl: \"h-9 px-5\" } },\n\n      defaultVariants: { size: avatarDefaults.size },\n    })({\n      class: className,\n      size: avatarProps?.size,\n    }),\n  );\n\nexport type AvatarActionType = {\n  className?: string;\n  avatarProps?: AvatarStyleProps;\n};\n\nexport const avatarActionClass = ({ className, avatarProps }: AvatarActionType) => {\n  const rootClass = tv({\n    base: `\ngroup/avatarAction\n  border-solid\n  border-base-950\n  border-1\n  bg-base-50\n  data-[active=true]:bg-base-50\n  rounded-[50px]\n  transition-all\n  hover:bg-base-200\n  data-[ring=true]:bg-base-200\n  data-[ring=true]:shadow-focus-ring\n  data-[disabled=true]:border-base-400\n  data-[disabled=true]:bg-primary-100\n`,\n    variants: {\n      size: {\n        sm: \"shadow-cut-in-elevated-sm\",\n        md: \"shadow-cut-in-elevated-sm\",\n        lg: \"shadow-cut-in-elevated-lg\",\n        xl: \"shadow-cut-in-elevated-lg\",\n      },\n    },\n\n    defaultVariants: { size: avatarDefaults.size },\n  });\n  return rootClass({\n    class: className,\n    size: avatarProps?.size,\n  });\n};\n\nexport const avatarActionIconClass = ({ className, avatarProps }: AvatarActionType) => {\n  const iconClass = tv({\n    base: \"text-base-950 group-data-[disabled=true]/avatarAction:text-base-400\",\n    variants: { size: { sm: \"w-[14px] h-[14px]\", md: \"w-5 h-5\", lg: \"w-6 h-6\", xl: \"w-7 h-7\" } },\n\n    defaultVariants: { size: avatarDefaults.size },\n  });\n  return iconClass({\n    class: className,\n\n    size: avatarProps?.size,\n  });\n};\n\nexport const AvatarActionLayout = ({\n  renderRoot,\n  styleProps: { className, avatarProps },\n  iconSlot,\n}: {\n  renderRoot: RenderRoot;\n  styleProps: AvatarActionType;\n  iconSlot: React.ReactNode;\n}) =>\n  renderRoot(\n    <>{iconSlot}</>,\n    tv({\n      base: \"flex flex-row justify-center items-center\",\n      variants: { size: { sm: \"h-7 w-7\", md: \"h-7 w-7\", lg: \"h-9 w-9\", xl: \"h-[42px] w-[42px]\" } },\n\n      defaultVariants: { size: avatarDefaults.size },\n    })({\n      class: className,\n      size: avatarProps?.size,\n    }),\n  );\n\nexport type AvatarStatusStyleProps = {\n  status?: \"online\" | \"offline\" | \"away\" | \"busy\";\n};\n\nexport type AvatarStatusType = {\n  className?: string;\n  avatarStatusProps?: AvatarStatusStyleProps;\n  avatarProps?: AvatarStyleProps;\n};\n\nexport const avatarStatusDefaults: Required<AvatarStatusStyleProps> = {\n  status: \"online\",\n};\n\nexport const avatarStatusClass = ({ className, avatarProps, avatarStatusProps }: AvatarStatusType) => {\n  const rootClass = tv({\n    base: \"group/avatarStatus rounded-[50px]\",\n    variants: {\n      size: {\n        sm: \"shadow-cut-in-elevated-sm\",\n        md: \"shadow-cut-in-elevated-sm\",\n        lg: \"shadow-cut-in-elevated-lg\",\n        xl: \"shadow-cut-in-elevated-lg\",\n      },\n      statusStatus: {\n        online: \"bg-success-600\",\n        offline: \"border-solid border-primary-300 border-1 bg-primary-100\",\n        away: \"bg-warning-400\",\n        busy: \"bg-danger-500\",\n      },\n    },\n\n    defaultVariants: { size: avatarDefaults.size, statusStatus: avatarStatusDefaults.status },\n  });\n  return rootClass({\n    class: className,\n    size: avatarProps?.size,\n    statusStatus: avatarStatusProps?.status,\n  });\n};\n\nexport const avatarStatusIconClass = ({ className, avatarProps, avatarStatusProps }: AvatarStatusType) => {\n  const iconClass = tv({\n    base: \"\",\n    variants: {\n      size: { sm: \"w-[14px] h-[14px]\", md: \"w-[14px] h-[14px]\", lg: \"\", xl: \"\" },\n      statusStatus: {\n        online: \"w-[14px] h-[14px]\",\n        offline: \"w-[14px] h-[14px]\",\n        away: \"text-warning-950\",\n        busy: \"text-white\",\n      },\n    },\n    compoundVariants: [\n      { size: [\"lg\"], statusStatus: [\"away\", \"busy\"], class: \"w-5 h-5\" },\n      { size: [\"xl\"], statusStatus: [\"away\", \"busy\"], class: \"w-6 h-6\" },\n    ],\n    defaultVariants: { size: avatarDefaults.size, statusStatus: avatarStatusDefaults.status },\n  });\n  return iconClass({\n    class: className,\n\n    size: avatarProps?.size,\n    statusStatus: avatarStatusProps?.status,\n  });\n};\n\nexport const AvatarStatusLayout = ({\n  renderRoot,\n  styleProps: { className, avatarProps },\n  iconSlot,\n}: {\n  renderRoot: RenderRoot;\n  styleProps: AvatarStatusType;\n  iconSlot: React.ReactNode;\n}) =>\n  renderRoot(\n    <>{iconSlot}</>,\n    tv({\n      base: \"flex flex-row justify-center items-center\",\n      variants: { size: { sm: \"h-5 w-5\", md: \"h-5 w-5\", lg: \"h-6 w-6\", xl: \"h-[26px] w-[26px]\" } },\n\n      defaultVariants: { size: avatarDefaults.size },\n    })({\n      class: className,\n      size: avatarProps?.size,\n    }),\n  );\n\nexport type AvatarContentType = {\n  className?: string;\n  avatarProps?: AvatarStyleProps;\n};\n\nexport const avatarContentClass = ({ className }: AvatarContentType) => {\n  return `group/avatarContent bg-base-100 rounded-[50px] ${className}`;\n};\n\nexport const avatarContentImageClass = ({ className, avatarProps }: AvatarContentType) => {\n  const imageClass = tv({\n    base: \"rounded-[50px]\",\n    variants: { size: { sm: \"w-10 h-10\", md: \"w-13 h-13\", lg: \"w-[64px] h-[64px]\", xl: \"w-[92px] h-[92px]\" } },\n\n    defaultVariants: { size: avatarDefaults.size },\n  });\n  return imageClass({\n    class: className,\n\n    size: avatarProps?.size,\n  });\n};\n\nexport const avatarContentLabelClass = ({ className, avatarProps }: AvatarContentType) => {\n  const labelClass = tv({\n    base: \"text-base-600 font-medium\",\n    variants: {\n      size: {\n        sm: \"text-sm font-text\",\n        md: \"text-lg font-text\",\n        lg: \"text-xl font-display\",\n        xl: \"text-3xl font-display\",\n      },\n    },\n\n    defaultVariants: { size: avatarDefaults.size },\n  });\n  return labelClass({\n    class: className,\n\n    size: avatarProps?.size,\n  });\n};\n\nexport const avatarContentIconClass = ({ className, avatarProps }: AvatarContentType) => {\n  const iconClass = tv({\n    base: \"text-base-600\",\n    variants: { size: { sm: \"w-5 h-5\", md: \"w-7 h-7\", lg: \"w-9 h-9\", xl: \"w-13 h-13\" } },\n\n    defaultVariants: { size: avatarDefaults.size },\n  });\n  return iconClass({\n    class: className,\n\n    size: avatarProps?.size,\n  });\n};\n\nexport const AvatarContentLayout = ({\n  renderRoot,\n  styleProps: { className, avatarProps },\n  imageSlot,\n  labelSlot,\n}: {\n  renderRoot: RenderRoot;\n  styleProps: AvatarContentType;\n  imageSlot: React.ReactNode;\n  labelSlot: React.ReactNode;\n}) =>\n  renderRoot(\n    <>\n      {imageSlot}\n      {labelSlot}\n    </>,\n    tv({\n      base: \"flex flex-row justify-center items-center\",\n      variants: { size: { sm: \"h-10 w-10\", md: \"h-13 w-13\", lg: \"h-[64px] w-[64px]\", xl: \"h-[92px] w-[92px]\" } },\n\n      defaultVariants: { size: avatarDefaults.size },\n    })({\n      class: className,\n      size: avatarProps?.size,\n    }),\n  );\nexport const AvatarContentWithIconLayout = ({\n  renderRoot,\n  styleProps: { className, avatarProps },\n  imageSlot,\n  iconSlot,\n}: {\n  renderRoot: RenderRoot;\n  styleProps: AvatarContentType;\n  imageSlot: React.ReactNode;\n  iconSlot: React.ReactNode;\n}) =>\n  renderRoot(\n    <>\n      {imageSlot}\n      {iconSlot}\n    </>,\n    tv({\n      base: \"flex flex-row justify-center items-center\",\n      variants: { size: { sm: \"h-10 w-10\", md: \"h-13 w-13\", lg: \"h-[64px] w-[64px]\", xl: \"h-[92px] w-[92px]\" } },\n\n      defaultVariants: { size: avatarDefaults.size },\n    })({\n      class: className,\n      size: avatarProps?.size,\n    }),\n  );\n\nexport type AvatarIndicatorType = {\n  className?: string;\n  avatarProps?: AvatarStyleProps;\n};\n\nexport const avatarIndicatorClass = ({ className, avatarProps }: AvatarIndicatorType) => {\n  const rootClass = tv({\n    base: \"group/avatarIndicator bg-primary-100 rounded-[50px]\",\n    variants: {\n      size: {\n        sm: \"shadow-cut-in-elevated-sm\",\n        md: \"shadow-cut-in-elevated-sm\",\n        lg: \"shadow-cut-in-elevated-lg\",\n        xl: \"shadow-cut-in-elevated-lg\",\n      },\n    },\n\n    defaultVariants: { size: avatarDefaults.size },\n  });\n  return rootClass({\n    class: className,\n    size: avatarProps?.size,\n  });\n};\n\nexport const avatarIndicatorImageClass = ({ className, avatarProps }: AvatarIndicatorType) => {\n  const imageClass = tv({\n    base: \"rounded-[50px]\",\n    variants: { size: { sm: \"w-5 h-5\", md: \"w-5 h-5\", lg: \"w-6 h-6\", xl: \"w-[26px] h-[26px]\" } },\n\n    defaultVariants: { size: avatarDefaults.size },\n  });\n  return imageClass({\n    class: className,\n\n    size: avatarProps?.size,\n  });\n};\n\nexport const avatarIndicatorIconClass = ({ className, avatarProps }: AvatarIndicatorType) => {\n  const iconClass = tv({\n    base: \"text-base-700\",\n    variants: { size: { sm: \"w-[14px] h-[14px]\", md: \"w-[14px] h-[14px]\", lg: \"w-5 h-5\", xl: \"w-6 h-6\" } },\n\n    defaultVariants: { size: avatarDefaults.size },\n  });\n  return iconClass({\n    class: className,\n\n    size: avatarProps?.size,\n  });\n};\n\nexport const AvatarIndicatorLayout = ({\n  renderRoot,\n  styleProps: { className, avatarProps },\n  imageSlot,\n}: {\n  renderRoot: RenderRoot;\n  styleProps: AvatarIndicatorType;\n  imageSlot: React.ReactNode;\n}) =>\n  renderRoot(\n    <>{imageSlot}</>,\n    tv({\n      base: \"flex flex-row justify-center items-center\",\n      variants: { size: { sm: \"h-5 w-5\", md: \"h-5 w-5\", lg: \"h-6 w-6\", xl: \"h-[26px] w-[26px]\" } },\n\n      defaultVariants: { size: avatarDefaults.size },\n    })({\n      class: className,\n      size: avatarProps?.size,\n    }),\n  );\nexport const AvatarIndicatorWithIconLayout = ({\n  renderRoot,\n  styleProps: { className, avatarProps },\n  iconSlot,\n}: {\n  renderRoot: RenderRoot;\n  styleProps: AvatarIndicatorType;\n  iconSlot: React.ReactNode;\n}) =>\n  renderRoot(\n    <>{iconSlot}</>,\n    tv({\n      base: \"flex flex-row justify-center items-center\",\n      variants: { size: { sm: \"h-5 w-5\", md: \"h-5 w-5\", lg: \"h-6 w-6\", xl: \"h-[26px] w-[26px]\" } },\n\n      defaultVariants: { size: avatarDefaults.size },\n    })({\n      class: className,\n      size: avatarProps?.size,\n    }),\n  );\n\nexport type AvatarNotificationStyleProps = {\n  color?: \"primary\" | \"red\";\n};\n\nexport type AvatarNotificationType = {\n  className?: string;\n  avatarNotificationProps?: AvatarNotificationStyleProps;\n  avatarProps?: AvatarStyleProps;\n};\n\nexport const avatarNotificationDefaults: Required<AvatarNotificationStyleProps> = {\n  color: \"primary\",\n};\n\nexport const avatarNotificationClass = ({\n  className,\n  avatarProps,\n  avatarNotificationProps,\n}: AvatarNotificationType) => {\n  const rootClass = tv({\n    base: \"group/avatarNotification rounded-[50px]\",\n    variants: {\n      size: {\n        sm: \"shadow-cut-in-elevated-sm\",\n        md: \"shadow-cut-in-elevated-sm\",\n        lg: \"shadow-cut-in-elevated-lg\",\n        xl: \"shadow-cut-in-elevated-lg\",\n      },\n      notificationColor: { primary: \"[background:#000000]\", red: \"bg-danger-500\" },\n    },\n\n    defaultVariants: { size: avatarDefaults.size, notificationColor: avatarNotificationDefaults.color },\n  });\n  return rootClass({\n    class: className,\n    size: avatarProps?.size,\n    notificationColor: avatarNotificationProps?.color,\n  });\n};\n\nexport const avatarNotificationCounterClass = ({ className, avatarProps }: AvatarNotificationType) => {\n  const counterClass = tv({\n    base: \"text-white font-text font-medium\",\n    variants: { size: { sm: \"text-xs\", md: \"text-xs\", lg: \"text-sm\", xl: \"text-sm\" } },\n\n    defaultVariants: { size: avatarDefaults.size },\n  });\n  return counterClass({\n    class: className,\n\n    size: avatarProps?.size,\n  });\n};\n\nexport const AvatarNotificationLayout = ({\n  renderRoot,\n  styleProps: { className, avatarProps },\n  counterSlot,\n}: {\n  renderRoot: RenderRoot;\n  styleProps: AvatarNotificationType;\n  counterSlot: React.ReactNode;\n}) =>\n  renderRoot(\n    <>{counterSlot}</>,\n    tv({\n      base: \"flex flex-row justify-center items-center\",\n      variants: { size: { sm: \"h-5 w-5\", md: \"h-5 w-5\", lg: \"h-6 w-6\", xl: \"h-[26px] w-[26px]\" } },\n\n      defaultVariants: { size: avatarDefaults.size },\n    })({\n      class: className,\n      size: avatarProps?.size,\n    }),\n  );\n\n",
        "target": "underatom/components/radix/avatar/avatar.tsx"
      }
    ]
  },
  {
    "name": "avatar-button",
    "type": "registry:ui",
    "relativePath": "radix/avatar-button",
    "stylingName": "avatar-button.tsx",
    "dependencies": [
      "@radix-ui/react-avatar",
      "react-aria"
    ],
    "files": [
      {
        "type": "registry:ui",
        "path": "ui/radix/avatar-button/AvatarButton.atoms.tsx",
        "content": "import { ReactNode } from \"react\";\nimport {\n  AvatarButtonBadgeLayout,\n  AvatarButtonContentLayout,\n  AvatarButtonIndicatorLayout,\n  AvatarButtonIndicatorWithIconLayout,\n  AvatarButtonLayout,\n  AvatarButtonNotificationLayout,\n  AvatarButtonStatusLayout,\n} from \"./avatar-button\";\nimport {\n  UAvatarButtonBadgeLabel,\n  UAvatarButtonBadgeRoot,\n  UAvatarButtonBadgeRootProps,\n  UAvatarButtonContentFallback,\n  UAvatarButtonContentIcon,\n  UAvatarButtonContentImage,\n  UAvatarButtonContentLabel,\n  UAvatarButtonContentRoot,\n  UAvatarButtonContentRootProps,\n  UAvatarButtonIndicatorFallback,\n  UAvatarButtonIndicatorIcon,\n  UAvatarButtonIndicatorImage,\n  UAvatarButtonIndicatorRoot,\n  UAvatarButtonIndicatorRootProps,\n  UAvatarButtonNotificationCounter,\n  UAvatarButtonNotificationRoot,\n  UAvatarButtonNotificationRootProps,\n  UAvatarButtonRoot,\n  UAvatarButtonRootProps,\n  UAvatarButtonStatusIcon,\n  UAvatarButtonStatusRoot,\n  UAvatarButtonStatusRootProps,\n  useAvatarButtonInternalProvider,\n} from \"./AvatarButton.underatoms\";\nimport { AvatarImageProps } from \"@radix-ui/react-avatar\";\n\n/*\n  ====================================\n  AvatarButton\n  ====================================\n*/\n\nexport type AvatarButtonProps = Omit<UAvatarButtonRootProps, \"children\"> & {\n  contentSlot: React.ReactNode;\n  notificationSlot?: React.ReactNode;\n  badgeSlot?: React.ReactNode;\n  indicatorSlot?: React.ReactNode;\n  statusSlot?: React.ReactNode;\n};\nexport const AvatarButton = ({\n  contentSlot,\n  badgeSlot,\n  indicatorSlot,\n  notificationSlot,\n  statusSlot,\n  ...props\n}: AvatarButtonProps) => {\n  return (\n    <AvatarButtonLayout\n      renderRoot={(children, className) => {\n        return (\n          <UAvatarButtonRoot {...props} className={className}>\n            {children}\n          </UAvatarButtonRoot>\n        );\n      }}\n      styleProps={{ className: props.className, avatarButtonProps: props }}\n      contentSlot={contentSlot}\n      notificationSlot={notificationSlot}\n      badgeSlot={badgeSlot}\n      indicatorSlot={indicatorSlot}\n      statusSlot={statusSlot}\n    />\n  );\n};\n\n/*\n  ====================================\n  AvatarButtonNotification\n  ====================================\n*/\n\nexport type AvatarButtonNotificationProps = Omit<UAvatarButtonNotificationRootProps, \"children\"> & {\n  counterText: string;\n};\nexport const AvatarButtonNotification = ({ counterText, ...props }: AvatarButtonNotificationProps) => {\n  const avatarButtonProps = useAvatarButtonInternalProvider();\n  return (\n    <AvatarButtonNotificationLayout\n      renderRoot={(children, className) => (\n        <UAvatarButtonNotificationRoot {...props} className={className}>\n          {children}\n        </UAvatarButtonNotificationRoot>\n      )}\n      styleProps={{ className: props.className, avatarButtonProps, avatarButtonNotificationProps: props }}\n      counterSlot={<UAvatarButtonNotificationCounter>{counterText}</UAvatarButtonNotificationCounter>}\n    />\n  );\n};\n\n/*\n  ====================================\n  AvatarButtonIndicator\n  ====================================\n*/\n\nexport type AvatarButtonIndicatorProps = Omit<UAvatarButtonIndicatorRootProps, \"children\"> & {\n  imageProps: AvatarImageProps;\n};\nexport const AvatarButtonIndicator = ({ imageProps, ...props }: AvatarButtonIndicatorProps) => {\n  const avatarButtonProps = useAvatarButtonInternalProvider();\n  return (\n    <AvatarButtonIndicatorLayout\n      renderRoot={(children, className) => (\n        <UAvatarButtonIndicatorRoot {...props} className={className}>\n          {children}\n        </UAvatarButtonIndicatorRoot>\n      )}\n      styleProps={{ className: props.className, avatarButtonProps }}\n      imageSlot={<UAvatarButtonIndicatorImage {...imageProps} />}\n    />\n  );\n};\n\nexport type AvatarButtonIndicatorWithIconProps = Omit<UAvatarButtonIndicatorRootProps, \"children\"> & {\n  icon: (className: string) => ReactNode;\n};\nexport const AvatarButtonIndicatorWithIcon = ({ icon, ...props }: AvatarButtonIndicatorWithIconProps) => {\n  const avatarButtonProps = useAvatarButtonInternalProvider();\n  return (\n    <AvatarButtonIndicatorWithIconLayout\n      renderRoot={(children, className) => (\n        <UAvatarButtonIndicatorRoot {...props} className={className}>\n          {children}\n        </UAvatarButtonIndicatorRoot>\n      )}\n      styleProps={{ className: props.className, avatarButtonProps }}\n      iconSlot={\n        <UAvatarButtonIndicatorFallback>\n          <UAvatarButtonIndicatorIcon>{icon}</UAvatarButtonIndicatorIcon>\n        </UAvatarButtonIndicatorFallback>\n      }\n    />\n  );\n};\n\n/*\n  ====================================\n  AvatarButtonContent\n  ====================================\n*/\n\nexport type AvatarButtonContentProps = Omit<UAvatarButtonContentRootProps, \"children\"> & {\n  imageProps?: AvatarImageProps;\n  fallbackText?: string;\n};\nexport const AvatarButtonContent = ({ imageProps, fallbackText, ...props }: AvatarButtonContentProps) => {\n  const avatarButtonProps = useAvatarButtonInternalProvider();\n  return (\n    <AvatarButtonContentLayout\n      renderRoot={(children, className) => {\n        return (\n          <UAvatarButtonContentRoot {...props} className={className}>\n            {children}\n          </UAvatarButtonContentRoot>\n        );\n      }}\n      styleProps={{ className: props.className, avatarButtonProps }}\n      imageSlot={imageProps && <UAvatarButtonContentImage {...imageProps} />}\n      labelSlot={\n        fallbackText && (\n          <UAvatarButtonContentFallback>\n            <UAvatarButtonContentLabel>{fallbackText}</UAvatarButtonContentLabel>\n          </UAvatarButtonContentFallback>\n        )\n      }\n    />\n  );\n};\n\nexport type AvatarButtonContentWithIconProps = Omit<UAvatarButtonContentRootProps, \"children\"> & {\n  imageProps?: AvatarImageProps;\n  fallbackIcon?: (className: string) => ReactNode;\n};\nexport const AvatarButtonContentWithIcon = ({\n  imageProps,\n  fallbackIcon,\n  ...props\n}: AvatarButtonContentWithIconProps) => {\n  const avatarButtonProps = useAvatarButtonInternalProvider();\n  return (\n    <AvatarButtonContentLayout\n      renderRoot={(children, className) => {\n        return (\n          <UAvatarButtonContentRoot {...props} className={className}>\n            {children}\n          </UAvatarButtonContentRoot>\n        );\n      }}\n      styleProps={{ className: props.className, avatarButtonProps }}\n      imageSlot={imageProps && <UAvatarButtonContentImage {...imageProps} />}\n      labelSlot={\n        fallbackIcon && (\n          <UAvatarButtonContentFallback>\n            <UAvatarButtonContentIcon>{fallbackIcon}</UAvatarButtonContentIcon>\n          </UAvatarButtonContentFallback>\n        )\n      }\n    />\n  );\n};\n\n/*\n  ====================================\n  AvatarButtonStatus\n  ====================================\n*/\n\nexport type AvatarButtonStatusProps = Omit<UAvatarButtonStatusRootProps, \"children\"> & {\n  icon?: (className: string) => ReactNode;\n  className?: string;\n};\nexport const AvatarButtonStatus = ({ icon, ...props }: AvatarButtonStatusProps) => {\n  const avatarButtonProps = useAvatarButtonInternalProvider();\n  return (\n    <AvatarButtonStatusLayout\n      renderRoot={(children, className) => (\n        <UAvatarButtonStatusRoot {...props} className={className}>\n          {children}\n        </UAvatarButtonStatusRoot>\n      )}\n      styleProps={{ className: props.className, avatarButtonProps, avatarButtonStatusProps: props }}\n      iconSlot={icon && <UAvatarButtonStatusIcon>{icon}</UAvatarButtonStatusIcon>}\n    />\n  );\n};\n\n/*\n  ====================================\n  AvatarButtonBadge\n  ====================================\n*/\n\nexport type AvatarButtonBadgeProps = Omit<UAvatarButtonBadgeRootProps, \"children\"> & {\n  label: string;\n  className?: string;\n};\nexport const AvatarButtonBadge = ({ label, ...props }: AvatarButtonBadgeProps) => {\n  const avatarButtonProps = useAvatarButtonInternalProvider();\n  return (\n    <AvatarButtonBadgeLayout\n      renderRoot={(children, className) => (\n        <UAvatarButtonBadgeRoot {...props} className={className}>\n          {children}\n        </UAvatarButtonBadgeRoot>\n      )}\n      styleProps={{ className: props.className, avatarButtonProps, avatarButtonBadgeProps: props }}\n      labelSlot={<UAvatarButtonBadgeLabel>{label}</UAvatarButtonBadgeLabel>}\n    />\n  );\n};\n",
        "target": "underatom/components/radix/avatar-button/AvatarButton.atoms.tsx"
      },
      {
        "type": "registry:ui",
        "path": "ui/radix/avatar-button/AvatarButton.underatoms.tsx",
        "content": "import { ReactNode, useRef } from \"react\";\nimport { AriaButtonProps, mergeProps, useButton, useFocusRing } from \"react-aria\";\nimport * as Avatar from \"@radix-ui/react-avatar\";\nimport {\n  AvatarButtonBadgeStyleProps,\n  AvatarButtonNotificationStyleProps,\n  AvatarButtonStatusStyleProps,\n  AvatarButtonStyleProps,\n  avatarButtonBadgeClass,\n  avatarButtonBadgeLabelClass,\n  avatarButtonClass,\n  avatarButtonContentClass,\n  avatarButtonContentIconClass,\n  avatarButtonContentImageClass,\n  avatarButtonContentLabelClass,\n  avatarButtonIndicatorClass,\n  avatarButtonIndicatorIconClass,\n  avatarButtonIndicatorImageClass,\n  avatarButtonNotificationClass,\n  avatarButtonNotificationCounterClass,\n  avatarButtonStatusClass,\n  avatarButtonStatusIconClass,\n} from \"./avatar-button\";\nimport { getGenericContext } from \"../../../utils/utils\";\n\n/*\n  ====================================\n  AvatarButton\n  ====================================\n*/\n\nexport const { Provider: AvatarButtonInternalProvider, useComponentContext: useAvatarButtonInternalProvider } =\n  getGenericContext<UAvatarButtonRootProps>(\"AvatarButtonInternalProvider\");\n\nexport type UAvatarButtonRootProps = AvatarButtonStyleProps &\n  AriaButtonProps<\"button\"> & {\n    innerRef?: React.RefObject<HTMLButtonElement>;\n    className?: string;\n  };\n\nexport const UAvatarButtonRoot = (props: UAvatarButtonRootProps) => {\n  const refs = useRef<HTMLButtonElement>(null);\n  const { innerRef = refs } = props;\n  const { buttonProps, isPressed } = useButton(props, refs);\n  const { isFocusVisible, focusProps } = useFocusRing();\n  return (\n    <Avatar.Root asChild>\n      <button\n        ref={innerRef}\n        data-active={isPressed}\n        data-ring={isFocusVisible}\n        className={avatarButtonClass({ className: props.className, avatarButtonProps: props })}\n        {...mergeProps(buttonProps, focusProps)}\n      >\n        <AvatarButtonInternalProvider value={props}>{props.children}</AvatarButtonInternalProvider>\n      </button>\n    </Avatar.Root>\n  );\n};\n\n/*\n  ====================================\n  AvatarButtonNotification\n  ====================================\n*/\n\nexport const {\n  Provider: AvatarButtonNotificationInternalProvider,\n  useComponentContext: useAvatarButtonNotificationInternalProvider,\n} = getGenericContext<UAvatarButtonNotificationRootProps>(\"AvatarButtonNotificationInternalProvider\");\n\nexport type UAvatarButtonNotificationRootProps = AvatarButtonNotificationStyleProps & {\n  children: ReactNode;\n  className?: string;\n};\nexport const UAvatarButtonNotificationRoot = (props: UAvatarButtonNotificationRootProps) => {\n  const avatarButtonProps = useAvatarButtonInternalProvider();\n  return (\n    <div\n      className={avatarButtonNotificationClass({\n        className: props.className,\n        avatarButtonProps,\n        avatarButtonNotificationProps: props,\n      })}\n    >\n      <AvatarButtonNotificationInternalProvider value={props}>\n        {props.children}\n      </AvatarButtonNotificationInternalProvider>\n    </div>\n  );\n};\n\nexport type UAvatarButtonNotificationCounterProps = {\n  children: ReactNode;\n};\nexport const UAvatarButtonNotificationCounter = ({ children }: UAvatarButtonNotificationCounterProps) => {\n  const avatarButtonProps = useAvatarButtonInternalProvider();\n  const avatarButtonNotificationProps = useAvatarButtonNotificationInternalProvider();\n  return (\n    <span className={avatarButtonNotificationCounterClass({ avatarButtonProps, avatarButtonNotificationProps })}>\n      {children}\n    </span>\n  );\n};\n\n/*\n  ====================================\n  AvatarButtonIndicator\n  ====================================\n*/\n\nexport type UAvatarButtonIndicatorRootProps = Avatar.AvatarProps & {\n  /** Avatar content */\n  children: Avatar.AvatarProps[\"children\"];\n};\n\nexport const UAvatarButtonIndicatorRoot = (props: UAvatarButtonIndicatorRootProps) => {\n  const avatarButtonProps = useAvatarButtonInternalProvider();\n  return (\n    <Avatar.Root {...props} className={avatarButtonIndicatorClass({ className: props.className, avatarButtonProps })}>\n      {props.children}\n    </Avatar.Root>\n  );\n};\n\nexport type UAvatarButtonIndicatorFallbackProps = Avatar.AvatarFallbackProps;\nexport const UAvatarButtonIndicatorFallback = (props: UAvatarButtonIndicatorFallbackProps) => {\n  return <Avatar.Fallback {...props} />;\n};\n\nexport type UAvatarButtonIndicatorIconProps = {\n  /** Icon render function */\n  children: (className: string) => ReactNode;\n};\nexport const UAvatarButtonIndicatorIcon = ({ children }: UAvatarButtonIndicatorIconProps) => {\n  const avatarButtonProps = useAvatarButtonInternalProvider();\n  return <>{children(avatarButtonIndicatorIconClass({ avatarButtonProps }))}</>;\n};\n\nexport type UAvatarButtonIndicatorImageProps = Avatar.AvatarImageProps;\nexport const UAvatarButtonIndicatorImage = (props: UAvatarButtonIndicatorImageProps) => {\n  const avatarButtonProps = useAvatarButtonInternalProvider();\n  return <Avatar.Image className={avatarButtonIndicatorImageClass({ avatarButtonProps })} {...props} />;\n};\n\n/*\n  ====================================\n  AvatarButtonContent\n  ====================================\n*/\n\nexport type UAvatarButtonContentRootProps = {\n  /** Avatar content */\n  children: ReactNode;\n  className?: string;\n};\nexport const UAvatarButtonContentRoot = (props: UAvatarButtonContentRootProps) => {\n  const avatarButtonProps = useAvatarButtonInternalProvider();\n  return (\n    <div className={avatarButtonContentClass({ className: props.className, avatarButtonProps })}>{props.children}</div>\n  );\n};\n\nexport type UAvatarButtonContentFallbackProps = Avatar.AvatarFallbackProps;\nexport const UAvatarButtonContentFallback = (props: UAvatarButtonContentFallbackProps) => {\n  return <Avatar.Fallback {...props} />;\n};\n\nexport type UAvatarButtonContentLabelProps = {\n  children: ReactNode;\n};\nexport const UAvatarButtonContentLabel = ({ children }: UAvatarButtonContentLabelProps) => {\n  const avatarButtonProps = useAvatarButtonInternalProvider();\n  return <span className={avatarButtonContentLabelClass({ avatarButtonProps })}>{children}</span>;\n};\n\nexport type UAvatarButtonContentIconProps = {\n  /** Icon render function */\n  children: (className: string) => ReactNode;\n};\nexport const UAvatarButtonContentIcon = ({ children }: UAvatarButtonContentIconProps) => {\n  const avatarButtonProps = useAvatarButtonInternalProvider();\n  return <>{children(avatarButtonContentIconClass({ avatarButtonProps }))}</>;\n};\n\nexport type UAvatarButtonContentImageProps = Avatar.AvatarImageProps;\nexport const UAvatarButtonContentImage = (props: UAvatarButtonContentImageProps) => {\n  const avatarButtonProps = useAvatarButtonInternalProvider();\n  return (\n    <Avatar.Image\n      className={avatarButtonContentImageClass({ className: props.className, avatarButtonProps })}\n      {...props}\n    />\n  );\n};\n\n/*\n  ====================================\n  AvatarButtonStatus\n  ====================================\n*/\n\nexport const {\n  Provider: AvatarButtonStatusInternalProvider,\n  useComponentContext: useAvatarButtonStatusInternalProvider,\n} = getGenericContext<UAvatarButtonStatusRootProps>(\"AvatarButtonStatusInternalProvider\");\n\nexport type UAvatarButtonStatusRootProps = AvatarButtonStatusStyleProps & {\n  children: ReactNode;\n  className?: string;\n};\nexport const UAvatarButtonStatusRoot = (props: UAvatarButtonStatusRootProps) => {\n  const avatarButtonProps = useAvatarButtonInternalProvider();\n  return (\n    <div\n      className={avatarButtonStatusClass({\n        className: props.className,\n        avatarButtonProps,\n        avatarButtonStatusProps: props,\n      })}\n    >\n      <AvatarButtonStatusInternalProvider value={props}>{props.children}</AvatarButtonStatusInternalProvider>\n    </div>\n  );\n};\n\nexport type UAvatarButtonStatusIconProps = {\n  /** Icon render function */\n  children: (className: string) => ReactNode;\n  className?: string;\n};\nexport const UAvatarButtonStatusIcon = ({ children, className }: UAvatarButtonStatusIconProps) => {\n  const avatarButtonProps = useAvatarButtonInternalProvider();\n  const avatarButtonStatusProps = useAvatarButtonStatusInternalProvider();\n  return <>{children(avatarButtonStatusIconClass({ avatarButtonProps, avatarButtonStatusProps, className }))}</>;\n};\n\n/*\n  ====================================\n  AvatarButtonBadge\n  ====================================\n*/\n\nexport const {\n  Provider: AvatarButtonBadgeInternalProvider,\n  useComponentContext: useAvatarButtonBadgeInternalProvider,\n} = getGenericContext<UAvatarButtonBadgeRootProps>(\"AvatarButtonBadgeInternalProvider\");\n\nexport type UAvatarButtonBadgeRootProps = AvatarButtonBadgeStyleProps & {\n  children: ReactNode;\n  className?: string;\n};\nexport const UAvatarButtonBadgeRoot = (props: UAvatarButtonBadgeRootProps) => {\n  const avatarButtonProps = useAvatarButtonInternalProvider();\n  return (\n    <div\n      className={avatarButtonBadgeClass({\n        className: props.className,\n        avatarButtonProps,\n        avatarButtonBadgeProps: props,\n      })}\n    >\n      <AvatarButtonBadgeInternalProvider value={props}>{props.children}</AvatarButtonBadgeInternalProvider>\n    </div>\n  );\n};\n\nexport type UAvatarButtonBadgeLabelProps = {\n  children: ReactNode;\n};\nexport const UAvatarButtonBadgeLabel = ({ children }: UAvatarButtonBadgeLabelProps) => {\n  const avatarButtonProps = useAvatarButtonInternalProvider();\n  const avatarButtonBadgeProps = useAvatarButtonBadgeInternalProvider();\n  return <span className={avatarButtonBadgeLabelClass({ avatarButtonProps, avatarButtonBadgeProps })}>{children}</span>;\n};\n",
        "target": "underatom/components/radix/avatar-button/AvatarButton.underatoms.tsx"
      },
      {
        "type": "registry:ui",
        "path": "ui/radix/avatar-button/avatar-button.tsx",
        "content": "import { tv } from \"../../../utils/extendedTV\";\nimport type { RenderRoot } from \"../../../utils/utils\";\n\n/*\n  ====================================\n  AvatarButton\n  ====================================\n*/\n\nexport type AvatarButtonStyleProps = {\n  size?: \"sm\" | \"md\" | \"lg\" | \"xl\";\n};\n\nexport type AvatarButtonType = {\n  className?: string;\n  avatarButtonProps?: AvatarButtonStyleProps;\n};\n\nexport const avatarButtonDefaults: Required<AvatarButtonStyleProps> = {\n  size: \"md\",\n};\n\nexport const avatarButtonClass = ({ className }: AvatarButtonType) => {\n  return `group/avatarButton disabled:pointer-events-none ${className}`;\n};\n\nexport const AvatarButtonLayout = ({\n  renderRoot,\n  styleProps: { className },\n  contentSlot,\n  notificationSlot,\n  badgeSlot,\n  statusSlot,\n  indicatorSlot,\n}: {\n  renderRoot: RenderRoot;\n  styleProps: AvatarButtonType;\n  contentSlot: React.ReactNode;\n  notificationSlot: React.ReactNode;\n  badgeSlot: React.ReactNode;\n  statusSlot: React.ReactNode;\n  indicatorSlot: React.ReactNode;\n}) =>\n  renderRoot(\n    <>\n      {contentSlot}\n      <div className=\"h-fit w-fit flex flex-row top-[14.6%] right-[14.6%] absolute translate-x-[50%] translate-y-[-50%]\">\n        {notificationSlot}\n      </div>\n      <div className=\"h-fit w-fit flex flex-row bottom-[0] left-[50%] absolute translate-x-[-50%] translate-y-[50%]\">\n        {badgeSlot}\n      </div>\n      <div className=\"h-fit w-fit flex flex-row bottom-[14.6%] right-[14.6%] absolute translate-x-[50%] translate-y-[50%]\">\n        {statusSlot}\n        {indicatorSlot}\n      </div>\n    </>,\n    `h-fit w-fit flex flex-row relative ${className}`,\n  );\nexport type AvatarButtonBadgeStyleProps = {\n  color?: \"primary\" | \"base\" | \"red\" | \"green\";\n};\n\nexport type AvatarButtonBadgeType = {\n  className?: string;\n  avatarButtonBadgeProps?: AvatarButtonBadgeStyleProps;\n  avatarButtonProps?: AvatarButtonStyleProps;\n};\n\nexport const avatarButtonBadgeDefaults: Required<AvatarButtonBadgeStyleProps> = {\n  color: \"primary\",\n};\n\nexport const avatarButtonBadgeClass = ({\n  className,\n  avatarButtonProps,\n  avatarButtonBadgeProps,\n}: AvatarButtonBadgeType) => {\n  const rootClass = tv({\n    base: \"group/avatarButtonBadge rounded-[50px] group-disabled/avatarButton:bg-base-300\",\n    variants: {\n      size: {\n        sm: \"shadow-cut-in-elevated-sm\",\n        md: \"shadow-cut-in-elevated-sm\",\n        lg: \"shadow-cut-in-elevated-lg\",\n        xl: \"shadow-cut-in-elevated-lg\",\n      },\n      badgeColor: {\n        base: \"border-solid border-primary-200 border-1 bg-base-100 group-disabled/avatarButton:[border:unset]\",\n        red: \"bg-danger-500\",\n        primary: \"bg-primary-950\",\n        green: \"bg-success-600\",\n      },\n    },\n\n    defaultVariants: { size: avatarButtonDefaults.size, badgeColor: avatarButtonBadgeDefaults.color },\n  });\n  return rootClass({\n    class: className,\n    size: avatarButtonProps?.size,\n    badgeColor: avatarButtonBadgeProps?.color,\n  });\n};\n\nexport const avatarButtonBadgeLabelClass = ({\n  className,\n  avatarButtonProps,\n  avatarButtonBadgeProps,\n}: AvatarButtonBadgeType) => {\n  const labelClass = tv({\n    base: \"font-text font-medium\",\n    variants: {\n      size: { sm: \"text-xs\", md: \"text-xs\", lg: \"text-sm\", xl: \"text-md\" },\n      badgeColor: {\n        base: \"text-base-950 group-disabled/avatarButton:text-white\",\n        primary: \"text-white\",\n        red: \"text-white\",\n        green: \"text-white\",\n      },\n    },\n\n    defaultVariants: { size: avatarButtonDefaults.size, badgeColor: avatarButtonBadgeDefaults.color },\n  });\n  return labelClass({\n    class: className,\n\n    size: avatarButtonProps?.size,\n    badgeColor: avatarButtonBadgeProps?.color,\n  });\n};\n\nexport const avatarButtonBadgeIconClass = ({ className, avatarButtonBadgeProps }: AvatarButtonBadgeType) => {\n  const iconClass = tv({\n    base: \"w-5 h-5\",\n    variants: {\n      badgeColor: {\n        base: \"text-base-950 group-disabled/avatarButton:text-white\",\n        primary: \"text-white\",\n        red: \"text-white\",\n        green: \"text-white\",\n      },\n    },\n\n    defaultVariants: { badgeColor: avatarButtonBadgeDefaults.color },\n  });\n  return iconClass({\n    class: className,\n\n    badgeColor: avatarButtonBadgeProps?.color,\n  });\n};\n\nexport const AvatarButtonBadgeLayout = ({\n  renderRoot,\n  styleProps: { className, avatarButtonProps },\n  labelSlot,\n}: {\n  renderRoot: RenderRoot;\n  styleProps: AvatarButtonBadgeType;\n  labelSlot: React.ReactNode;\n}) =>\n  renderRoot(\n    <>{labelSlot}</>,\n    tv({\n      base: \"w-fit flex flex-row justify-center items-center\",\n      variants: { size: { sm: \"h-6 px-2\", md: \"h-6 px-2\", lg: \"h-8 px-3\", xl: \"h-9 px-5\" } },\n\n      defaultVariants: { size: avatarButtonDefaults.size },\n    })({\n      class: className,\n      size: avatarButtonProps?.size,\n    }),\n  );\nexport const AvatarButtonBadgeWithIconLayout = ({\n  renderRoot,\n  styleProps: { className, avatarButtonProps },\n  iconSlot,\n  labelSlot,\n}: {\n  renderRoot: RenderRoot;\n  styleProps: AvatarButtonBadgeType;\n  iconSlot: React.ReactNode;\n  labelSlot: React.ReactNode;\n}) =>\n  renderRoot(\n    <>\n      {iconSlot}\n      {labelSlot}\n    </>,\n    tv({\n      base: \"w-fit flex flex-row justify-center items-center\",\n      variants: {\n        size: {\n          sm: \"h-6 gap-1 pl-[2px] pr-[6px]\",\n          md: \"h-6 gap-1 pl-[2px] pr-[6px]\",\n          lg: \"h-8 gap-1 pl-[6px] pr-3\",\n          xl: \"h-9 gap-[6px] pl-2 pr-[14px]\",\n        },\n      },\n\n      defaultVariants: { size: avatarButtonDefaults.size },\n    })({\n      class: className,\n      size: avatarButtonProps?.size,\n    }),\n  );\n\nexport type AvatarButtonStatusStyleProps = {\n  status?: \"online\" | \"offline\" | \"away\" | \"busy\";\n};\n\nexport type AvatarButtonStatusType = {\n  className?: string;\n  avatarButtonStatusProps?: AvatarButtonStatusStyleProps;\n  avatarButtonProps?: AvatarButtonStyleProps;\n};\n\nexport const avatarButtonStatusDefaults: Required<AvatarButtonStatusStyleProps> = {\n  status: \"online\",\n};\n\nexport const avatarButtonStatusClass = ({\n  className,\n  avatarButtonProps,\n  avatarButtonStatusProps,\n}: AvatarButtonStatusType) => {\n  const rootClass = tv({\n    base: \"group/avatarButtonStatus rounded-[50px] group-disabled/avatarButton:bg-base-300\",\n    variants: {\n      size: {\n        sm: \"shadow-cut-in-elevated-sm\",\n        md: \"shadow-cut-in-elevated-sm\",\n        lg: \"shadow-cut-in-elevated-lg\",\n        xl: \"shadow-cut-in-elevated-lg\",\n      },\n      statusStatus: {\n        online: \"bg-success-600\",\n        offline: \"border-solid border-primary-300 border-1 bg-primary-100 group-disabled/avatarButton:[border:unset]\",\n        away: \"bg-warning-400\",\n        busy: \"bg-danger-500\",\n      },\n    },\n\n    defaultVariants: { size: avatarButtonDefaults.size, statusStatus: avatarButtonStatusDefaults.status },\n  });\n  return rootClass({\n    class: className,\n    size: avatarButtonProps?.size,\n    statusStatus: avatarButtonStatusProps?.status,\n  });\n};\n\nexport const avatarButtonStatusIconClass = ({\n  className,\n  avatarButtonProps,\n  avatarButtonStatusProps,\n}: AvatarButtonStatusType) => {\n  const iconClass = tv({\n    base: \"\",\n    variants: {\n      size: { sm: \"w-[14px] h-[14px]\", md: \"w-[14px] h-[14px]\", lg: \"\", xl: \"\" },\n      statusStatus: {\n        offline: \"w-[14px] h-[14px]\",\n        online: \"w-[14px] h-[14px]\",\n        away: \"text-warning-950 group-disabled/avatarButton:text-white\",\n        busy: \"text-white\",\n      },\n    },\n    compoundVariants: [\n      { size: [\"lg\"], statusStatus: [\"away\", \"busy\"], class: \"w-5 h-5\" },\n      { size: [\"xl\"], statusStatus: [\"away\", \"busy\"], class: \"w-6 h-6\" },\n    ],\n    defaultVariants: { size: avatarButtonDefaults.size, statusStatus: avatarButtonStatusDefaults.status },\n  });\n  return iconClass({\n    class: className,\n\n    size: avatarButtonProps?.size,\n    statusStatus: avatarButtonStatusProps?.status,\n  });\n};\n\nexport const AvatarButtonStatusLayout = ({\n  renderRoot,\n  styleProps: { className, avatarButtonProps },\n  iconSlot,\n}: {\n  renderRoot: RenderRoot;\n  styleProps: AvatarButtonStatusType;\n  iconSlot: React.ReactNode;\n}) =>\n  renderRoot(\n    <>{iconSlot}</>,\n    tv({\n      base: \"flex flex-row justify-center items-center\",\n      variants: { size: { sm: \"h-5 w-5\", md: \"h-5 w-5\", lg: \"h-6 w-6\", xl: \"h-[26px] w-[26px]\" } },\n\n      defaultVariants: { size: avatarButtonDefaults.size },\n    })({\n      class: className,\n      size: avatarButtonProps?.size,\n    }),\n  );\n\nexport type AvatarButtonContentType = {\n  className?: string;\n  avatarButtonProps?: AvatarButtonStyleProps;\n};\n\nexport const avatarButtonContentClass = ({ className }: AvatarButtonContentType) => {\n  return `\n  group/avatarButtonContent\n  bg-base-100\n  group-data-[active=true]/avatarButton:bg-base-100\n  group-disabled/avatarButton:bg-base-100\n  rounded-[50px]\n  transition-all\n  group-hover/avatarButton:bg-base-200\n  group-data-[ring=true]/avatarButton:bg-base-200\n  group-data-[state=open]/avatarButton:bg-base-200\n  group-data-[ring=true]/avatarButton:shadow-focus-ring\n  group-data-[state=open]/avatarButton:border-solid\n  group-data-[state=open]/avatarButton:border-primary-950\n  group-data-[state=open]/avatarButton:border-1\n  ${className}\n  `;\n};\n\nexport const avatarButtonContentImageClass = ({ className, avatarButtonProps }: AvatarButtonContentType) => {\n  const imageClass = tv({\n    base: `\nrounded-[50px]\n  transition-all\n  group-data-[active=true]/avatarButton:[opacity:unset]\n  group-hover/avatarButton:opacity-[0.8]\n  group-data-[ring=true]/avatarButton:opacity-[0.8]\n  group-data-[state=open]/avatarButton:opacity-[0.8]\n  group-disabled/avatarButton:opacity-[0.6]\n`,\n    variants: { size: { sm: \"w-10 h-10\", md: \"w-13 h-13\", lg: \"w-[64px] h-[64px]\", xl: \"w-[92px] h-[92px]\" } },\n\n    defaultVariants: { size: avatarButtonDefaults.size },\n  });\n  return imageClass({\n    class: className,\n\n    size: avatarButtonProps?.size,\n  });\n};\n\nexport const avatarButtonContentLabelClass = ({ className, avatarButtonProps }: AvatarButtonContentType) => {\n  const labelClass = tv({\n    base: \"text-base-600 font-medium group-disabled/avatarButton:text-base-400\",\n    variants: {\n      size: {\n        sm: \"text-sm font-text\",\n        md: \"text-lg font-text\",\n        lg: \"text-xl font-display\",\n        xl: \"text-3xl font-display\",\n      },\n    },\n\n    defaultVariants: { size: avatarButtonDefaults.size },\n  });\n  return labelClass({\n    class: className,\n\n    size: avatarButtonProps?.size,\n  });\n};\n\nexport const avatarButtonContentIconClass = ({ className, avatarButtonProps }: AvatarButtonContentType) => {\n  const iconClass = tv({\n    base: \"text-base-600 group-disabled/avatarButton:text-primary-400\",\n    variants: { size: { sm: \"w-5 h-5\", md: \"w-7 h-7\", lg: \"w-9 h-9\", xl: \"w-13 h-13\" } },\n\n    defaultVariants: { size: avatarButtonDefaults.size },\n  });\n  return iconClass({\n    class: className,\n\n    size: avatarButtonProps?.size,\n  });\n};\n\nexport const AvatarButtonContentLayout = ({\n  renderRoot,\n  styleProps: { className, avatarButtonProps },\n  imageSlot,\n  labelSlot,\n}: {\n  renderRoot: RenderRoot;\n  styleProps: AvatarButtonContentType;\n  imageSlot: React.ReactNode;\n  labelSlot: React.ReactNode;\n}) =>\n  renderRoot(\n    <>\n      {imageSlot}\n      {labelSlot}\n    </>,\n    tv({\n      base: \"flex flex-row justify-center items-center\",\n      variants: { size: { sm: \"h-10 w-10\", md: \"h-13 w-13\", lg: \"h-[64px] w-[64px]\", xl: \"h-[92px] w-[92px]\" } },\n\n      defaultVariants: { size: avatarButtonDefaults.size },\n    })({\n      class: className,\n      size: avatarButtonProps?.size,\n    }),\n  );\nexport const AvatarButtonContentWithIconLayout = ({\n  renderRoot,\n  styleProps: { className, avatarButtonProps },\n  imageSlot,\n  iconSlot,\n}: {\n  renderRoot: RenderRoot;\n  styleProps: AvatarButtonContentType;\n  imageSlot: React.ReactNode;\n  iconSlot: React.ReactNode;\n}) =>\n  renderRoot(\n    <>\n      {imageSlot}\n      {iconSlot}\n    </>,\n    tv({\n      base: \"flex flex-row justify-center items-center\",\n      variants: { size: { sm: \"h-10 w-10\", md: \"h-13 w-13\", lg: \"h-[64px] w-[64px]\", xl: \"h-[92px] w-[92px]\" } },\n\n      defaultVariants: { size: avatarButtonDefaults.size },\n    })({\n      class: className,\n      size: avatarButtonProps?.size,\n    }),\n  );\n\nexport type AvatarButtonIndicatorType = {\n  className?: string;\n  avatarButtonProps?: AvatarButtonStyleProps;\n};\n\nexport const avatarButtonIndicatorClass = ({ className, avatarButtonProps }: AvatarButtonIndicatorType) => {\n  const rootClass = tv({\n    base: \"group/avatarButtonIndicator bg-primary-100 rounded-[50px]\",\n    variants: {\n      size: {\n        sm: \"shadow-cut-in-elevated-sm\",\n        md: \"shadow-cut-in-elevated-sm\",\n        lg: \"shadow-cut-in-elevated-lg\",\n        xl: \"shadow-cut-in-elevated-lg\",\n      },\n    },\n\n    defaultVariants: { size: avatarButtonDefaults.size },\n  });\n  return rootClass({\n    class: className,\n    size: avatarButtonProps?.size,\n  });\n};\n\nexport const avatarButtonIndicatorImageClass = ({ className, avatarButtonProps }: AvatarButtonIndicatorType) => {\n  const imageClass = tv({\n    base: \"rounded-[50px] group-disabled/avatarButton:opacity-[0.6]\",\n    variants: { size: { sm: \"w-5 h-5\", md: \"w-5 h-5\", lg: \"w-6 h-6\", xl: \"w-[26px] h-[26px]\" } },\n\n    defaultVariants: { size: avatarButtonDefaults.size },\n  });\n  return imageClass({\n    class: className,\n\n    size: avatarButtonProps?.size,\n  });\n};\n\nexport const avatarButtonIndicatorIconClass = ({ className, avatarButtonProps }: AvatarButtonIndicatorType) => {\n  const iconClass = tv({\n    base: \"text-base-700 group-disabled/avatarButton:text-white\",\n    variants: { size: { sm: \"w-[14px] h-[14px]\", md: \"w-[14px] h-[14px]\", lg: \"w-5 h-5\", xl: \"w-6 h-6\" } },\n\n    defaultVariants: { size: avatarButtonDefaults.size },\n  });\n  return iconClass({\n    class: className,\n\n    size: avatarButtonProps?.size,\n  });\n};\n\nexport const AvatarButtonIndicatorLayout = ({\n  renderRoot,\n  styleProps: { className, avatarButtonProps },\n  imageSlot,\n}: {\n  renderRoot: RenderRoot;\n  styleProps: AvatarButtonIndicatorType;\n  imageSlot: React.ReactNode;\n}) =>\n  renderRoot(\n    <>{imageSlot}</>,\n    tv({\n      base: \"flex flex-row justify-center items-center\",\n      variants: { size: { sm: \"h-5 w-5\", md: \"h-5 w-5\", lg: \"h-6 w-6\", xl: \"h-[26px] w-[26px]\" } },\n\n      defaultVariants: { size: avatarButtonDefaults.size },\n    })({\n      class: className,\n      size: avatarButtonProps?.size,\n    }),\n  );\nexport const AvatarButtonIndicatorWithIconLayout = ({\n  renderRoot,\n  styleProps: { className, avatarButtonProps },\n  iconSlot,\n}: {\n  renderRoot: RenderRoot;\n  styleProps: AvatarButtonIndicatorType;\n  iconSlot: React.ReactNode;\n}) =>\n  renderRoot(\n    <>{iconSlot}</>,\n    tv({\n      base: \"flex flex-row justify-center items-center\",\n      variants: { size: { sm: \"h-5 w-5\", md: \"h-5 w-5\", lg: \"h-6 w-6\", xl: \"h-[26px] w-[26px]\" } },\n\n      defaultVariants: { size: avatarButtonDefaults.size },\n    })({\n      class: className,\n      size: avatarButtonProps?.size,\n    }),\n  );\n\nexport type AvatarButtonNotificationStyleProps = {\n  color?: \"primary\" | \"red\";\n};\n\nexport type AvatarButtonNotificationType = {\n  className?: string;\n  avatarButtonNotificationProps?: AvatarButtonNotificationStyleProps;\n  avatarButtonProps?: AvatarButtonStyleProps;\n};\n\nexport const avatarButtonNotificationDefaults: Required<AvatarButtonNotificationStyleProps> = {\n  color: \"primary\",\n};\n\nexport const avatarButtonNotificationClass = ({\n  className,\n  avatarButtonNotificationProps,\n}: AvatarButtonNotificationType) => {\n  const rootClass = tv({\n    base: \"group/avatarButtonNotification shadow-cut-in-elevated-lg rounded-[50px] group-disabled/avatarButton:bg-base-300\",\n    variants: { notificationColor: { primary: \"[background:#000000]\", red: \"bg-danger-500\" } },\n\n    defaultVariants: { notificationColor: avatarButtonNotificationDefaults.color },\n  });\n  return rootClass({\n    class: className,\n    notificationColor: avatarButtonNotificationProps?.color,\n  });\n};\n\nexport const avatarButtonNotificationCounterClass = ({\n  className,\n  avatarButtonProps,\n}: AvatarButtonNotificationType) => {\n  const counterClass = tv({\n    base: \"text-white font-text font-medium\",\n    variants: { size: { sm: \"text-xs\", md: \"text-xs\", lg: \"text-sm\", xl: \"text-sm\" } },\n\n    defaultVariants: { size: avatarButtonDefaults.size },\n  });\n  return counterClass({\n    class: className,\n\n    size: avatarButtonProps?.size,\n  });\n};\n\nexport const AvatarButtonNotificationLayout = ({\n  renderRoot,\n  styleProps: { className, avatarButtonProps },\n  counterSlot,\n}: {\n  renderRoot: RenderRoot;\n  styleProps: AvatarButtonNotificationType;\n  counterSlot: React.ReactNode;\n}) =>\n  renderRoot(\n    <>{counterSlot}</>,\n    tv({\n      base: \"flex flex-row justify-center items-center\",\n      variants: { size: { sm: \"h-5 w-5\", md: \"h-5 w-5\", lg: \"h-6 w-6\", xl: \"h-[26px] w-[26px]\" } },\n\n      defaultVariants: { size: avatarButtonDefaults.size },\n    })({\n      class: className,\n      size: avatarButtonProps?.size,\n    }),\n  );\n\n",
        "target": "underatom/components/radix/avatar-button/avatar-button.tsx"
      }
    ]
  },
  {
    "name": "avatar-group",
    "type": "registry:ui",
    "relativePath": "radix/avatar-group",
    "stylingName": "avatar-group.tsx",
    "dependencies": [
      "@radix-ui/react-avatar",
      "react-aria"
    ],
    "files": [
      {
        "type": "registry:ui",
        "path": "ui/radix/avatar-group/AvatarGroup.atoms.tsx",
        "content": "import { AvatarImageProps } from \"@radix-ui/react-avatar\";\nimport {\n  AvatarGroupActionLayout,\n  AvatarGroupAvatarLayout,\n  AvatarGroupAvatarWithIconLayout,\n  AvatarGroupInfoLayout,\n  AvatarGroupLayout,\n} from \"./avatar-group\";\nimport {\n  UAvatarGroupActionIcon,\n  UAvatarGroupActionRoot,\n  UAvatarGroupActionRootProps,\n  UAvatarGroupAvatarFallback,\n  UAvatarGroupAvatarIcon,\n  UAvatarGroupAvatarImage,\n  UAvatarGroupAvatarLabel,\n  UAvatarGroupAvatarRoot,\n  UAvatarGroupAvatarRootProps,\n  UAvatarGroupInfoLabel,\n  UAvatarGroupInfoRoot,\n  UAvatarGroupInfoRootProps,\n  UAvatarGroupRoot,\n  UAvatarGroupRootProps,\n  useAvatarGroupInternalProvider,\n} from \"./AvatarGroup.underatoms\";\nimport { ReactNode } from \"react\";\n\n/*\n  ====================================\n  AvatarGroup\n  ====================================\n*/\n\nexport type AvatarGroupProps = Omit<UAvatarGroupRootProps, \"children\"> & {\n  className?: string;\n  actionSlot?: React.ReactNode;\n  avatarSlots: React.ReactNode[];\n  infoSlot?: React.ReactNode;\n};\n\nexport const AvatarGroup = ({ actionSlot, avatarSlots, infoSlot, ...props }: AvatarGroupProps) => {\n  return (\n    <AvatarGroupLayout\n      renderRoot={(children, className) => (\n        <UAvatarGroupRoot {...props} className={className}>\n          {children}\n        </UAvatarGroupRoot>\n      )}\n      styleProps={{ className: props.className, avatarGroupProps: props }}\n      actionSlot={actionSlot}\n      avatarSlots={avatarSlots}\n      infoSlot={infoSlot}\n    />\n  );\n};\n\n/*\n  ====================================\n  AvatarGroupAction\n  ====================================\n*/\n\nexport type AvatarGroupActionProps = Omit<UAvatarGroupActionRootProps, \"children\"> & {\n  icon: (className: string) => React.ReactNode;\n};\nexport const AvatarGroupAction = ({ icon, ...props }: AvatarGroupActionProps) => {\n  const avatarGroupProps = useAvatarGroupInternalProvider();\n  return (\n    <AvatarGroupActionLayout\n      renderRoot={(children, className) => {\n        return (\n          <UAvatarGroupActionRoot {...props} className={className}>\n            {children}\n          </UAvatarGroupActionRoot>\n        );\n      }}\n      styleProps={{ className: props.className, avatarGroupProps }}\n      iconSlot={<UAvatarGroupActionIcon>{icon}</UAvatarGroupActionIcon>}\n    />\n  );\n};\n\n/*\n  ====================================\n  AvatarGroupAvatar\n  ====================================\n*/\n\nexport type AvatarGroupAvatarProps = Omit<UAvatarGroupAvatarRootProps, \"children\"> & {\n  imageProps?: AvatarImageProps;\n  fallbackText?: string;\n};\nexport const AvatarGroupAvatar = ({ imageProps, fallbackText, ...props }: AvatarGroupAvatarProps) => {\n  const avatarGroupProps = useAvatarGroupInternalProvider();\n  return (\n    <AvatarGroupAvatarLayout\n      renderRoot={(children, className) => {\n        return (\n          <UAvatarGroupAvatarRoot {...props} className={className}>\n            {children}\n          </UAvatarGroupAvatarRoot>\n        );\n      }}\n      styleProps={{ className: props.className, avatarGroupProps }}\n      imageSlot={imageProps && <UAvatarGroupAvatarImage {...imageProps} />}\n      labelSlot={\n        <UAvatarGroupAvatarFallback>\n          <UAvatarGroupAvatarLabel>{fallbackText}</UAvatarGroupAvatarLabel>\n        </UAvatarGroupAvatarFallback>\n      }\n    />\n  );\n};\n\nexport type AvatarGroupAvatarWithIconProps = Omit<UAvatarGroupAvatarRootProps, \"children\"> & {\n  imageProps?: AvatarImageProps;\n  fallbackIcon?: (className: string) => ReactNode;\n};\nexport const AvatarGroupAvatarWithIcon = ({ imageProps, fallbackIcon, ...props }: AvatarGroupAvatarWithIconProps) => {\n  const avatarGroupProps = useAvatarGroupInternalProvider();\n  return (\n    <AvatarGroupAvatarWithIconLayout\n      renderRoot={(children, className) => {\n        return (\n          <UAvatarGroupAvatarRoot {...props} className={className}>\n            {children}\n          </UAvatarGroupAvatarRoot>\n        );\n      }}\n      styleProps={{ className: props.className, avatarGroupProps }}\n      imageSlot={imageProps && <UAvatarGroupAvatarImage {...imageProps} />}\n      iconSlot={\n        fallbackIcon && (\n          <UAvatarGroupAvatarFallback>\n            <UAvatarGroupAvatarIcon>{fallbackIcon}</UAvatarGroupAvatarIcon>\n          </UAvatarGroupAvatarFallback>\n        )\n      }\n    />\n  );\n};\n\n/*\n  ====================================\n  AvatarGroupInfo\n  ====================================\n*/\n\nexport type AvatarGroupInfoProps = Omit<UAvatarGroupInfoRootProps, \"children\"> & {\n  label: string;\n};\nexport const AvatarGroupInfo = ({ label, ...props }: AvatarGroupInfoProps) => {\n  const avatarGroupProps = useAvatarGroupInternalProvider();\n  return (\n    <AvatarGroupInfoLayout\n      renderRoot={(children, className) => (\n        <UAvatarGroupInfoRoot {...props} className={className}>\n          {children}\n        </UAvatarGroupInfoRoot>\n      )}\n      styleProps={{ className: props.className, avatarGroupProps }}\n      labelSlot={<UAvatarGroupInfoLabel>{label}</UAvatarGroupInfoLabel>}\n    />\n  );\n};\n",
        "target": "underatom/components/radix/avatar-group/AvatarGroup.atoms.tsx"
      },
      {
        "type": "registry:ui",
        "path": "ui/radix/avatar-group/AvatarGroup.underatoms.tsx",
        "content": "import { ReactNode, useRef } from \"react\";\nimport { AriaButtonProps, mergeProps, useButton, useFocusRing } from \"react-aria\";\nimport * as Avatar from \"@radix-ui/react-avatar\";\nimport { getGenericContext } from \"../../../utils/utils\";\nimport {\n  AvatarGroupStyleProps,\n  avatarGroupActionClass,\n  avatarGroupActionIconClass,\n  avatarGroupAvatarClass,\n  avatarGroupAvatarIconClass,\n  avatarGroupAvatarImageClass,\n  avatarGroupAvatarLabelClass,\n  avatarGroupClass,\n  avatarGroupInfoClass,\n  avatarGroupInfoLabelClass,\n} from \"./avatar-group\";\n\n/*\n  ====================================\n  AvatarGroup\n  ====================================\n*/\n\nexport const { Provider: AvatarGroupInternalProvider, useComponentContext: useAvatarGroupInternalProvider } =\n  getGenericContext<UAvatarGroupRootProps>(\"AvatarGroupInternalProvider\");\n\nexport type UAvatarGroupRootProps = AvatarGroupStyleProps & {\n  children: ReactNode;\n  className?: string;\n};\n\nexport const UAvatarGroupRoot = (props: UAvatarGroupRootProps) => {\n  return (\n    <div className={avatarGroupClass({ className: props.className, avatarGroupProps: props })}>\n      <AvatarGroupInternalProvider value={props}>{props.children}</AvatarGroupInternalProvider>\n    </div>\n  );\n};\n\n/*\n  ====================================\n  AvatarGroupAction\n  ====================================\n*/\n\nexport type UAvatarGroupActionRootProps = AriaButtonProps<\"button\"> & {\n  innerRef?: React.RefObject<HTMLButtonElement>;\n  className?: string;\n  disabled?: boolean;\n};\nexport const UAvatarGroupActionRoot = ({ className, ...props }: UAvatarGroupActionRootProps) => {\n  const refs = useRef<HTMLButtonElement>(null);\n  const { innerRef = refs } = props;\n  const { buttonProps, isPressed } = useButton(props, refs);\n  const avatarGroupProps = useAvatarGroupInternalProvider();\n  const { isFocusVisible, focusProps } = useFocusRing();\n\n  return (\n    <button\n      ref={innerRef}\n      data-active={isPressed}\n      data-ring={isFocusVisible}\n      data-disabled={props.disabled}\n      className={avatarGroupActionClass({\n        className,\n        avatarGroupProps,\n      })}\n      {...mergeProps(buttonProps, focusProps)}\n    >\n      {props.children}\n    </button>\n  );\n};\n\nexport type UAvatarGroupActionIconProps = {\n  /** Icon render function */\n  children: (className: string) => ReactNode;\n  className?: string;\n};\nexport const UAvatarGroupActionIcon = ({ children, className }: UAvatarGroupActionIconProps) => {\n  const avatarGroupProps = useAvatarGroupInternalProvider();\n  return <>{children(avatarGroupActionIconClass({ className, avatarGroupProps }))}</>;\n};\n\n/*\n====================================\nAvatarGroupAvatar\n====================================\n*/\n\nexport type UAvatarGroupAvatarRootProps = Avatar.AvatarProps & {\n  /** Avatar content */\n  children: Avatar.AvatarProps[\"children\"];\n  className?: string;\n};\n\nexport const UAvatarGroupAvatarRoot = ({ className, ...props }: UAvatarGroupAvatarRootProps) => {\n  const avatarGroupProps = useAvatarGroupInternalProvider();\n  return (\n    <Avatar.Root {...props} className={avatarGroupAvatarClass({ className, avatarGroupProps })}>\n      {props.children}\n    </Avatar.Root>\n  );\n};\n\nexport type UAvatarGroupAvatarFallbackProps = Avatar.AvatarFallbackProps;\nexport const UAvatarGroupAvatarFallback = (props: UAvatarGroupAvatarFallbackProps) => {\n  return <Avatar.Fallback {...props} />;\n};\n\nexport type UAvatarGroupAvatarLabelProps = {\n  children: ReactNode;\n};\nexport const UAvatarGroupAvatarLabel = ({ children }: UAvatarGroupAvatarLabelProps) => {\n  const avatarGroupProps = useAvatarGroupInternalProvider();\n  return <span className={avatarGroupAvatarLabelClass({ avatarGroupProps })}>{children}</span>;\n};\n\nexport type UAvatarGroupAvatarIconProps = {\n  /** Icon render function */\n  children: (className: string) => ReactNode;\n};\nexport const UAvatarGroupAvatarIcon = ({ children }: UAvatarGroupAvatarIconProps) => {\n  const avatarGroupProps = useAvatarGroupInternalProvider();\n  return <>{children(avatarGroupAvatarIconClass({ avatarGroupProps }))}</>;\n};\n\nexport type UAvatarGroupAvatarImageProps = Avatar.AvatarImageProps;\nexport const UAvatarGroupAvatarImage = (props: UAvatarGroupAvatarImageProps) => {\n  const avatarGroupProps = useAvatarGroupInternalProvider();\n  return (\n    <Avatar.Image\n      className={avatarGroupAvatarImageClass({ className: props.className, avatarGroupProps })}\n      {...props}\n    />\n  );\n};\n\n/*\n  ====================================\n  AvatarGroupInfo\n  ====================================\n*/\n\nexport type UAvatarGroupInfoRootProps = {\n  children: ReactNode;\n  className?: string;\n};\nexport const UAvatarGroupInfoRoot = ({ children, className }: UAvatarGroupInfoRootProps) => {\n  const avatarGroupProps = useAvatarGroupInternalProvider();\n  return <div className={avatarGroupInfoClass({ className, avatarGroupProps })}>{children}</div>;\n};\n\nexport type UAvatarGroupInfoLabelProps = {\n  children: ReactNode;\n};\nexport const UAvatarGroupInfoLabel = ({ children }: UAvatarGroupInfoLabelProps) => {\n  const avatarGroupProps = useAvatarGroupInternalProvider();\n  return <span className={avatarGroupInfoLabelClass({ avatarGroupProps })}>{children}</span>;\n};\n",
        "target": "underatom/components/radix/avatar-group/AvatarGroup.underatoms.tsx"
      },
      {
        "type": "registry:ui",
        "path": "ui/radix/avatar-group/avatar-group.tsx",
        "content": "import { tv } from \"../../../utils/extendedTV\";\nimport type { RenderRoot } from \"../../../utils/utils\";\n\n/*\n  ====================================\n  AvatarGroup\n  ====================================\n*/\n\nexport type AvatarGroupStyleProps = {\n  size?: \"sm\" | \"md\" | \"lg\";\n};\n\nexport type AvatarGroupType = {\n  className?: string;\n  avatarGroupProps?: AvatarGroupStyleProps;\n};\n\nexport const avatarGroupDefaults: Required<AvatarGroupStyleProps> = {\n  size: \"md\",\n};\n\nexport const avatarGroupClass = ({ className }: AvatarGroupType) => {\n  return `group/avatarGroup  ${className}`;\n};\n\nexport const AvatarGroupLayout = ({\n  renderRoot,\n  styleProps: { className },\n  avatarSlots,\n  actionSlot,\n  infoSlot,\n}: {\n  renderRoot: RenderRoot;\n  styleProps: AvatarGroupType;\n  avatarSlots: React.ReactNode;\n  actionSlot: React.ReactNode;\n  infoSlot: React.ReactNode;\n}) =>\n  renderRoot(\n    <>\n      {avatarSlots}\n\n      {actionSlot}\n      {infoSlot}\n    </>,\n    `h-fit w-fit flex flex-row [&>*:not(:first-child)]:[margin-left:-8px] ${className}`,\n  );\nexport type AvatarGroupInfoType = {\n  className?: string;\n  avatarGroupProps?: AvatarGroupStyleProps;\n};\n\nexport const avatarGroupInfoClass = ({ className, avatarGroupProps }: AvatarGroupInfoType) => {\n  const rootClass = tv({\n    base: \"group/avatarGroupInfo bg-base-100 rounded-[50px]\",\n    variants: {\n      size: { sm: \"shadow-cut-in-elevated-sm\", md: \"shadow-cut-in-elevated-sm\", lg: \"shadow-cut-in-elevated-lg\" },\n    },\n\n    defaultVariants: { size: avatarGroupDefaults.size },\n  });\n  return rootClass({\n    class: className,\n    size: avatarGroupProps?.size,\n  });\n};\n\nexport const avatarGroupInfoLabelClass = ({ className, avatarGroupProps }: AvatarGroupInfoType) => {\n  const labelClass = tv({\n    base: \"text-primary-500 font-medium\",\n    variants: { size: { sm: \"text-sm font-text\", md: \"text-lg font-text\", lg: \"text-xl font-display\" } },\n\n    defaultVariants: { size: avatarGroupDefaults.size },\n  });\n  return labelClass({\n    class: className,\n\n    size: avatarGroupProps?.size,\n  });\n};\n\nexport const AvatarGroupInfoLayout = ({\n  renderRoot,\n  styleProps: { className, avatarGroupProps },\n  labelSlot,\n}: {\n  renderRoot: RenderRoot;\n  styleProps: AvatarGroupInfoType;\n  labelSlot: React.ReactNode;\n}) =>\n  renderRoot(\n    <>{labelSlot}</>,\n    tv({\n      base: \"flex flex-row justify-center items-center\",\n      variants: { size: { sm: \"h-10 w-10\", md: \"h-13 w-13\", lg: \"h-[64px] w-[64px]\" } },\n\n      defaultVariants: { size: avatarGroupDefaults.size },\n    })({\n      class: className,\n      size: avatarGroupProps?.size,\n    }),\n  );\n\nexport type AvatarGroupActionType = {\n  className?: string;\n  avatarGroupProps?: AvatarGroupStyleProps;\n};\n\nexport const avatarGroupActionClass = ({ className, avatarGroupProps }: AvatarGroupActionType) => {\n  const rootClass = tv({\n    base: `\ngroup/avatarGroupAction\n  border-solid\n  border-base-300\n  border-1\n  bg-base-50\n  data-[active=true]:bg-base-50\n  data-[disabled=true]:bg-base-50\n  rounded-[50px]\n  hover:bg-base-100\n  data-[ring=true]:bg-base-100\n  data-[ring=true]:shadow-focus-ring\n  data-[disabled=true]:border-base-200\n`,\n    variants: {\n      size: { sm: \"shadow-cut-in-elevated-sm\", md: \"shadow-cut-in-elevated-sm\", lg: \"shadow-cut-in-elevated-lg\" },\n    },\n\n    defaultVariants: { size: avatarGroupDefaults.size },\n  });\n  return rootClass({\n    class: className,\n    size: avatarGroupProps?.size,\n  });\n};\n\nexport const avatarGroupActionIconClass = ({ className }: AvatarGroupActionType) => {\n  return `w-[26px] h-[26px] text-primary-600 group-data-[disabled=true]/avatarGroupAction:text-base-400 ${className}`;\n};\n\nexport const AvatarGroupActionLayout = ({\n  renderRoot,\n  styleProps: { className, avatarGroupProps },\n  iconSlot,\n}: {\n  renderRoot: RenderRoot;\n  styleProps: AvatarGroupActionType;\n  iconSlot: React.ReactNode;\n}) =>\n  renderRoot(\n    <>{iconSlot}</>,\n    tv({\n      base: \"flex flex-row justify-center items-center\",\n      variants: { size: { sm: \"h-10 w-10\", md: \"h-13 w-13\", lg: \"h-[64px] w-[64px]\" } },\n\n      defaultVariants: { size: avatarGroupDefaults.size },\n    })({\n      class: className,\n      size: avatarGroupProps?.size,\n    }),\n  );\n\nexport type AvatarGroupAvatarType = {\n  className?: string;\n  avatarGroupProps?: AvatarGroupStyleProps;\n};\n\nexport const avatarGroupAvatarClass = ({ className, avatarGroupProps }: AvatarGroupAvatarType) => {\n  const rootClass = tv({\n    base: \"group/avatarGroupAvatar bg-base-100 rounded-[50px]\",\n    variants: { size: { sm: \"shadow-cut-in-sm\", md: \"shadow-cut-in-sm\", lg: \"shadow-cut-in-lg\" } },\n\n    defaultVariants: { size: avatarGroupDefaults.size },\n  });\n  return rootClass({\n    class: className,\n    size: avatarGroupProps?.size,\n  });\n};\n\nexport const avatarGroupAvatarImageClass = ({ className, avatarGroupProps }: AvatarGroupAvatarType) => {\n  const imageClass = tv({\n    base: \"rounded-[50px]\",\n    variants: { size: { sm: \"w-10 h-10\", md: \"w-13 h-13\", lg: \"w-[64px] h-[64px]\" } },\n\n    defaultVariants: { size: avatarGroupDefaults.size },\n  });\n  return imageClass({\n    class: className,\n\n    size: avatarGroupProps?.size,\n  });\n};\n\nexport const avatarGroupAvatarLabelClass = ({ className, avatarGroupProps }: AvatarGroupAvatarType) => {\n  const labelClass = tv({\n    base: \"text-base-600 font-medium\",\n    variants: { size: { sm: \"text-sm font-text\", md: \"text-lg font-text\", lg: \"text-xl font-display\" } },\n\n    defaultVariants: { size: avatarGroupDefaults.size },\n  });\n  return labelClass({\n    class: className,\n\n    size: avatarGroupProps?.size,\n  });\n};\n\nexport const avatarGroupAvatarIconClass = ({ className, avatarGroupProps }: AvatarGroupAvatarType) => {\n  const iconClass = tv({\n    base: \"text-base-600\",\n    variants: { size: { sm: \"w-5 h-5\", md: \"w-7 h-7\", lg: \"w-9 h-9\" } },\n\n    defaultVariants: { size: avatarGroupDefaults.size },\n  });\n  return iconClass({\n    class: className,\n\n    size: avatarGroupProps?.size,\n  });\n};\n\nexport const AvatarGroupAvatarLayout = ({\n  renderRoot,\n  styleProps: { className, avatarGroupProps },\n  imageSlot,\n  labelSlot,\n}: {\n  renderRoot: RenderRoot;\n  styleProps: AvatarGroupAvatarType;\n  imageSlot: React.ReactNode;\n  labelSlot: React.ReactNode;\n}) =>\n  renderRoot(\n    <>\n      {imageSlot}\n      {labelSlot}\n    </>,\n    tv({\n      base: \"flex flex-row justify-center items-center\",\n      variants: { size: { sm: \"h-10 w-10\", md: \"h-13 w-13\", lg: \"h-[64px] w-[64px]\" } },\n\n      defaultVariants: { size: avatarGroupDefaults.size },\n    })({\n      class: className,\n      size: avatarGroupProps?.size,\n    }),\n  );\nexport const AvatarGroupAvatarWithIconLayout = ({\n  renderRoot,\n  styleProps: { className, avatarGroupProps },\n  imageSlot,\n  iconSlot,\n}: {\n  renderRoot: RenderRoot;\n  styleProps: AvatarGroupAvatarType;\n  imageSlot: React.ReactNode;\n  iconSlot: React.ReactNode;\n}) =>\n  renderRoot(\n    <>\n      {imageSlot}\n      {iconSlot}\n    </>,\n    tv({\n      base: \"flex flex-row justify-center items-center\",\n      variants: { size: { sm: \"h-10 w-10\", md: \"h-13 w-13\", lg: \"h-[64px] w-[64px]\" } },\n\n      defaultVariants: { size: avatarGroupDefaults.size },\n    })({\n      class: className,\n      size: avatarGroupProps?.size,\n    }),\n  );\n\n",
        "target": "underatom/components/radix/avatar-group/avatar-group.tsx"
      }
    ]
  },
  {
    "name": "avatar-toggle",
    "type": "registry:ui",
    "relativePath": "radix/avatar-toggle",
    "stylingName": "avatar-toggle.tsx",
    "dependencies": [
      "@radix-ui/react-avatar",
      "react-aria-components"
    ],
    "files": [
      {
        "type": "registry:ui",
        "path": "ui/radix/avatar-toggle/AvatarToggle.atoms.tsx",
        "content": "import { AvatarImageProps } from \"@radix-ui/react-avatar\";\nimport {\n  UAvatarToggleCheckIcon,\n  UAvatarToggleCheckRoot,\n  UAvatarToggleCheckRootProps,\n  UAvatarToggleContentFallback,\n  UAvatarToggleContentIcon,\n  UAvatarToggleContentImage,\n  UAvatarToggleContentLabel,\n  UAvatarToggleContentRoot,\n  UAvatarToggleContentRootProps,\n  UAvatarToggleRoot,\n  UAvatarToggleRootProps,\n  useAvatarToggleInternalProvider,\n} from \"./AvatarToggle.underatoms\";\nimport {\n  AvatarToggleCheckLayout,\n  AvatarToggleContentLayout,\n  AvatarToggleContentWithIconLayout,\n  AvatarToggleLayout,\n} from \"./avatar-toggle\";\nimport { ReactNode } from \"react\";\n\n/*\n  ====================================\n  AvatarToggle\n  ====================================\n*/\n\nexport type AvatarToggleProps = Omit<UAvatarToggleRootProps, \"children\"> & {\n  contentSlot: React.ReactNode;\n};\nexport const AvatarToggle = ({ contentSlot, ...props }: AvatarToggleProps) => {\n  return (\n    <AvatarToggleLayout\n      renderRoot={(children, className) => (\n        <UAvatarToggleRoot {...props} className={className}>\n          {children}\n        </UAvatarToggleRoot>\n      )}\n      styleProps={{ className: props.className, avatarToggleProps: props }}\n      contentSlot={contentSlot}\n      checkSlot={<AvatarToggleCheck />}\n    />\n  );\n};\n\n/*\n  ====================================\n  AvatarToggleContent\n  ====================================\n*/\n\nexport type AvatarToggleContentProps = Omit<UAvatarToggleContentRootProps, \"children\"> & {\n  imageProps?: AvatarImageProps;\n  fallbackText?: string;\n};\nexport const AvatarToggleContent = ({ imageProps, fallbackText, ...props }: AvatarToggleContentProps) => {\n  const avatarToggleProps = useAvatarToggleInternalProvider();\n  return (\n    <AvatarToggleContentLayout\n      renderRoot={(children, className) => (\n        <UAvatarToggleContentRoot {...props} className={className}>\n          {children}\n        </UAvatarToggleContentRoot>\n      )}\n      styleProps={{ className: props.className, avatarToggleProps }}\n      imageSlot={imageProps && <UAvatarToggleContentImage {...imageProps} />}\n      labelSlot={\n        fallbackText && (\n          <UAvatarToggleContentFallback>\n            <UAvatarToggleContentLabel>{fallbackText}</UAvatarToggleContentLabel>\n          </UAvatarToggleContentFallback>\n        )\n      }\n    />\n  );\n};\n\nexport type AvatarToggleContentWithIconProps = Omit<UAvatarToggleContentRootProps, \"children\"> & {\n  imageProps?: AvatarImageProps;\n  fallbackIcon?: (className: string) => ReactNode;\n};\nexport const AvatarToggleContentWithIcon = ({\n  imageProps,\n  fallbackIcon,\n  ...props\n}: AvatarToggleContentWithIconProps) => {\n  const avatarToggleProps = useAvatarToggleInternalProvider();\n  return (\n    <AvatarToggleContentWithIconLayout\n      renderRoot={(children, className) => (\n        <UAvatarToggleContentRoot {...props} className={className}>\n          {children}\n        </UAvatarToggleContentRoot>\n      )}\n      styleProps={{ className: props.className, avatarToggleProps }}\n      imageSlot={imageProps && <UAvatarToggleContentImage {...imageProps} />}\n      iconSlot={\n        fallbackIcon && (\n          <UAvatarToggleContentFallback>\n            <UAvatarToggleContentIcon>{fallbackIcon}</UAvatarToggleContentIcon>\n          </UAvatarToggleContentFallback>\n        )\n      }\n    />\n  );\n};\n\n/*\n  ====================================\n  AvatarToggleCheck\n  ====================================\n*/\n\nexport type AvatarToggleCheckProps = Omit<UAvatarToggleCheckRootProps, \"children\">;\nexport const AvatarToggleCheck = (props: AvatarToggleCheckProps) => {\n  const avatarToggleProps = useAvatarToggleInternalProvider();\n  return (\n    <AvatarToggleCheckLayout\n      renderRoot={(children, className) => (\n        <UAvatarToggleCheckRoot {...props} className={className}>\n          {children}\n        </UAvatarToggleCheckRoot>\n      )}\n      styleProps={{ className: props.className, avatarToggleProps }}\n      iconSlot={<UAvatarToggleCheckIcon />}\n    />\n  );\n};\n",
        "target": "underatom/components/radix/avatar-toggle/AvatarToggle.atoms.tsx"
      },
      {
        "type": "registry:ui",
        "path": "ui/radix/avatar-toggle/AvatarToggle.underatoms.tsx",
        "content": "import { ReactNode, useRef } from \"react\";\nimport { ToggleButton, ToggleButtonProps } from \"react-aria-components\";\nimport * as Avatar from \"@radix-ui/react-avatar\";\nimport { Check } from \"../../../utils/Icons\";\nimport { getGenericContext } from \"../../../utils/utils\";\nimport {\n  AvatarToggleStyleProps,\n  avatarToggleCheckClass,\n  avatarToggleCheckIconClass,\n  avatarToggleClass,\n  avatarToggleContentClass,\n  avatarToggleContentIconClass,\n  avatarToggleContentImageClass,\n  avatarToggleContentLabelClass,\n} from \"./avatar-toggle\";\n\n/*\n  ====================================\n  AvatarToggle\n  ====================================\n*/\n\nexport const { Provider: AvatarToggleInternalProvider, useComponentContext: useAvatarToggleInternalProvider } =\n  getGenericContext<UAvatarToggleRootProps>(\"AvatarToggleInternalProvider\");\n\nexport type UAvatarToggleRootProps = AvatarToggleStyleProps &\n  ToggleButtonProps &\n  React.RefAttributes<HTMLButtonElement> & {\n    innerRef?: React.RefObject<HTMLButtonElement>;\n    className?: string;\n  };\n\nexport const UAvatarToggleRoot = (props: UAvatarToggleRootProps) => {\n  const refs = useRef<HTMLButtonElement>(null);\n  const { innerRef = refs } = props;\n  return (\n    <AvatarToggleInternalProvider value={props}>\n      <Avatar.Root asChild>\n        <ToggleButton\n          {...props}\n          ref={innerRef}\n          className={avatarToggleClass({ className: props.className, avatarToggleProps: props })}\n        >\n          {props.children}\n        </ToggleButton>\n      </Avatar.Root>\n    </AvatarToggleInternalProvider>\n  );\n};\n\n/*\n  ====================================\n  AvatarToggleContent\n  ====================================\n*/\n\nexport type UAvatarToggleContentRootProps = {\n  children: ReactNode;\n  className?: string;\n};\nexport const UAvatarToggleContentRoot = (props: UAvatarToggleContentRootProps) => {\n  const avatarToggleProps = useAvatarToggleInternalProvider();\n  return (\n    <div className={avatarToggleContentClass({ className: props.className, avatarToggleProps })}>{props.children}</div>\n  );\n};\n\nexport type UAvatarToggleContentFallbackProps = Avatar.AvatarFallbackProps;\nexport const UAvatarToggleContentFallback = (props: UAvatarToggleContentFallbackProps) => {\n  return <Avatar.Fallback {...props} />;\n};\n\nexport type UAvatarToggleContentLabelProps = {\n  children: ReactNode;\n};\nexport const UAvatarToggleContentLabel = ({ children }: UAvatarToggleContentLabelProps) => {\n  const avatarToggleProps = useAvatarToggleInternalProvider();\n  return <span className={avatarToggleContentLabelClass({ avatarToggleProps })}>{children}</span>;\n};\n\nexport type UAvatarToggleContentIconProps = {\n  /** Icon render function */\n  children: (className: string) => ReactNode;\n};\nexport const UAvatarToggleContentIcon = ({ children }: UAvatarToggleContentIconProps) => {\n  const avatarToggleProps = useAvatarToggleInternalProvider();\n  return <>{children(avatarToggleContentIconClass({ avatarToggleProps }))}</>;\n};\n\nexport type UAvatarToggleContentImageProps = Avatar.AvatarImageProps;\nexport const UAvatarToggleContentImage = (props: UAvatarToggleContentImageProps) => {\n  const avatarToggleProps = useAvatarToggleInternalProvider();\n  return (\n    <Avatar.Image\n      className={avatarToggleContentImageClass({ className: props.className, avatarToggleProps })}\n      {...props}\n    />\n  );\n};\n\n/*\n  ====================================\n  AvatarToggleCheck\n  ====================================\n*/\n\nexport type UAvatarToggleCheckRootProps = {\n  /** Avatar content */\n  children: ReactNode;\n  className?: string;\n};\nexport const UAvatarToggleCheckRoot = ({ className, children }: UAvatarToggleCheckRootProps) => {\n  const avatarToggleProps = useAvatarToggleInternalProvider();\n  return <div className={avatarToggleCheckClass({ className, avatarToggleProps })}>{children}</div>;\n};\n\nexport const UAvatarToggleCheckIcon = () => {\n  const avatarToggleProps = useAvatarToggleInternalProvider();\n  return <Check className={avatarToggleCheckIconClass({ avatarToggleProps })} />;\n};\n",
        "target": "underatom/components/radix/avatar-toggle/AvatarToggle.underatoms.tsx"
      },
      {
        "type": "registry:ui",
        "path": "ui/radix/avatar-toggle/avatar-toggle.tsx",
        "content": "import { tv } from \"../../../utils/extendedTV\";\nimport type { RenderRoot } from \"../../../utils/utils\";\n\n/*\n  ====================================\n  AvatarToggle\n  ====================================\n*/\n\nexport type AvatarToggleStyleProps = {\n  size?: \"sm\" | \"md\" | \"lg\" | \"xl\";\n};\n\nexport type AvatarToggleType = {\n  className?: string;\n  avatarToggleProps?: AvatarToggleStyleProps;\n};\n\nexport const avatarToggleDefaults: Required<AvatarToggleStyleProps> = {\n  size: \"md\",\n};\n\nexport const avatarToggleClass = ({ className }: AvatarToggleType) => {\n  return `group/avatarToggle data-[disabled]:pointer-events-none ${className}`;\n};\n\nexport const AvatarToggleLayout = ({\n  renderRoot,\n  styleProps: { className },\n  contentSlot,\n  checkSlot,\n}: {\n  renderRoot: RenderRoot;\n  styleProps: AvatarToggleType;\n  contentSlot: React.ReactNode;\n  checkSlot: React.ReactNode;\n}) =>\n  renderRoot(\n    <>\n      {contentSlot}\n      <div className=\"h-fit w-fit flex flex-row bottom-[14.6%] right-[14.6%] absolute translate-x-[50%] translate-y-[50%]\">\n        {checkSlot}\n      </div>\n    </>,\n    `h-fit w-fit flex flex-row relative ${className}`,\n  );\nexport type AvatarToggleCheckType = {\n  className?: string;\n  avatarToggleProps?: AvatarToggleStyleProps;\n};\n\nexport const avatarToggleCheckClass = ({ className, avatarToggleProps }: AvatarToggleCheckType) => {\n  const rootClass = tv({\n    base: \"group/avatarToggleCheck group-data-[selected]/avatarToggle:bg-success-500 rounded-[50px] group-data-[selected]/avatarToggle:[opacity:unset] group-data-[disabled]/avatarToggle:group-data-[selected]/avatarToggle:bg-base-50 opacity-[0]\",\n    variants: {\n      size: {\n        sm: \"group-data-[selected]/avatarToggle:shadow-cut-in-elevated-sm\",\n        md: \"group-data-[selected]/avatarToggle:shadow-cut-in-elevated-sm\",\n        lg: \"group-data-[selected]/avatarToggle:shadow-cut-in-elevated-lg\",\n        xl: \"group-data-[selected]/avatarToggle:shadow-cut-in-elevated-lg\",\n      },\n    },\n\n    defaultVariants: { size: avatarToggleDefaults.size },\n  });\n  return rootClass({\n    class: className,\n    size: avatarToggleProps?.size,\n  });\n};\n\nexport const avatarToggleCheckIconClass = ({ className, avatarToggleProps }: AvatarToggleCheckType) => {\n  const iconClass = tv({\n    base: \"text-white group-data-[disabled]/avatarToggle:text-primary-400\",\n    variants: { size: { sm: \"w-[14px] h-[14px]\", md: \"w-[14px] h-[14px]\", lg: \"w-5 h-5\", xl: \"w-6 h-6\" } },\n\n    defaultVariants: { size: avatarToggleDefaults.size },\n  });\n  return iconClass({\n    class: className,\n\n    size: avatarToggleProps?.size,\n  });\n};\n\nexport const AvatarToggleCheckLayout = ({\n  renderRoot,\n  styleProps: { className, avatarToggleProps },\n  iconSlot,\n}: {\n  renderRoot: RenderRoot;\n  styleProps: AvatarToggleCheckType;\n  iconSlot: React.ReactNode;\n}) =>\n  renderRoot(\n    <>{iconSlot}</>,\n    tv({\n      base: \"flex flex-row justify-center items-center\",\n      variants: { size: { sm: \"h-5 w-5\", md: \"h-5 w-5\", lg: \"h-7 w-7\", xl: \"h-9 w-9\" } },\n\n      defaultVariants: { size: avatarToggleDefaults.size },\n    })({\n      class: className,\n      size: avatarToggleProps?.size,\n    }),\n  );\n\nexport type AvatarToggleContentType = {\n  className?: string;\n  avatarToggleProps?: AvatarToggleStyleProps;\n};\n\nexport const avatarToggleContentClass = ({ className }: AvatarToggleContentType) => {\n  return `\n  group/avatarToggleContent\n  bg-base-100\n  group-data-[pressed]/avatarToggle:bg-base-100\n  group-data-[disabled]/avatarToggle:bg-base-100\n  rounded-[50px]\n  transition-all\n  group-data-[selected]/avatarToggle:shadow-[0px_0px_0px_2px_#8ee101]\n  group-hover/avatarToggle:bg-base-200\n  group-data-[focus-visible]/avatarToggle:bg-base-200\n  group-data-[focus-visible]/avatarToggle:shadow-focus-ring\n  group-data-[disabled]/avatarToggle:group-data-[selected]/avatarToggle:shadow-[0px_0px_0px_2px_#d4d4d8]\n  group-data-[focus-visible]/avatarToggle:group-data-[selected]/avatarToggle:shadow-focus-ring\n  ${className}\n  `;\n};\n\nexport const avatarToggleContentImageClass = ({ className, avatarToggleProps }: AvatarToggleContentType) => {\n  const imageClass = tv({\n    base: \"rounded-[50px] transition-all group-data-[pressed]/avatarToggle:[opacity:unset] group-hover/avatarToggle:opacity-[0.8] group-data-[focus-visible]/avatarToggle:opacity-[0.8] group-data-[disabled]/avatarToggle:opacity-[0.6]\",\n    variants: { size: { sm: \"w-10 h-10\", md: \"w-13 h-13\", lg: \"w-[64px] h-[64px]\", xl: \"w-[92px] h-[92px]\" } },\n\n    defaultVariants: { size: avatarToggleDefaults.size },\n  });\n  return imageClass({\n    class: className,\n\n    size: avatarToggleProps?.size,\n  });\n};\n\nexport const avatarToggleContentLabelClass = ({ className, avatarToggleProps }: AvatarToggleContentType) => {\n  const labelClass = tv({\n    base: \"text-base-600 font-medium group-data-[disabled]/avatarToggle:text-base-400\",\n    variants: {\n      size: {\n        sm: \"text-sm font-text\",\n        md: \"text-lg font-text\",\n        lg: \"text-xl font-display\",\n        xl: \"text-3xl font-display\",\n      },\n    },\n\n    defaultVariants: { size: avatarToggleDefaults.size },\n  });\n  return labelClass({\n    class: className,\n\n    size: avatarToggleProps?.size,\n  });\n};\n\nexport const avatarToggleContentIconClass = ({ className, avatarToggleProps }: AvatarToggleContentType) => {\n  const iconClass = tv({\n    base: \"text-base-600 group-data-[disabled]/avatarToggle:text-base-400\",\n    variants: { size: { sm: \"w-5 h-5\", md: \"w-7 h-7\", lg: \"w-9 h-9\", xl: \"w-13 h-13\" } },\n\n    defaultVariants: { size: avatarToggleDefaults.size },\n  });\n  return iconClass({\n    class: className,\n\n    size: avatarToggleProps?.size,\n  });\n};\n\nexport const AvatarToggleContentLayout = ({\n  renderRoot,\n  styleProps: { className, avatarToggleProps },\n  imageSlot,\n  labelSlot,\n}: {\n  renderRoot: RenderRoot;\n  styleProps: AvatarToggleContentType;\n  imageSlot: React.ReactNode;\n  labelSlot: React.ReactNode;\n}) =>\n  renderRoot(\n    <>\n      {imageSlot}\n      {labelSlot}\n    </>,\n    tv({\n      base: \"flex flex-row justify-center items-center\",\n      variants: { size: { sm: \"h-10 w-10\", md: \"h-13 w-13\", lg: \"h-[64px] w-[64px]\", xl: \"h-[92px] w-[92px]\" } },\n\n      defaultVariants: { size: avatarToggleDefaults.size },\n    })({\n      class: className,\n      size: avatarToggleProps?.size,\n    }),\n  );\nexport const AvatarToggleContentWithIconLayout = ({\n  renderRoot,\n  styleProps: { className, avatarToggleProps },\n  imageSlot,\n  iconSlot,\n}: {\n  renderRoot: RenderRoot;\n  styleProps: AvatarToggleContentType;\n  imageSlot: React.ReactNode;\n  iconSlot: React.ReactNode;\n}) =>\n  renderRoot(\n    <>\n      {imageSlot}\n      {iconSlot}\n    </>,\n    tv({\n      base: \"flex flex-row justify-center items-center\",\n      variants: { size: { sm: \"h-10 w-10\", md: \"h-13 w-13\", lg: \"h-[64px] w-[64px]\", xl: \"h-[92px] w-[92px]\" } },\n\n      defaultVariants: { size: avatarToggleDefaults.size },\n    })({\n      class: className,\n      size: avatarToggleProps?.size,\n    }),\n  );\n\n",
        "target": "underatom/components/radix/avatar-toggle/avatar-toggle.tsx"
      }
    ]
  },
  {
    "name": "radio-group",
    "type": "registry:ui",
    "relativePath": "radix/radio-group",
    "stylingName": "radio-group.tsx",
    "dependencies": [
      "@radix-ui/react-radio-group",
      "react-aria"
    ],
    "files": [
      {
        "type": "registry:ui",
        "path": "ui/radix/radio-group/RadioGroup.atoms.tsx",
        "content": "import { RadioGroupLayout, RadioGroupRadioButtonLayout, RadioGroupRadioLayout } from \"./radio-group\";\nimport {\n  URadioGroupAsterisk,\n  URadioGroupDescription,\n  URadioGroupLabel,\n  URadioGroupRadioButtonIndicator,\n  URadioGroupRadioButtonRoot,\n  URadioGroupRadioButtonRootProps,\n  URadioGroupRadioDescription,\n  URadioGroupRadioLabel,\n  URadioGroupRadioRoot,\n  URadioGroupRadioRootProps,\n  URadioGroupRoot,\n  URadioGroupRootProps,\n  useRadioGroupInternalProvider,\n} from \"./RadioGroup.underatoms\";\n\n/*\n  ====================================\n  RadioGroup\n  ====================================\n*/\n\nexport type RadioGroupProps = URadioGroupRootProps & {\n  label: string;\n  description: string;\n  radioGroupRadioSlots: React.ReactNode[];\n};\nexport const RadioGroup = ({ radioGroupRadioSlots, label, description, ...props }: RadioGroupProps) => {\n  return (\n    <RadioGroupLayout\n      renderRoot={(children, className) => (\n        <URadioGroupRoot {...props} className={className}>\n          {children}\n        </URadioGroupRoot>\n      )}\n      styleProps={{ className: props.className, radioGroupProps: props }}\n      labelSlot={<URadioGroupLabel>{label}</URadioGroupLabel>}\n      descriptionSlot={<URadioGroupDescription>{description}</URadioGroupDescription>}\n      asteriskSlot={<URadioGroupAsterisk />}\n      radioSlots={radioGroupRadioSlots}\n    />\n  );\n};\n\n/*\n  ====================================\n  RadioGroupRadio\n  ====================================\n*/\n\nexport type RadioGroupRadioProps = Omit<URadioGroupRadioRootProps, \"children\"> & {\n  label?: string;\n  description?: string;\n};\nexport const RadioGroupRadio = ({ label, description, ...props }: RadioGroupRadioProps) => {\n  const radioGroupProps = useRadioGroupInternalProvider();\n  return (\n    <RadioGroupRadioLayout\n      renderRoot={(children, className) => (\n        <URadioGroupRadioRoot {...props} className={className}>\n          {children}\n        </URadioGroupRadioRoot>\n      )}\n      styleProps={{ className: props.className, radioGroupProps }}\n      buttonSlot={<RadioGroupRadioButton />}\n      labelSlot={<URadioGroupRadioLabel>{label}</URadioGroupRadioLabel>}\n      descriptionSlot={<URadioGroupRadioDescription>{description}</URadioGroupRadioDescription>}\n    />\n  );\n};\n\n/*\n  ====================================\n  RadioGroupRadioButton\n  ====================================\n*/\n\nexport type RadioGroupRadioButtonProps = Omit<URadioGroupRadioButtonRootProps, \"children\">;\nexport const RadioGroupRadioButton = (props: RadioGroupRadioButtonProps) => {\n  const radioGroupProps = useRadioGroupInternalProvider();\n  return (\n    <RadioGroupRadioButtonLayout\n      renderRoot={(children, className) => (\n        <URadioGroupRadioButtonRoot {...props} className={className + props}>\n          {children}\n        </URadioGroupRadioButtonRoot>\n      )}\n      styleProps={{ className: props.className, radioGroupProps }}\n      indicatorSlot={<URadioGroupRadioButtonIndicator />}\n    />\n  );\n};\n",
        "target": "underatom/components/radix/radio-group/RadioGroup.atoms.tsx"
      },
      {
        "type": "registry:ui",
        "path": "ui/radix/radio-group/RadioGroup.underatoms.tsx",
        "content": "import * as RadioGroup from \"@radix-ui/react-radio-group\";\nimport { ReactNode, useId } from \"react\";\nimport { mergeProps, useFocusRing } from \"react-aria\";\nimport {\n  RadioGroupStyleProps,\n  radioGroupClass,\n  radioGroupLabelClass,\n  radioGroupDescriptionClass,\n  radioGroupAsteriskClass,\n  radioGroupRadioLabelClass,\n  radioGroupRadioDescriptionClass,\n  radioGroupRadioClass,\n  radioGroupRadioButtonClass,\n  radioGroupRadioButtonIndicatorClass,\n} from \"./radio-group\";\nimport { getGenericContext } from \"../../../utils/utils\";\n\n/*\n  ====================================\n  RadioGroup\n  ====================================\n*/\n\nexport const { Provider: RadioGroupInternalProvider, useComponentContext: useRadioGroupInternalProvider } =\n  getGenericContext<URadioGroupRootProps>(\"RadioGroupInternalProvider\");\n\nexport type URadioGroupRootProps = RadioGroup.RadioGroupProps &\n  RadioGroupStyleProps & {\n    className?: string;\n    invalid?: boolean;\n    required?: boolean;\n  };\nexport const URadioGroupRoot = (props: URadioGroupRootProps) => {\n  return (\n    <RadioGroup.Root\n      {...props}\n      data-required={!!props.required}\n      data-invalid={!!props.invalid}\n      className={radioGroupClass({ className: props.className, radioGroupProps: props })}\n    >\n      <RadioGroupInternalProvider value={props}>{props.children}</RadioGroupInternalProvider>\n    </RadioGroup.Root>\n  );\n};\n\nexport type URadioGroupLabelProps = {\n  /** Text content for label */\n  children: ReactNode;\n  className?: string;\n};\nexport const URadioGroupLabel = (props: URadioGroupLabelProps) => {\n  const radioGroupProps = useRadioGroupInternalProvider();\n  return <label {...props} className={radioGroupLabelClass({ className: props.className, radioGroupProps })} />;\n};\n\nexport type URadioGroupDescriptionProps = {\n  /** Text content for description */\n  children: ReactNode;\n  className?: string;\n};\nexport const URadioGroupDescription = (props: URadioGroupDescriptionProps) => {\n  const radioGroupProps = useRadioGroupInternalProvider();\n  return <span {...props} className={radioGroupDescriptionClass({ className: props.className, radioGroupProps })} />;\n};\n\nexport type URadioGroupAsteriskProps = {\n  className?: string;\n};\nexport const URadioGroupAsterisk = (props: URadioGroupAsteriskProps) => {\n  const radioGroupProps = useRadioGroupInternalProvider();\n  return <span className={radioGroupAsteriskClass({ className: props.className, radioGroupProps })}>*</span>;\n};\n\n/*\n  ====================================\n  RadioGroupRadio\n  ====================================\n*/\n\nconst { Provider: RadioGroupRadioInternalProvider, useComponentContext: useRadioGroupRadioInternalContext } =\n  getGenericContext<URadioGroupRadioRootProps & { id: string }>(\"RadioGroupRadioInternalContext\");\n\nexport type URadioGroupRadioRootProps = RadioGroup.RadioGroupItemProps & {\n  invalid?: boolean;\n};\nexport const URadioGroupRadioRoot = ({\n  disabled: radioDisabled,\n  invalid: radioInvalid,\n  ...props\n}: URadioGroupRadioRootProps) => {\n  const { disabled: parentDisabled, invalid: parentInvalid, ...radioGroupProps } = useRadioGroupInternalProvider();\n  const disabled = radioDisabled || parentDisabled;\n  const invalid = radioInvalid || parentInvalid;\n  const fullProps = { disabled, invalid, ...props };\n  const generatedId = useId();\n  const { focusProps, isFocusVisible } = useFocusRing();\n\n  return (\n    <RadioGroup.Item\n      {...mergeProps(fullProps, focusProps)}\n      className={radioGroupRadioClass({ className: props.className, radioGroupProps })}\n      data-invalid={!!invalid}\n      data-ring={isFocusVisible}\n    >\n      <RadioGroupRadioInternalProvider value={{ id: generatedId, ...fullProps }}>\n        {props.children}\n      </RadioGroupRadioInternalProvider>\n    </RadioGroup.Item>\n  );\n};\n\nexport type URadioGroupRadioDescriptionProps = {\n  /** Text content for description */\n  children: ReactNode;\n  className?: string;\n};\nexport const URadioGroupRadioDescription = (props: URadioGroupRadioDescriptionProps) => {\n  const radioGroupProps = useRadioGroupInternalProvider();\n  return (\n    <span {...props} className={radioGroupRadioDescriptionClass({ className: props.className, radioGroupProps })} />\n  );\n};\n\nexport type URadioGroupRadioLabelProps = {\n  /** Text content for label */\n  children: ReactNode;\n  className?: string;\n};\nexport const URadioGroupRadioLabel = (props: URadioGroupRadioLabelProps) => {\n  const radioGroupProps = useRadioGroupInternalProvider();\n  const { id } = useRadioGroupRadioInternalContext();\n  return (\n    <label\n      {...props}\n      htmlFor={id}\n      className={radioGroupRadioLabelClass({ className: props.className, radioGroupProps })}\n    />\n  );\n};\n\n/*\n  ====================================\n  RadioGroupRadioButton\n  ====================================\n*/\n\nexport type URadioGroupRadioButtonRootProps = {\n  children: ReactNode;\n  className?: string;\n};\nexport const URadioGroupRadioButtonRoot = (props: URadioGroupRadioButtonRootProps) => {\n  const { disabled } = useRadioGroupRadioInternalContext();\n  const radioGroupProps = useRadioGroupInternalProvider();\n  const fullProps = { disabled, ...props };\n\n  return <div {...fullProps} className={radioGroupRadioButtonClass({ className: props.className, radioGroupProps })} />;\n};\n\nexport type URadioGroupRadioButtonIndicatorProps = {\n  className?: string;\n};\nexport const URadioGroupRadioButtonIndicator = (props: URadioGroupRadioButtonIndicatorProps) => {\n  const radioGroupProps = useRadioGroupInternalProvider();\n  return (\n    <RadioGroup.Indicator\n      className={radioGroupRadioButtonIndicatorClass({ className: props.className, radioGroupProps })}\n    />\n  );\n};\n",
        "target": "underatom/components/radix/radio-group/RadioGroup.underatoms.tsx"
      },
      {
        "type": "registry:ui",
        "path": "ui/radix/radio-group/radio-group.tsx",
        "content": "import { tv } from \"../../../utils/extendedTV\";\nimport type { RenderRoot } from \"../../../utils/utils\";\n\n/*\n  ====================================\n  RadioGroup\n  ====================================\n*/\n\nexport type RadioGroupStyleProps = {\n  size?: \"sm\" | \"md\" | \"lg\";\n};\n\nexport type RadioGroupType = {\n  className?: string;\n  radioGroupProps?: RadioGroupStyleProps;\n};\n\nexport const radioGroupDefaults: Required<RadioGroupStyleProps> = {\n  size: \"md\",\n};\n\nexport const radioGroupClass = ({ className }: RadioGroupType) => {\n  return `group/radioGroup  ${className}`;\n};\n\nexport const radioGroupLabelClass = ({ className }: RadioGroupType) => {\n  return `text-base-900 text-sm font-text font-medium group-data-[disabled]/radioGroup:text-base-400 ${className}`;\n};\n\nexport const radioGroupDescriptionClass = ({ className }: RadioGroupType) => {\n  return `text-base-700 text-sm font-text font-normal group-data-[invalid=true]/radioGroup:text-danger-500 group-data-[disabled]/radioGroup:text-base-400 group-data-[invalid=true]/radioGroup:group-data-[disabled]/radioGroup:text-base-400 ${className}`;\n};\n\nexport const radioGroupAsteriskClass = ({ className }: RadioGroupType) => {\n  return `\n  group-data-[required=true]/radioGroup:[display:unset]\n  group-data-[required=true]/radioGroup:text-danger-500\n  group-data-[required=true]/radioGroup:text-xs\n  group-data-[required=true]/radioGroup:font-text\n  group-data-[required=true]/radioGroup:font-medium\n  group-data-[required=true]/radioGroup:group-data-[disabled]/radioGroup:text-base-400\n  hidden\n  ${className}\n  `;\n};\n\nexport const RadioGroupLayout = ({\n  renderRoot,\n  styleProps: { className },\n  labelSlot,\n  asteriskSlot,\n  descriptionSlot,\n  radioSlots,\n}: {\n  renderRoot: RenderRoot;\n  styleProps: RadioGroupType;\n  labelSlot: React.ReactNode;\n  asteriskSlot: React.ReactNode;\n  descriptionSlot: React.ReactNode;\n  radioSlots: React.ReactNode;\n}) =>\n  renderRoot(\n    <>\n      <div className=\"h-fit w-fit flex flex-col [&>*:not(:first-child)]:[margin-top:-4px]\">\n        <div className=\"h-fit w-full flex flex-row gap-[2px]\">\n          {labelSlot}\n          {asteriskSlot}\n        </div>\n        {descriptionSlot}\n      </div>\n      <div className=\"h-fit w-fit flex flex-col gap-1\">{radioSlots}</div>\n    </>,\n    `h-fit w-fit flex flex-col gap-3 ${className}`,\n  );\nexport type RadioGroupRadioType = {\n  className?: string;\n  radioGroupProps?: RadioGroupStyleProps;\n};\n\nexport const radioGroupRadioClass = ({ className }: RadioGroupRadioType) => {\n  return `group/radioGroupRadio  ${className}`;\n};\n\nexport const radioGroupRadioLabelClass = ({ className }: RadioGroupRadioType) => {\n  return `text-base-950 text-sm font-text font-medium group-data-[disabled]/radioGroup:text-base-400 group-data-[disabled]/radioGroupRadio:text-base-400 ${className}`;\n};\n\nexport const radioGroupRadioDescriptionClass = ({ className }: RadioGroupRadioType) => {\n  return `\n  text-base-700\n  text-sm\n  font-text\n  font-normal\n  group-data-[invalid=true]/radioGroupRadio:text-danger-500\n  group-data-[invalid=true]/radioGroup:text-danger-500\n  group-data-[disabled]/radioGroup:text-base-400\n  group-data-[disabled]/radioGroupRadio:text-base-400\n  group-data-[disabled]/radioGroup:group-data-[invalid=true]/radioGroupRadio:text-base-400\n  group-data-[invalid=true]/radioGroupRadio:group-data-[disabled]/radioGroupRadio:text-base-400\n  group-data-[invalid=true]/radioGroup:group-data-[disabled]/radioGroup:text-base-400\n  group-data-[invalid=true]/radioGroup:group-data-[disabled]/radioGroupRadio:text-base-400\n  ${className}\n  `;\n};\n\nexport const RadioGroupRadioLayout = ({\n  renderRoot,\n  styleProps: { className },\n  buttonSlot,\n  labelSlot,\n  descriptionSlot,\n}: {\n  renderRoot: RenderRoot;\n  styleProps: RadioGroupRadioType;\n  buttonSlot: React.ReactNode;\n  labelSlot: React.ReactNode;\n  descriptionSlot: React.ReactNode;\n}) =>\n  renderRoot(\n    <>\n      <div className=\"h-fit w-fit flex flex-row items-center gap-[10px]\">\n        {buttonSlot}\n        {labelSlot}\n      </div>\n      <div className=\"h-fit w-fit flex flex-col pl-7\">{descriptionSlot}</div>\n    </>,\n    `h-fit w-fit flex flex-col [&>*:not(:first-child)]:[margin-top:-4px] ${className}`,\n  );\n\nexport type RadioGroupRadioButtonType = {\n  className?: string;\n  radioGroupProps?: RadioGroupStyleProps;\n};\n\nexport const radioGroupRadioButtonClass = ({ className }: RadioGroupRadioButtonType) => {\n  return `\n  group/radioGroupRadioButton\n  border-solid\n  group-data-[disabled]/radioGroupRadio:border-solid\n  group-data-[disabled]/radioGroup:border-solid\n  border-primary-950\n  border-1\n  group-data-[disabled]/radioGroupRadio:border-1\n  group-data-[disabled]/radioGroup:border-1\n  bg-base-50\n  group-active/radioGroupRadio:bg-base-50\n  rounded-[50px]\n  group-data-[disabled]/radioGroupRadio:rounded-[50px]\n  group-data-[disabled]/radioGroup:rounded-[50px]\n  transition-all\n  group-hover/radioGroupRadio:bg-base-100\n  group-data-[ring=true]/radioGroupRadio:bg-base-100\n  group-data-[ring=true]/radioGroupRadio:shadow-focus-ring\n  group-data-[disabled]/radioGroupRadio:border-base-200\n  group-data-[disabled]/radioGroup:border-base-200\n  group-data-[disabled]/radioGroupRadio:bg-primary-50\n  group-data-[disabled]/radioGroup:bg-primary-50\n  group-data-[invalid=true]/radioGroupRadio:border-danger-500\n  group-data-[invalid=true]/radioGroup:border-danger-500\n  group-data-[invalid=true]/radioGroupRadio:bg-danger-50\n  group-data-[invalid=true]/radioGroupRadio:group-active/radioGroupRadio:bg-danger-50\n  group-data-[invalid=true]/radioGroup:bg-danger-50\n  group-data-[invalid=true]/radioGroup:group-active/radioGroupRadio:bg-danger-50\n  group-data-[invalid=true]/radioGroupRadio:group-hover/radioGroupRadio:bg-danger-100\n  group-data-[invalid=true]/radioGroupRadio:group-data-[ring=true]/radioGroupRadio:bg-danger-100\n  group-data-[invalid=true]/radioGroup:group-hover/radioGroupRadio:bg-danger-100\n  group-data-[invalid=true]/radioGroup:group-data-[ring=true]/radioGroupRadio:bg-danger-100\n  group-data-[state=checked]/radioGroupRadio:[border:unset]\n  group-data-[disabled]/radioGroupRadio:group-data-[state=checked]/radioGroupRadio:[border:unset]\n  group-data-[disabled]/radioGroup:group-data-[state=checked]/radioGroupRadio:[border:unset]\n  group-data-[state=checked]/radioGroupRadio:bg-primary-950\n  group-active/radioGroupRadio:group-data-[state=checked]/radioGroupRadio:bg-primary-950\n  group-hover/radioGroupRadio:group-data-[state=checked]/radioGroupRadio:bg-primary-800\n  group-data-[ring=true]/radioGroupRadio:group-data-[state=checked]/radioGroupRadio:bg-primary-800\n  group-data-[disabled]/radioGroupRadio:group-data-[state=checked]/radioGroupRadio:bg-base-200\n  group-data-[disabled]/radioGroup:group-data-[state=checked]/radioGroupRadio:bg-base-200\n  group-data-[invalid=true]/radioGroupRadio:group-data-[state=checked]/radioGroupRadio:bg-danger-500\n  group-data-[invalid=true]/radioGroup:group-data-[state=checked]/radioGroupRadio:bg-danger-500\n  group-data-[disabled]/radioGroup:group-data-[ring=true]/radioGroupRadio:shadow-none\n  group-data-[invalid=true]/radioGroupRadio:group-active/radioGroupRadio:group-data-[state=checked]/radioGroupRadio:bg-danger-500\n  group-data-[invalid=true]/radioGroupRadio:group-hover/radioGroupRadio:group-data-[state=checked]/radioGroupRadio:bg-danger-500\n  group-data-[invalid=true]/radioGroupRadio:group-data-[ring=true]/radioGroupRadio:group-data-[state=checked]/radioGroupRadio:bg-danger-500\n  group-data-[invalid=true]/radioGroup:group-active/radioGroupRadio:group-data-[state=checked]/radioGroupRadio:bg-danger-500\n  group-data-[invalid=true]/radioGroup:group-hover/radioGroupRadio:group-data-[state=checked]/radioGroupRadio:bg-danger-500\n  group-data-[invalid=true]/radioGroup:group-data-[ring=true]/radioGroupRadio:group-data-[state=checked]/radioGroupRadio:bg-danger-500\n  group-data-[disabled]/radioGroup:group-hover/radioGroupRadio:group-data-[state=checked]/radioGroupRadio:bg-base-200\n  group-data-[disabled]/radioGroup:group-active/radioGroupRadio:group-data-[state=checked]/radioGroupRadio:bg-base-200\n  group-data-[disabled]/radioGroup:group-data-[ring=true]/radioGroupRadio:group-data-[state=checked]/radioGroupRadio:bg-base-200\n  group-data-[disabled]/radioGroup:group-hover/radioGroupRadio:bg-primary-50\n  group-data-[disabled]/radioGroup:group-active/radioGroupRadio:bg-primary-50\n  group-data-[disabled]/radioGroup:group-data-[ring=true]/radioGroupRadio:bg-primary-50\n  ${className}\n  `;\n};\n\nexport const radioGroupRadioButtonIndicatorClass = ({ className }: RadioGroupRadioButtonType) => {\n  return `\n  hidden\n  group-data-[state=checked]/radioGroupRadio:[display:unset]\n  group-data-[state=checked]/radioGroupRadio:w-[6px]\n  group-data-[state=checked]/radioGroupRadio:h-[6px]\n  group-data-[state=checked]/radioGroupRadio:bg-white\n  group-data-[state=checked]/radioGroupRadio:rounded-[50px]\n  group-data-[state=checked]/radioGroupRadio:transition-all\n  ${className}\n  `;\n};\n\nexport const RadioGroupRadioButtonLayout = ({\n  renderRoot,\n  styleProps: { className },\n  indicatorSlot,\n}: {\n  renderRoot: RenderRoot;\n  styleProps: RadioGroupRadioButtonType;\n  indicatorSlot: React.ReactNode;\n}) => renderRoot(<>{indicatorSlot}</>, `h-[14px] w-[14px] flex flex-row justify-center items-center ${className}`);\n\n",
        "target": "underatom/components/radix/radio-group/radio-group.tsx"
      }
    ]
  },
  {
    "name": "select-panel",
    "type": "registry:ui",
    "relativePath": "radix/select-panel",
    "stylingName": "select-panel.tsx",
    "dependencies": [
      "@radix-ui/react-select",
      "@radix-ui/react-avatar"
    ],
    "files": [
      {
        "type": "registry:ui",
        "path": "ui/radix/select-panel/SelectPanel.atoms.tsx",
        "content": "import { AvatarImageProps } from \"@radix-ui/react-avatar\";\nimport {\n  SelectPanelGroupItemBoxAvatarLayout,\n  SelectPanelGroupItemBoxAvatarWithIconLayout,\n  SelectPanelGroupItemBoxBadgeLayout,\n  SelectPanelGroupItemBoxBadgeWithIconLayout,\n  SelectPanelGroupItemBoxDotStyleProps,\n  SelectPanelGroupItemBoxIconBoxLayout,\n  SelectPanelGroupItemBoxLayout,\n  SelectPanelGroupItemBoxWithAvatarAndDescriptionLayout,\n  SelectPanelGroupItemBoxWithAvatarLayout,\n  SelectPanelGroupItemBoxWithDescriptionLayout,\n  SelectPanelGroupItemBoxWithDotLayout,\n  SelectPanelGroupItemLayout,\n  SelectPanelGroupLayout,\n  SelectPanelLayout,\n} from \"./select-panel\";\nimport {\n  USelectPanelGroupItemBoxAvatarFallback,\n  USelectPanelGroupItemBoxAvatarIcon,\n  USelectPanelGroupItemBoxAvatarImage,\n  USelectPanelGroupItemBoxAvatarLabel,\n  USelectPanelGroupItemBoxAvatarRoot,\n  USelectPanelGroupItemBoxAvatarRootProps,\n  USelectPanelGroupItemBoxBadgeIcon,\n  USelectPanelGroupItemBoxBadgeLabel,\n  USelectPanelGroupItemBoxBadgeRoot,\n  USelectPanelGroupItemBoxBadgeRootProps,\n  USelectPanelGroupItemBoxDot,\n  USelectPanelGroupItemBoxIconBoxRootProps,\n  USelectPanelGroupItemBoxIconBoxRoot,\n  USelectPanelGroupItemBoxIconBoxIcon,\n  USelectPanelGroupItemBoxLabel,\n  USelectPanelGroupItemBoxRoot,\n  USelectPanelGroupItemBoxRootProps,\n  USelectPanelGroupItemCheckIcon,\n  USelectPanelGroupItemRoot,\n  USelectPanelGroupItemRootProps,\n  USelectPanelGroupRoot,\n  USelectPanelGroupRootProps,\n  USelectPanelRoot,\n  USelectPanelRootProps,\n  USelectPanelViewport,\n  USelectPanelGroupItemBoxSupporting,\n  USelectPanelGroupItemBoxDescription,\n  USelectPanelGroupTitle,\n  useSelectPanelInternalProvider,\n} from \"./SelectPanel.underatoms\";\nimport { ReactNode, forwardRef } from \"react\";\n\n/*\n  ====================================\n  SelectPanel\n  ====================================\n*/\n\nexport type SelectPanelProps = USelectPanelRootProps & {\n  groupSlots: ReactNode[];\n};\nexport const SelectPanel = forwardRef<HTMLDivElement, SelectPanelProps>(({ groupSlots, ...props }, forwardedRef) => (\n  <SelectPanelLayout\n    renderRoot={(children, className) => (\n      <USelectPanelRoot ref={forwardedRef} {...props} className={className}>\n        <USelectPanelViewport>{children}</USelectPanelViewport>\n      </USelectPanelRoot>\n    )}\n    styleProps={{ className: props.className, selectPanelProps: props }}\n    searchSlot={null}\n    groupSlots={groupSlots}\n  />\n));\n\n/*\n  ====================================\n  SelectPanelGroup\n  ====================================\n*/\n\nexport type SelectPanelGroup = USelectPanelGroupRootProps & {\n  title?: string;\n  itemSlots: ReactNode[];\n};\nexport const SelectPanelGroup = forwardRef<HTMLDivElement, SelectPanelGroup>(\n  ({ title, itemSlots, ...props }, forwardedRef) => {\n    const selectPanelProps = useSelectPanelInternalProvider();\n    return (\n      <SelectPanelGroupLayout\n        renderRoot={(children, className) => (\n          <USelectPanelGroupRoot ref={forwardedRef} {...props} className={className}>\n            {children}\n          </USelectPanelGroupRoot>\n        )}\n        styleProps={{ className: props.className, selectPanelProps }}\n        titleSlot={title && <USelectPanelGroupTitle>{title}</USelectPanelGroupTitle>}\n        itemSlots={itemSlots}\n      />\n    );\n  },\n);\n\n/*\n  ====================================\n  SelectPanelSearch\n  ====================================\n*/\n\n// export type SelectPanelSearchProps = USelectPanelSearchRootProps & {\n//   icon?: (className: string) => React.ReactNode;\n// };\n// export const SelectPanelSearch = ({ icon, ...props }: SelectPanelSearchProps) => (\n//   <SelectPanelSearchLayout\n//     renderRoot={(children, className) => (\n//       <USelectPanelSearchRoot {...props} className={className}>\n//         {children}\n//       </USelectPanelSearchRoot>\n//     )}\n//     iconSlot={icon && <USelectPanelSearchIcon>{icon}</USelectPanelSearchIcon>}\n//     textSlot={<USelectPanelSearchText />}\n//   />\n// );\n\n/*\n  ====================================\n  SelectPanelGroupItem\n  ====================================\n*/\n\nexport type SelectPanelGroupItemProps = USelectPanelGroupItemRootProps & {\n  hasCaret?: boolean;\n  boxSlot?: ReactNode;\n};\nexport const SelectPanelGroupItem = forwardRef<HTMLDivElement, SelectPanelGroupItemProps>(\n  ({ hasCaret, boxSlot, ...props }, ref) => {\n    const selectPanelProps = useSelectPanelInternalProvider();\n    return (\n      <SelectPanelGroupItemLayout\n        renderRoot={(children, className) => (\n          <USelectPanelGroupItemRoot ref={ref} {...props} className={className}>\n            {children}\n          </USelectPanelGroupItemRoot>\n        )}\n        styleProps={{ className: props.className, selectPanelProps }}\n        checkIconSlot={<USelectPanelGroupItemCheckIcon />}\n        boxSlot={boxSlot}\n      />\n    );\n  },\n);\n\n/*\n  ====================================\n  SelectPanelGroupItemBox\n  ====================================\n*/\n\nexport type SelectPanelGroupItemBoxProps = USelectPanelGroupItemBoxRootProps & {\n  label?: string;\n  badgeSlot?: React.ReactNode;\n  iconBoxSlot?: React.ReactNode;\n};\nexport const SelectPanelGroupItemBox = ({ label, badgeSlot, iconBoxSlot, ...props }: SelectPanelGroupItemBoxProps) => {\n  const selectPanelProps = useSelectPanelInternalProvider();\n  return (\n    <SelectPanelGroupItemBoxLayout\n      renderRoot={(children, className) => (\n        <USelectPanelGroupItemBoxRoot {...props} className={className}>\n          {children}\n        </USelectPanelGroupItemBoxRoot>\n      )}\n      styleProps={{ className: props.className, selectPanelProps }}\n      iconBoxSlot={iconBoxSlot}\n      labelSlot={label && <USelectPanelGroupItemBoxLabel>{label}</USelectPanelGroupItemBoxLabel>}\n      badgeSlot={badgeSlot}\n    />\n  );\n};\n\nexport type SelectPanelGroupItemBoxWithAvatarProps = Omit<USelectPanelGroupItemBoxRootProps, \"children\"> & {\n  badgeSlot?: ReactNode;\n  label?: string;\n  avatarSlot: React.ReactNode;\n};\nexport const SelectPanelGroupItemBoxWithAvatar = ({\n  label,\n  avatarSlot,\n  badgeSlot,\n  ...props\n}: SelectPanelGroupItemBoxWithAvatarProps) => {\n  const selectPanelProps = useSelectPanelInternalProvider();\n  return (\n    <SelectPanelGroupItemBoxWithAvatarLayout\n      renderRoot={(children, className) => (\n        <USelectPanelGroupItemBoxRoot {...props} className={className}>\n          {children}\n        </USelectPanelGroupItemBoxRoot>\n      )}\n      styleProps={{ className: props.className, selectPanelProps }}\n      avatarSlot={avatarSlot}\n      labelSlot={label && <USelectPanelGroupItemBoxLabel>{label}</USelectPanelGroupItemBoxLabel>}\n      badgeSlot={badgeSlot}\n    />\n  );\n};\n\nexport type SelectPanelGroupItemBoxWithDotProps = USelectPanelGroupItemBoxRootProps & {\n  dotColor?: SelectPanelGroupItemBoxDotStyleProps[\"color\"];\n  label: string;\n  badgeSlot?: ReactNode;\n};\nexport const SelectPanelGroupItemBoxWithDot = ({\n  dotColor,\n  label,\n  badgeSlot,\n  ...props\n}: SelectPanelGroupItemBoxWithDotProps) => {\n  const selectPanelProps = useSelectPanelInternalProvider();\n  return (\n    <SelectPanelGroupItemBoxWithDotLayout\n      renderRoot={(children, className) => (\n        <USelectPanelGroupItemBoxRoot {...props} className={className}>\n          {children}\n        </USelectPanelGroupItemBoxRoot>\n      )}\n      styleProps={{ className: props.className, selectPanelProps }}\n      dotSlot={<USelectPanelGroupItemBoxDot color={dotColor} />}\n      labelSlot={<USelectPanelGroupItemBoxLabel>{label}</USelectPanelGroupItemBoxLabel>}\n      badgeSlot={badgeSlot}\n    />\n  );\n};\n\nexport type SelectPanelGroupItemBoxWithDescriptionProps = USelectPanelGroupItemBoxRootProps & {\n  label?: string;\n  description?: string;\n  supportingText?: string;\n  iconBoxSlot?: ReactNode;\n  badgeSlot?: ReactNode;\n};\nexport const SelectPanelGroupItemBoxWithDescription = ({\n  label,\n  description,\n  supportingText,\n  iconBoxSlot,\n  badgeSlot,\n  ...props\n}: SelectPanelGroupItemBoxWithDescriptionProps) => {\n  const selectPanelProps = useSelectPanelInternalProvider();\n  return (\n    <SelectPanelGroupItemBoxWithDescriptionLayout\n      renderRoot={(children, className) => (\n        <USelectPanelGroupItemBoxRoot {...props} className={className}>\n          {children}\n        </USelectPanelGroupItemBoxRoot>\n      )}\n      styleProps={{ className: props.className, selectPanelProps }}\n      labelSlot={<USelectPanelGroupItemBoxLabel>{label}</USelectPanelGroupItemBoxLabel>}\n      supportingSlot={<USelectPanelGroupItemBoxSupporting>{supportingText}</USelectPanelGroupItemBoxSupporting>}\n      descriptionSlot={<USelectPanelGroupItemBoxDescription>{description}</USelectPanelGroupItemBoxDescription>}\n      iconBoxSlot={iconBoxSlot}\n      badgeSlot={badgeSlot}\n    />\n  );\n};\n\nexport type SelectPanelGroupItemBoxWithAvatarAndDescriptionProps = USelectPanelGroupItemBoxRootProps & {\n  label?: string;\n  description?: string;\n  supportingText?: string;\n  avatarSlot?: ReactNode;\n  badgeSlot?: ReactNode;\n};\nexport const SelectPanelGroupItemBoxWithAvatarAndDescription = ({\n  label,\n  description,\n  supportingText,\n  avatarSlot,\n  badgeSlot,\n  ...props\n}: SelectPanelGroupItemBoxWithAvatarAndDescriptionProps) => {\n  const selectPanelProps = useSelectPanelInternalProvider();\n  return (\n    <SelectPanelGroupItemBoxWithAvatarAndDescriptionLayout\n      renderRoot={(children, className) => (\n        <USelectPanelGroupItemBoxRoot {...props} className={className}>\n          {children}\n        </USelectPanelGroupItemBoxRoot>\n      )}\n      styleProps={{ className: props.className, selectPanelProps }}\n      labelSlot={<USelectPanelGroupItemBoxLabel>{label}</USelectPanelGroupItemBoxLabel>}\n      supportingSlot={<USelectPanelGroupItemBoxSupporting>{supportingText}</USelectPanelGroupItemBoxSupporting>}\n      descriptionSlot={<USelectPanelGroupItemBoxDescription>{description}</USelectPanelGroupItemBoxDescription>}\n      avatarSlot={avatarSlot}\n      badgeSlot={badgeSlot}\n    />\n  );\n};\n\n/*\n  ====================================\n  SelectPanelGroupItemBoxIconBox\n  ====================================\n*/\n\nexport type SelectPanelGroupItemBoxIconBoxProps = USelectPanelGroupItemBoxIconBoxRootProps & {\n  icon: (className: string) => React.ReactNode;\n};\nexport const SelectPanelGroupItemBoxIconBox = ({ icon, ...props }: SelectPanelGroupItemBoxIconBoxProps) => {\n  const selectPanelProps = useSelectPanelInternalProvider();\n  return (\n    <SelectPanelGroupItemBoxIconBoxLayout\n      renderRoot={(children, className) => (\n        <USelectPanelGroupItemBoxIconBoxRoot {...props} className={className}>\n          {children}\n        </USelectPanelGroupItemBoxIconBoxRoot>\n      )}\n      styleProps={{ className: props.className, selectPanelProps }}\n      iconSlot={<USelectPanelGroupItemBoxIconBoxIcon>{icon}</USelectPanelGroupItemBoxIconBoxIcon>}\n    />\n  );\n};\n\n/*\n  ====================================\n  SelectPanelGroupItemBoxAvatar\n  ====================================\n*/\n\nexport type SelectPanelGroupItemBoxAvatarProps = Omit<USelectPanelGroupItemBoxAvatarRootProps, \"children\"> & {\n  imageProps?: AvatarImageProps;\n  fallbackText?: string;\n};\nexport const SelectPanelGroupItemBoxAvatar = ({\n  imageProps,\n  fallbackText,\n  ...props\n}: SelectPanelGroupItemBoxAvatarProps) => {\n  const selectPanelProps = useSelectPanelInternalProvider();\n  return (\n    <SelectPanelGroupItemBoxAvatarLayout\n      renderRoot={(children, className) => (\n        <USelectPanelGroupItemBoxAvatarRoot {...props} className={className}>\n          {children}\n        </USelectPanelGroupItemBoxAvatarRoot>\n      )}\n      styleProps={{ className: props.className, selectPanelProps, selectPanelGroupItemBoxAvatarProps: props }}\n      imageSlot={imageProps && <USelectPanelGroupItemBoxAvatarImage {...imageProps} />}\n      labelSlot={\n        fallbackText && (\n          <USelectPanelGroupItemBoxAvatarFallback>\n            <USelectPanelGroupItemBoxAvatarLabel>{fallbackText}</USelectPanelGroupItemBoxAvatarLabel>\n          </USelectPanelGroupItemBoxAvatarFallback>\n        )\n      }\n    />\n  );\n};\n\nexport type SelectPanelGroupItemBoxAvatarWithIconProps = Omit<USelectPanelGroupItemBoxAvatarRootProps, \"children\"> & {\n  imageProps?: AvatarImageProps;\n  fallbackIcon?: (className: string) => React.ReactNode;\n};\nexport const SelectPanelGroupItemBoxAvatarWithIcon = ({\n  imageProps,\n  fallbackIcon,\n  ...props\n}: SelectPanelGroupItemBoxAvatarWithIconProps) => {\n  const selectPanelProps = useSelectPanelInternalProvider();\n  return (\n    <SelectPanelGroupItemBoxAvatarWithIconLayout\n      renderRoot={(children, className) => (\n        <USelectPanelGroupItemBoxAvatarRoot {...props} className={className}>\n          {children}\n        </USelectPanelGroupItemBoxAvatarRoot>\n      )}\n      styleProps={{ className: props.className, selectPanelProps, selectPanelGroupItemBoxAvatarProps: props }}\n      imageSlot={imageProps && <USelectPanelGroupItemBoxAvatarImage {...imageProps} />}\n      iconSlot={\n        fallbackIcon && (\n          <USelectPanelGroupItemBoxAvatarFallback>\n            <USelectPanelGroupItemBoxAvatarIcon>{fallbackIcon}</USelectPanelGroupItemBoxAvatarIcon>\n          </USelectPanelGroupItemBoxAvatarFallback>\n        )\n      }\n    />\n  );\n};\n\n/*\n  ====================================\n  SelectPanelGroupItemCheckbox\n  ====================================\n*/\n\n// export type SelectPanelGroupItemCheckboxProps = USelectPanelGroupItemCheckboxRootProps;\n// export const SelectPanelGroupItemCheckbox = (props: SelectPanelGroupItemCheckboxProps) => (\n//   <SelectPanelGroupItemCheckboxLayout\n//     renderRoot={(children, className) => (\n//       <USelectPanelGroupItemCheckboxRoot {...props} className={className}>\n//         {children}\n//       </USelectPanelGroupItemCheckboxRoot>\n//     )}\n//     iconSlot={<USelectPanelGroupItemCheckboxIcon />}\n//   />\n// );\n\n/*\n  ====================================\n  SelectPanelGroupItemBoxBadge\n  ====================================\n*/\n\nexport type SelectPanelGroupItemBoxBadgeProps = Omit<USelectPanelGroupItemBoxBadgeRootProps, \"children\"> & {\n  label: string;\n};\nexport const SelectPanelGroupItemBoxBadge = ({ label, ...props }: SelectPanelGroupItemBoxBadgeProps) => {\n  const selectPanelProps = useSelectPanelInternalProvider();\n  return (\n    <SelectPanelGroupItemBoxBadgeLayout\n      renderRoot={(children, className) => (\n        <USelectPanelGroupItemBoxBadgeRoot {...props} className={className}>\n          {children}\n        </USelectPanelGroupItemBoxBadgeRoot>\n      )}\n      styleProps={{ className: props.className, selectPanelProps, selectPanelGroupItemBoxBadgeProps: props }}\n      labelSlot={<USelectPanelGroupItemBoxBadgeLabel>{label}</USelectPanelGroupItemBoxBadgeLabel>}\n    />\n  );\n};\n\nexport type SelectPanelGroupItemBoxBadgeWithIconProps = Omit<USelectPanelGroupItemBoxBadgeRootProps, \"children\"> & {\n  icon?: (className: string) => React.ReactNode;\n  label?: string;\n};\nexport const SelectPanelGroupItemBoxBadgeWithIcon = ({\n  label,\n  icon,\n  ...props\n}: SelectPanelGroupItemBoxBadgeWithIconProps) => {\n  const selectPanelProps = useSelectPanelInternalProvider();\n  return (\n    <SelectPanelGroupItemBoxBadgeWithIconLayout\n      renderRoot={(children, className) => (\n        <USelectPanelGroupItemBoxBadgeRoot {...props} className={className}>\n          {children}\n        </USelectPanelGroupItemBoxBadgeRoot>\n      )}\n      styleProps={{ className: props.className, selectPanelProps, selectPanelGroupItemBoxBadgeProps: props }}\n      iconSlot={icon && <USelectPanelGroupItemBoxBadgeIcon>{icon}</USelectPanelGroupItemBoxBadgeIcon>}\n      labelSlot={label && <USelectPanelGroupItemBoxBadgeLabel>{label}</USelectPanelGroupItemBoxBadgeLabel>}\n    />\n  );\n};\n",
        "target": "underatom/components/radix/select-panel/SelectPanel.atoms.tsx"
      },
      {
        "type": "registry:ui",
        "path": "ui/radix/select-panel/SelectPanel.underatoms.tsx",
        "content": "import * as Select from \"@radix-ui/react-select\";\nimport { Check } from \"../../../utils/Icons\";\nimport { CSSProperties, ReactNode, forwardRef } from \"react\";\nimport * as Avatar from \"@radix-ui/react-avatar\";\nimport { getGenericContext } from \"../../../utils/utils\";\nimport {\n  SelectPanelGroupItemBoxAvatarStyleProps,\n  SelectPanelGroupItemBoxBadgeStyleProps,\n  SelectPanelGroupItemBoxDotStyleProps,\n  SelectPanelGroupItemBoxIconBoxStyleProps,\n  SelectPanelStyleProps,\n  selectPanelClass,\n  selectPanelGroupClass,\n  selectPanelGroupItemBoxAvatarClass,\n  selectPanelGroupItemBoxAvatarIconClass,\n  selectPanelGroupItemBoxAvatarImageClass,\n  selectPanelGroupItemBoxAvatarLabelClass,\n  selectPanelGroupItemBoxBadgeClass,\n  selectPanelGroupItemBoxBadgeIconClass,\n  selectPanelGroupItemBoxBadgeLabelClass,\n  selectPanelGroupItemBoxClass,\n  selectPanelGroupItemBoxDescriptionClass,\n  selectPanelGroupItemBoxDotClass,\n  selectPanelGroupItemBoxIconBoxClass,\n  selectPanelGroupItemBoxIconBoxIconClass,\n  selectPanelGroupItemBoxLabelClass,\n  selectPanelGroupItemBoxSupportingClass,\n  selectPanelGroupItemCheckIconClass,\n  selectPanelGroupItemClass,\n  selectPanelGroupTitleClass,\n} from \"./select-panel\";\n\n/*\n  ====================================\n  SelectPanel\n  ====================================\n*/\n\nexport const { Provider: SelectPanelInternalProvider, useComponentContext: useSelectPanelInternalProvider } =\n  getGenericContext<USelectPanelRootProps>(\"SelectPanelInternalProvider\");\n\nexport type USelectPanelRootProps = SelectPanelStyleProps & Select.SelectContentProps;\nexport const USelectPanelRoot = forwardRef<HTMLDivElement, USelectPanelRootProps>(\n  ({ position = \"popper\", ...props }, forwardedRef) => {\n    const fullProps = {\n      ...props,\n      position,\n    };\n    return (\n      <Select.Portal>\n        <Select.Content\n          ref={forwardedRef}\n          sideOffset={position === \"popper\" ? 8 : undefined}\n          {...fullProps}\n          className={selectPanelClass({ className: props.className, selectPanelProps: props })}\n        >\n          <SelectPanelInternalProvider value={fullProps}>{props.children}</SelectPanelInternalProvider>\n        </Select.Content>\n      </Select.Portal>\n    );\n  },\n);\n\nexport type USelectPanelViewportProps = Select.SelectViewportProps;\nexport const USelectPanelViewport = forwardRef<HTMLDivElement, USelectPanelViewportProps>((props, forwardedRef) => {\n  const { position } = useSelectPanelInternalProvider();\n  const style: CSSProperties = {};\n  if (position === \"popper\") {\n    style.width = \"100%\";\n    style.minWidth = \"var(--radix-select-trigger-width)\";\n    style.maxHeight = \"var(--radix-select-content-available-height)\";\n  }\n\n  return <Select.Viewport style={style} ref={forwardedRef} {...props} />;\n});\n\n/*\n  ====================================\n  SelectPanelSearch\n  ====================================\n*/\n\n// export type USelectPanelSearchRootProps = TextFieldProps & {\n//   className?: string;\n// };\n// export const USelectPanelSearchRoot = (props: USelectPanelSearchRootProps) => {\n//   const { rootClass } = useSelectPanelSearchClasses();\n//   return <TextField {...props} className={rootClass(props.className)} />;\n// };\n\n// export type USelectPanelSearchTextProps = InputProps;\n// export const USelectPanelSearchText = (props: USelectPanelSearchTextProps) => {\n//   const { textClass } = useSelectPanelSearchClasses();\n//   return <Input {...props} style={{ background: \"none\", outline: \"none\" }} className={textClass()} />;\n// };\n\n// export type USelectPanelSearchIconProps = {\n//   children: (className: string) => ReactNode;\n// };\n// export const USelectPanelSearchIcon = ({ children }: USelectPanelSearchIconProps) => {\n//   const { iconClass } = useSelectPanelSearchClasses();\n//   return <>{children(iconClass())}</>;\n// };\n\n/*\n  ====================================\n  SelectPanelGroup\n  ====================================\n*/\n\nexport type USelectPanelGroupRootProps = Select.SelectGroupProps;\nexport const USelectPanelGroupRoot = forwardRef<HTMLDivElement, USelectPanelGroupRootProps>((props, forwardedRef) => {\n  const selectPanelProps = useSelectPanelInternalProvider();\n  return (\n    <Select.Group\n      ref={forwardedRef}\n      {...props}\n      className={selectPanelGroupClass({ className: props.className, selectPanelProps })}\n    />\n  );\n});\n\nexport type USelectPanelGroupTitle = Select.SelectLabelProps;\nexport const USelectPanelGroupTitle = (props: USelectPanelGroupTitle) => {\n  const selectPanelProps = useSelectPanelInternalProvider();\n  return (\n    <Select.Label {...props} className={selectPanelGroupTitleClass({ className: props.className, selectPanelProps })} />\n  );\n};\n\n/*\n  ====================================\n  SelectPanelGroupItem\n  ====================================\n*/\n\nexport const { Provider: SelectPanelGroupItemProvider, useComponentContext: useSelectPanelGroupItemProvider } =\n  getGenericContext<USelectPanelGroupItemRootProps>(\"SelectPanelGroupItem\");\n\nexport type USelectPanelGroupItemRootProps = Select.SelectItemProps;\nexport const USelectPanelGroupItemRoot = forwardRef<HTMLDivElement, USelectPanelGroupItemRootProps>((props, ref) => {\n  const selectPanelProps = useSelectPanelInternalProvider();\n  return (\n    <Select.Item\n      ref={ref}\n      {...props}\n      className={selectPanelGroupItemClass({ className: props.className, selectPanelProps })}\n    >\n      <SelectPanelGroupItemProvider value={props}>{props.children}</SelectPanelGroupItemProvider>\n    </Select.Item>\n  );\n});\n\nexport const USelectPanelGroupItemCheckIcon = () => {\n  const selectPanelProps = useSelectPanelInternalProvider();\n  return (\n    <Select.ItemIndicator>\n      <Check className={selectPanelGroupItemCheckIconClass({ selectPanelProps })} />\n    </Select.ItemIndicator>\n  );\n};\n\n/*\n  ====================================\n  SelectPanelGroupItemBox\n  ====================================\n*/\n\nexport type USelectPanelGroupItemBoxRootProps = React.ComponentPropsWithoutRef<\"div\">;\nexport const USelectPanelGroupItemBoxRoot = (props: USelectPanelGroupItemBoxRootProps) => {\n  const selectPanelProps = useSelectPanelInternalProvider();\n  return <div {...props} className={selectPanelGroupItemBoxClass({ className: props.className, selectPanelProps })} />;\n};\n\nexport type USelectPanelGroupItemBoxLabel = Select.SelectItemTextProps;\nexport const USelectPanelGroupItemBoxLabel = (props: USelectPanelGroupItemBoxLabel) => {\n  const selectPanelProps = useSelectPanelInternalProvider();\n  return (\n    <span className={selectPanelGroupItemBoxLabelClass({ className: props.className, selectPanelProps })}>\n      <Select.SelectItemText {...props} />\n    </span>\n  );\n};\nexport type USelectPanelGroupItemBoxDot = SelectPanelGroupItemBoxDotStyleProps & React.ComponentPropsWithoutRef<\"span\">;\nexport const USelectPanelGroupItemBoxDot = (props: USelectPanelGroupItemBoxDot) => {\n  const selectPanelProps = useSelectPanelInternalProvider();\n  return (\n    <span\n      {...props}\n      className={selectPanelGroupItemBoxDotClass({\n        className: props.className,\n        selectPanelProps,\n        selectPanelGroupItemBoxDotProps: props,\n      })}\n    />\n  );\n};\n\nexport type USelectPanelGroupItemBoxSupportingProps = React.ComponentPropsWithoutRef<\"span\">;\nexport const USelectPanelGroupItemBoxSupporting = (props: USelectPanelGroupItemBoxSupportingProps) => {\n  const selectPanelProps = useSelectPanelInternalProvider();\n  return (\n    <span\n      {...props}\n      className={selectPanelGroupItemBoxSupportingClass({\n        className: props.className,\n        selectPanelProps,\n      })}\n    />\n  );\n};\n\nexport type USelectPanelGroupItemBoxDescriptionProps = React.ComponentPropsWithoutRef<\"span\">;\nexport const USelectPanelGroupItemBoxDescription = (props: USelectPanelGroupItemBoxDescriptionProps) => {\n  const selectPanelProps = useSelectPanelInternalProvider();\n  return (\n    <span\n      {...props}\n      className={selectPanelGroupItemBoxDescriptionClass({\n        className: props.className,\n        selectPanelProps,\n      })}\n    />\n  );\n};\n\n/*\n  ====================================\n  SelectPanelGroupItemBoxIconBox\n  ====================================\n*/\n\nexport const {\n  Provider: SelectPanelGroupItemBoxIconBoxProvider,\n  useComponentContext: useSelectPanelGroupItemBoxIconBoxProvider,\n} = getGenericContext<USelectPanelGroupItemBoxIconBoxRootProps>(\"SelectPanelGroupItemBoxIconBox\");\n\nexport type USelectPanelGroupItemBoxIconBoxRootProps = SelectPanelGroupItemBoxIconBoxStyleProps &\n  React.ComponentPropsWithoutRef<\"div\">;\nexport const USelectPanelGroupItemBoxIconBoxRoot = (props: USelectPanelGroupItemBoxIconBoxRootProps) => {\n  const selectPanelProps = useSelectPanelInternalProvider();\n  return (\n    <div\n      {...props}\n      className={selectPanelGroupItemBoxIconBoxClass({\n        className: props.className,\n        selectPanelProps,\n        selectPanelGroupItemBoxIconBoxProps: props,\n      })}\n    >\n      <SelectPanelGroupItemBoxIconBoxProvider value={props}>{props.children}</SelectPanelGroupItemBoxIconBoxProvider>\n    </div>\n  );\n};\n\nexport type USelectPanelGroupItemBoxIconBoxIconProps = {\n  children: (className: string) => ReactNode;\n};\nexport const USelectPanelGroupItemBoxIconBoxIcon = ({ children }: USelectPanelGroupItemBoxIconBoxIconProps) => {\n  const selectPanelProps = useSelectPanelInternalProvider();\n  const selectPanelGroupItemBoxIconBoxProps = useSelectPanelGroupItemBoxIconBoxProvider();\n  return (\n    <>{children(selectPanelGroupItemBoxIconBoxIconClass({ selectPanelProps, selectPanelGroupItemBoxIconBoxProps }))}</>\n  );\n};\n\n/*\n  ====================================\n  SelectPanelGroupItemBoxAvatar\n  ====================================\n*/\n\nexport const {\n  Provider: SelectPanelGroupItemBoxAvatarProvider,\n  useComponentContext: useSelectPanelGroupItemBoxAvatarProvider,\n} = getGenericContext<USelectPanelGroupItemBoxAvatarRootProps>(\"SelectPanelGroupItemBoxAvatar\");\n\nexport type USelectPanelGroupItemBoxAvatarRootProps = SelectPanelGroupItemBoxAvatarStyleProps &\n  Avatar.AvatarProps & {\n    /** Avatar content */\n    children: Avatar.AvatarProps[\"children\"];\n    className?: string;\n  };\n\nexport const USelectPanelGroupItemBoxAvatarRoot = ({\n  className,\n  ...props\n}: USelectPanelGroupItemBoxAvatarRootProps) => {\n  const selectPanelProps = useSelectPanelInternalProvider();\n  return (\n    <Avatar.Root\n      {...props}\n      className={selectPanelGroupItemBoxAvatarClass({\n        className,\n        selectPanelProps,\n        selectPanelGroupItemBoxAvatarProps: props,\n      })}\n    >\n      <SelectPanelGroupItemBoxAvatarProvider value={props}>{props.children}</SelectPanelGroupItemBoxAvatarProvider>\n    </Avatar.Root>\n  );\n};\n\nexport type USelectPanelGroupItemBoxAvatarFallbackProps = Avatar.AvatarFallbackProps;\nexport const USelectPanelGroupItemBoxAvatarFallback = (props: USelectPanelGroupItemBoxAvatarFallbackProps) => {\n  return <Avatar.Fallback {...props} style={{ display: \"flex\" }} />;\n};\n\nexport type USelectPanelGroupItemBoxAvatarLabelProps = {\n  children: ReactNode;\n};\nexport const USelectPanelGroupItemBoxAvatarLabel = ({ children }: USelectPanelGroupItemBoxAvatarLabelProps) => {\n  const selectPanelProps = useSelectPanelInternalProvider();\n  const selectPanelGroupItemBoxAvatarProps = useSelectPanelGroupItemBoxAvatarProvider();\n  return (\n    <span className={selectPanelGroupItemBoxAvatarLabelClass({ selectPanelProps, selectPanelGroupItemBoxAvatarProps })}>\n      {children}\n    </span>\n  );\n};\n\nexport type USelectPanelGroupItemBoxAvatarIconProps = {\n  /** Icon render function */\n  children: (className: string) => ReactNode;\n};\nexport const USelectPanelGroupItemBoxAvatarIcon = ({ children }: USelectPanelGroupItemBoxAvatarIconProps) => {\n  const selectPanelProps = useSelectPanelInternalProvider();\n  const selectPanelGroupItemBoxAvatarProps = useSelectPanelGroupItemBoxAvatarProvider();\n  return (\n    <>{children(selectPanelGroupItemBoxAvatarIconClass({ selectPanelProps, selectPanelGroupItemBoxAvatarProps }))}</>\n  );\n};\n\nexport type USelectPanelGroupItemBoxAvatarImageProps = Avatar.AvatarImageProps;\nexport const USelectPanelGroupItemBoxAvatarImage = (props: USelectPanelGroupItemBoxAvatarImageProps) => {\n  const selectPanelProps = useSelectPanelInternalProvider();\n  return (\n    <Avatar.Image\n      {...props}\n      className={selectPanelGroupItemBoxAvatarImageClass({\n        selectPanelProps,\n      })}\n    />\n  );\n};\n\n/*\n  ====================================\n  SelectPanelGroupItemBoxBadge\n  ====================================\n*/\n\nexport const {\n  Provider: SelectPanelGroupItemBoxBadgeProvider,\n  useComponentContext: useSelectPanelGroupItemBoxBadgeProvider,\n} = getGenericContext<USelectPanelGroupItemBoxBadgeRootProps>(\"SelectPanelGroupItemBoxBadge\");\n\nexport type USelectPanelGroupItemBoxBadgeRootProps = SelectPanelGroupItemBoxBadgeStyleProps &\n  React.ComponentPropsWithoutRef<\"div\">;\nexport const USelectPanelGroupItemBoxBadgeRoot = (props: USelectPanelGroupItemBoxBadgeRootProps) => {\n  const selectPanelProps = useSelectPanelInternalProvider();\n  return (\n    <div\n      {...props}\n      className={selectPanelGroupItemBoxBadgeClass({\n        className: props.className,\n        selectPanelProps,\n        selectPanelGroupItemBoxBadgeProps: props,\n      })}\n    >\n      <SelectPanelGroupItemBoxBadgeProvider value={props}>{props.children}</SelectPanelGroupItemBoxBadgeProvider>\n    </div>\n  );\n};\n\nexport type USelectPanelGroupItemBoxBadgeLabelProps = {\n  children: ReactNode;\n  className?: string;\n};\nexport const USelectPanelGroupItemBoxBadgeLabel = ({\n  children,\n  className,\n}: USelectPanelGroupItemBoxBadgeLabelProps) => {\n  const selectPanelProps = useSelectPanelInternalProvider();\n  const selectPanelGroupItemBoxBadgeProps = useSelectPanelGroupItemBoxBadgeProvider();\n  return (\n    <span\n      className={selectPanelGroupItemBoxBadgeLabelClass({\n        className,\n        selectPanelProps,\n        selectPanelGroupItemBoxBadgeProps,\n      })}\n    >\n      {children}\n    </span>\n  );\n};\n\nexport type USelectPanelGroupItemBoxBadgeIconProps = {\n  children: (className: string) => ReactNode;\n  className?: string;\n};\nexport const USelectPanelGroupItemBoxBadgeIcon = ({ children, className }: USelectPanelGroupItemBoxBadgeIconProps) => {\n  const selectPanelProps = useSelectPanelInternalProvider();\n  const selectPanelGroupItemBoxBadgeProps = useSelectPanelGroupItemBoxBadgeProvider();\n  return (\n    <>\n      {children(\n        selectPanelGroupItemBoxBadgeIconClass({ className, selectPanelProps, selectPanelGroupItemBoxBadgeProps }),\n      )}\n    </>\n  );\n};\n\n/*\n  ====================================\n  SelectPanelGroupItemCheckbox\n  ====================================\n*/\n\n// export type USelectPanelGroupItemCheckboxRootProps = Checkbox.CheckboxProps;\n// export const USelectPanelGroupItemCheckboxRoot = (props: USelectPanelGroupItemCheckboxRootProps) => {\n//   const { rootClass } = useSelectPanelGroupItemCheckboxClasses();\n//   const { disabled: parentDisabled } = useSelectPanelGroupItemProvider();\n//   const disabled = props.disabled || parentDisabled;\n//   return (\n//     <Checkbox.Root {...props} className={rootClass(props.className)} disabled={disabled}>\n//       <SelectPanelGroupItemCheckboxProvider value={props}>{props.children}</SelectPanelGroupItemCheckboxProvider>\n//     </Checkbox.Root>\n//   );\n// };\n\n// export type USelectPanelGroupItemCheckboxIndicatorProps = Checkbox.CheckboxIndicatorProps;\n// export const USelectPanelGroupItemCheckboxIndicator = (props: USelectPanelGroupItemCheckboxIndicatorProps) => {\n//   return <Checkbox.Indicator {...props} />;\n// };\n\n// export const USelectPanelGroupItemCheckboxIcon = () => {\n//   const { iconClass } = useSelectPanelGroupItemCheckboxClasses();\n//   const { checked } = useSelectPanelGroupItemCheckboxRootProps();\n//   return (\n//     <>\n//       {checked === \"indeterminate\" ? (\n//         <Minus className={iconClass()} style={{ width: \"100%\", height: \"100%\" }} />\n//       ) : (\n//         <Check className={iconClass()} style={{ width: \"100%\", height: \"100%\" }} />\n//       )}\n//     </>\n//   );\n// };\n\n// export const {\n//   Provider: SelectPanelGroupItemCheckboxProvider,\n//   useComponentContext: useSelectPanelGroupItemCheckboxRootProps,\n// } = getGenericContext<Checkbox.CheckboxProps>(\"SelectPanelGroupItemCheckboxProvider\");\n",
        "target": "underatom/components/radix/select-panel/SelectPanel.underatoms.tsx"
      },
      {
        "type": "registry:ui",
        "path": "ui/radix/select-panel/select-panel.tsx",
        "content": "import { tv } from \"../../../utils/extendedTV\";\nimport type { RenderRoot } from \"../../../utils/utils\";\n\n/*\n  ====================================\n  SelectPanel\n  ====================================\n*/\n\nexport type SelectPanelStyleProps = {\n  size?: \"sm\" | \"md\" | \"lg\";\n};\n\nexport type SelectPanelType = {\n  className?: string;\n  selectPanelProps?: SelectPanelStyleProps;\n};\n\nexport const selectPanelDefaults: Required<SelectPanelStyleProps> = {\n  size: \"md\",\n};\n\nexport const selectPanelClass = ({ className }: SelectPanelType) => {\n  return `group/selectPanel border-solid border-base-100 border-1 bg-base-50 shadow-md rounded-md ${className}`;\n};\n\nexport const SelectPanelLayout = ({\n  renderRoot,\n  styleProps: { className },\n  searchSlot,\n  groupSlots,\n}: {\n  renderRoot: RenderRoot;\n  styleProps: SelectPanelType;\n  searchSlot: React.ReactNode;\n  groupSlots: React.ReactNode;\n}) =>\n  renderRoot(\n    <>\n      {searchSlot}\n      <div className=\"h-fit w-full flex flex-col gap-[6px]\">{groupSlots}</div>\n    </>,\n    `h-fit w-full flex flex-col gap-1 pb-[6px] ${className}`,\n  );\nexport type SelectPanelGroupType = {\n  className?: string;\n  selectPanelProps?: SelectPanelStyleProps;\n};\n\nexport const selectPanelGroupClass = ({ className }: SelectPanelGroupType) => {\n  return `group/selectPanelGroup  ${className}`;\n};\n\nexport const selectPanelGroupTitleClass = ({ className }: SelectPanelGroupType) => {\n  return `text-base-600 text-xs font-text font-medium ${className}`;\n};\n\nexport const SelectPanelGroupLayout = ({\n  renderRoot,\n  styleProps: { className },\n  titleSlot,\n  itemSlots,\n}: {\n  renderRoot: RenderRoot;\n  styleProps: SelectPanelGroupType;\n  titleSlot: React.ReactNode;\n  itemSlots: React.ReactNode;\n}) =>\n  renderRoot(\n    <>\n      <div className=\"h-fit w-full flex flex-col gap-[10px] pl-[6px]\">{titleSlot}</div>\n      <div className=\"h-fit w-full flex flex-col gap-[2px]\">{itemSlots}</div>\n    </>,\n    `h-fit w-full flex flex-col gap-[6px] pt-2 px-2 ${className}`,\n  );\n\nexport type SelectPanelSearchType = {\n  className?: string;\n  selectPanelProps?: SelectPanelStyleProps;\n};\n\nexport const selectPanelSearchClass = ({ className }: SelectPanelSearchType) => {\n  return `group/selectPanelSearch border-solid border-base-200 border-t-0 border-b-1 border-x-0 bg-base-50 rounded-tl-md rounded-bl-[0px] rounded-tr-md rounded-br-[0px] ${className}`;\n};\n\nexport const selectPanelSearchIconClass = ({ className }: SelectPanelSearchType) => {\n  return `w-5 h-5 text-base-600 group-disabled/selectPanelSearch:text-base-300 ${className}`;\n};\n\nexport const selectPanelSearchTextClass = ({ className }: SelectPanelSearchType) => {\n  return `text-base-950 text-sm font-text font-normal group-disabled/selectPanelSearch:text-base-300 ${className}`;\n};\n\nexport const SelectPanelSearchLayout = ({\n  renderRoot,\n  styleProps: { className },\n  iconSlot,\n  textSlot,\n}: {\n  renderRoot: RenderRoot;\n  styleProps: SelectPanelSearchType;\n  iconSlot: React.ReactNode;\n  textSlot: React.ReactNode;\n}) =>\n  renderRoot(\n    <>\n      {iconSlot}\n      {textSlot}\n    </>,\n    `h-9 w-full flex flex-row items-center gap-2 px-2 ${className}`,\n  );\n\nexport type SelectPanelGroupItemType = {\n  className?: string;\n  selectPanelProps?: SelectPanelStyleProps;\n};\n\nexport const selectPanelGroupItemClass = ({ className }: SelectPanelGroupItemType) => {\n  return `group/selectPanelGroupItem rounded-sm cursor-pointer hover:bg-base-100 data-[highlighted]:bg-base-100 active:bg-base-50 data-[disabled]:bg-base-50 data-[disabled]:pointer-events-none ${className}`;\n};\n\nexport const selectPanelGroupItemCheckIconClass = ({ className }: SelectPanelGroupItemType) => {\n  return `\n  group-data-[state=checked]/selectPanelGroupItem:[display:unset]\n  group-data-[state=checked]/selectPanelGroupItem:w-5\n  group-data-[state=checked]/selectPanelGroupItem:h-5\n  group-data-[state=checked]/selectPanelGroupItem:text-primary-600\n  group-data-[disabled]/selectPanelGroupItem:group-data-[state=checked]/selectPanelGroupItem:text-base-400\n  hidden\n  ${className}\n  `;\n};\n\nexport const SelectPanelGroupItemLayout = ({\n  renderRoot,\n  styleProps: { className },\n  boxSlot,\n  checkIconSlot,\n}: {\n  renderRoot: RenderRoot;\n  styleProps: SelectPanelGroupItemType;\n  boxSlot: React.ReactNode;\n  checkIconSlot: React.ReactNode;\n}) =>\n  renderRoot(\n    <>\n      {boxSlot}\n      <div className=\"h-5 w-5 flex flex-row justify-center items-center gap-[10px]\">{checkIconSlot}</div>\n    </>,\n    `h-fit w-full flex flex-row items-center gap-5 py-1 px-[6px] ${className}`,\n  );\nexport const SelectPanelGroupItemWithCheckboxLayout = ({\n  renderRoot,\n  styleProps: { className },\n  boxSlot,\n  checkboxSlot,\n}: {\n  renderRoot: RenderRoot;\n  styleProps: SelectPanelGroupItemType;\n  boxSlot: React.ReactNode;\n  checkboxSlot: React.ReactNode;\n}) =>\n  renderRoot(\n    <>\n      {boxSlot}\n      {checkboxSlot}\n    </>,\n    `h-fit w-full flex flex-row items-center gap-5 py-1 px-[6px] ${className}`,\n  );\n\nexport type SelectPanelGroupItemBoxDotStyleProps = {\n  color?: \"primary\" | \"base\" | \"green\" | \"red\";\n};\n\nexport type SelectPanelGroupItemBoxType = {\n  className?: string;\n  selectPanelProps?: SelectPanelStyleProps;\n};\n\nexport type SelectPanelGroupItemBoxDotType = {\n  className?: string;\n  selectPanelProps?: SelectPanelStyleProps;\n  selectPanelGroupItemBoxDotProps?: SelectPanelGroupItemBoxDotStyleProps;\n};\n\nexport const selectPanelGroupItemBoxDotDefaults: Required<SelectPanelGroupItemBoxDotStyleProps> = {\n  color: \"primary\",\n};\n\nexport const selectPanelGroupItemBoxClass = ({ className }: SelectPanelGroupItemBoxType) => {\n  return `group/selectPanelGroupItemBox  ${className}`;\n};\n\nexport const selectPanelGroupItemBoxLabelClass = ({ className }: SelectPanelGroupItemBoxType) => {\n  return `text-base-950 text-sm font-text font-medium select-none group-data-[disabled]/selectPanelGroupItem:text-base-400 ${className}`;\n};\n\nexport const selectPanelGroupItemBoxDotClass = ({\n  className,\n  selectPanelGroupItemBoxDotProps,\n}: SelectPanelGroupItemBoxDotType) => {\n  const dotClass = tv({\n    base: \"w-[6px] h-[6px] rounded-[999px] group-data-[disabled]/selectPanelGroupItem:bg-base-400\",\n    variants: {\n      groupItemBoxDotColor: {\n        base: \"bg-base-950\",\n        primary: \"bg-primary-950\",\n        red: \"bg-danger-500\",\n        green: \"bg-success-500\",\n      },\n    },\n\n    defaultVariants: { groupItemBoxDotColor: selectPanelGroupItemBoxDotDefaults.color },\n  });\n  return dotClass({\n    class: className,\n    groupItemBoxDotColor: selectPanelGroupItemBoxDotProps?.color,\n  });\n};\n\nexport const selectPanelGroupItemBoxDescriptionClass = ({ className }: SelectPanelGroupItemBoxType) => {\n  return `text-base-900 text-sm font-text font-normal select-none group-data-[disabled]/selectPanelGroupItem:text-base-300 ${className}`;\n};\n\nexport const selectPanelGroupItemBoxSupportingClass = ({ className }: SelectPanelGroupItemBoxType) => {\n  return `text-base-500 text-xs font-text font-normal select-none group-data-[disabled]/selectPanelGroupItem:text-base-300 ${className}`;\n};\n\nexport const SelectPanelGroupItemBoxLayout = ({\n  renderRoot,\n  styleProps: { className },\n  iconBoxSlot,\n  labelSlot,\n  badgeSlot,\n}: {\n  renderRoot: RenderRoot;\n  styleProps: SelectPanelGroupItemBoxType;\n  iconBoxSlot: React.ReactNode;\n  labelSlot: React.ReactNode;\n  badgeSlot: React.ReactNode;\n}) =>\n  renderRoot(\n    <>\n      <div className=\"h-fit w-fit flex flex-row items-center gap-[6px]\">\n        {iconBoxSlot}\n        {labelSlot}\n      </div>\n      {badgeSlot}\n    </>,\n    `h-7 w-full flex flex-row items-center gap-[6px] ${className}`,\n  );\nexport const SelectPanelGroupItemBoxWithAvatarLayout = ({\n  renderRoot,\n  styleProps: { className },\n  avatarSlot,\n  labelSlot,\n  badgeSlot,\n}: {\n  renderRoot: RenderRoot;\n  styleProps: SelectPanelGroupItemBoxType;\n  avatarSlot: React.ReactNode;\n  labelSlot: React.ReactNode;\n  badgeSlot: React.ReactNode;\n}) =>\n  renderRoot(\n    <>\n      <div className=\"h-fit w-fit flex flex-row items-center gap-[6px]\">\n        {avatarSlot}\n        {labelSlot}\n      </div>\n      {badgeSlot}\n    </>,\n    `h-7 w-full flex flex-row items-center gap-[6px] ${className}`,\n  );\nexport const SelectPanelGroupItemBoxWithDotLayout = ({\n  renderRoot,\n  styleProps: { className },\n  dotSlot,\n  labelSlot,\n  badgeSlot,\n}: {\n  renderRoot: RenderRoot;\n  styleProps: SelectPanelGroupItemBoxType;\n  dotSlot: React.ReactNode;\n  labelSlot: React.ReactNode;\n  badgeSlot: React.ReactNode;\n}) =>\n  renderRoot(\n    <>\n      <div className=\"h-fit w-fit flex flex-row items-center gap-[11px] pl-[5px]\">\n        {dotSlot}\n        {labelSlot}\n      </div>\n      {badgeSlot}\n    </>,\n    `h-7 w-full flex flex-row items-center gap-[6px] ${className}`,\n  );\nexport const SelectPanelGroupItemBoxWithDescriptionLayout = ({\n  renderRoot,\n  styleProps: { className },\n  iconBoxSlot,\n  labelSlot,\n  supportingSlot,\n  descriptionSlot,\n  badgeSlot,\n}: {\n  renderRoot: RenderRoot;\n  styleProps: SelectPanelGroupItemBoxType;\n  iconBoxSlot: React.ReactNode;\n  labelSlot: React.ReactNode;\n  supportingSlot: React.ReactNode;\n  descriptionSlot: React.ReactNode;\n  badgeSlot: React.ReactNode;\n}) =>\n  renderRoot(\n    <>\n      <div className=\"h-fit w-fit flex flex-row items-center gap-[6px]\">\n        {iconBoxSlot}\n        <div className=\"h-fit w-fit flex flex-col justify-center [&>*:not(:first-child)]:[margin-top:-4px]\">\n          <div className=\"h-fit w-[109px] flex flex-row items-baseline gap-1\">\n            {labelSlot}\n            {supportingSlot}\n          </div>\n          {descriptionSlot}\n        </div>\n      </div>\n      {badgeSlot}\n    </>,\n    `h-12 w-full flex flex-row items-center gap-[6px] ${className}`,\n  );\nexport const SelectPanelGroupItemBoxWithAvatarAndDescriptionLayout = ({\n  renderRoot,\n  styleProps: { className },\n  avatarSlot,\n  labelSlot,\n  supportingSlot,\n  descriptionSlot,\n  badgeSlot,\n}: {\n  renderRoot: RenderRoot;\n  styleProps: SelectPanelGroupItemBoxType;\n  avatarSlot: React.ReactNode;\n  labelSlot: React.ReactNode;\n  supportingSlot: React.ReactNode;\n  descriptionSlot: React.ReactNode;\n  badgeSlot: React.ReactNode;\n}) =>\n  renderRoot(\n    <>\n      <div className=\"h-fit w-fit flex flex-row items-center gap-[6px]\">\n        {avatarSlot}\n        <div className=\"h-fit w-fit flex flex-col justify-center [&>*:not(:first-child)]:[margin-top:-4px]\">\n          <div className=\"h-fit w-fit flex flex-row items-baseline gap-1\">\n            {labelSlot}\n            {supportingSlot}\n          </div>\n          {descriptionSlot}\n        </div>\n      </div>\n      {badgeSlot}\n    </>,\n    `h-12 w-full flex flex-row items-center gap-[6px] ${className}`,\n  );\n\nexport type SelectPanelGroupItemBoxBadgeStyleProps = {\n  color?: \"primary\" | \"base\" | \"red\" | \"green\";\n};\n\nexport type SelectPanelGroupItemBoxBadgeType = {\n  className?: string;\n  selectPanelGroupItemBoxBadgeProps?: SelectPanelGroupItemBoxBadgeStyleProps;\n  selectPanelProps?: SelectPanelStyleProps;\n};\n\nexport const selectPanelGroupItemBoxBadgeDefaults: Required<SelectPanelGroupItemBoxBadgeStyleProps> = {\n  color: \"primary\",\n};\n\nexport const selectPanelGroupItemBoxBadgeClass = ({\n  className,\n  selectPanelGroupItemBoxBadgeProps,\n}: SelectPanelGroupItemBoxBadgeType) => {\n  const rootClass = tv({\n    base: \"group/selectPanelGroupItemBoxBadge rounded-[999px] group-data-[disabled]/selectPanelGroupItem:bg-base-300\",\n    variants: {\n      groupItemBoxBadgeColor: {\n        base: \"bg-base-950\",\n        primary: \"bg-primary-950\",\n        red: \"bg-danger-600\",\n        green: \"bg-success-600\",\n      },\n    },\n\n    defaultVariants: { groupItemBoxBadgeColor: selectPanelGroupItemBoxBadgeDefaults.color },\n  });\n  return rootClass({\n    class: className,\n    groupItemBoxBadgeColor: selectPanelGroupItemBoxBadgeProps?.color,\n  });\n};\n\nexport const selectPanelGroupItemBoxBadgeLabelClass = ({ className }: SelectPanelGroupItemBoxBadgeType) => {\n  return `text-base-50 text-xs font-text font-medium select-none ${className}`;\n};\n\nexport const selectPanelGroupItemBoxBadgeIconClass = ({ className }: SelectPanelGroupItemBoxBadgeType) => {\n  return `w-3 h-3 text-base-50 ${className}`;\n};\n\nexport const SelectPanelGroupItemBoxBadgeLayout = ({\n  renderRoot,\n  styleProps: { className },\n  labelSlot,\n}: {\n  renderRoot: RenderRoot;\n  styleProps: SelectPanelGroupItemBoxBadgeType;\n  labelSlot: React.ReactNode;\n}) => renderRoot(<>{labelSlot}</>, `h-6 w-fit flex flex-row justify-center items-center px-2 ${className}`);\nexport const SelectPanelGroupItemBoxBadgeWithIconLayout = ({\n  renderRoot,\n  styleProps: { className },\n  iconSlot,\n  labelSlot,\n}: {\n  renderRoot: RenderRoot;\n  styleProps: SelectPanelGroupItemBoxBadgeType;\n  iconSlot: React.ReactNode;\n  labelSlot: React.ReactNode;\n}) =>\n  renderRoot(\n    <>\n      {iconSlot}\n      {labelSlot}\n    </>,\n    `h-6 w-fit flex flex-row justify-center items-center gap-1 pl-1 pr-2 ${className}`,\n  );\n\nexport type SelectPanelGroupItemCheckboxType = {\n  className?: string;\n  selectPanelProps?: SelectPanelStyleProps;\n};\n\nexport const selectPanelGroupItemCheckboxClass = ({ className }: SelectPanelGroupItemCheckboxType) => {\n  return `\n  group/selectPanelGroupItemCheckbox\n  border-solid\n  group-data-[disabled]/selectPanelGroupItem:data-[disabled]:border-solid\n  border-primary-950\n  border-1\n  group-data-[disabled]/selectPanelGroupItem:data-[disabled]:border-1\n  bg-base-50\n  active:bg-base-50\n  rounded-xs\n  group-data-[disabled]/selectPanelGroupItem:data-[disabled]:rounded-xs\n  hover:bg-base-200\n  data-[ring=true]:bg-base-200\n  data-[ring=true]:shadow-focus-ring\n  group-data-[state=checked]/selectPanelGroupItem:[border:unset]\n  group-data-[disabled]/selectPanelGroupItem:group-data-[state=checked]/selectPanelGroupItem:data-[disabled]:[border:unset]\n  group-data-[state=checked]/selectPanelGroupItem:bg-primary-950\n  group-data-[state=checked]/selectPanelGroupItem:active:bg-primary-950\n  group-data-[state=checked]/selectPanelGroupItem:hover:bg-primary-800\n  group-data-[state=checked]/selectPanelGroupItem:data-[ring=true]:bg-primary-800\n  data-[disabled]:border-primary-200\n  data-[disabled]:bg-primary-50\n  group-data-[state=checked]/selectPanelGroupItem:data-[disabled]:bg-primary-300\n  ${className}\n  `;\n};\n\nexport const selectPanelGroupItemCheckboxIconClass = ({ className }: SelectPanelGroupItemCheckboxType) => {\n  return `\n  w-[14px]\n  group-data-[disabled]/selectPanelGroupItemCheckbox:w-[14px]\n  group-data-[state=checked]/selectPanelGroupItem:w-[14px]\n  h-[14px]\n  group-data-[disabled]/selectPanelGroupItemCheckbox:h-[14px]\n  group-data-[state=checked]/selectPanelGroupItem:h-[14px]\n  group-data-[state=checked]/selectPanelGroupItem:text-white\n  group-data-[state=checked]/selectPanelGroupItem:group-data-[disabled]/selectPanelGroupItemCheckbox:text-primary-400\n  ${className}\n  `;\n};\n\nexport const SelectPanelGroupItemCheckboxLayout = ({\n  renderRoot,\n  styleProps: { className },\n  iconSlot,\n}: {\n  renderRoot: RenderRoot;\n  styleProps: SelectPanelGroupItemCheckboxType;\n  iconSlot: React.ReactNode;\n}) =>\n  renderRoot(<>{iconSlot}</>, `h-[14px] w-[14px] flex flex-row justify-center items-center min-w-[14px] ${className}`);\n\nexport type SelectPanelGroupItemBoxAvatarStyleProps = {\n  multiline?: true | false;\n};\n\nexport type SelectPanelGroupItemBoxAvatarType = {\n  className?: string;\n  selectPanelGroupItemBoxAvatarProps?: SelectPanelGroupItemBoxAvatarStyleProps;\n  selectPanelProps?: SelectPanelStyleProps;\n};\n\nexport const selectPanelGroupItemBoxAvatarDefaults: Required<SelectPanelGroupItemBoxAvatarStyleProps> = {\n  multiline: false,\n};\n\nexport const selectPanelGroupItemBoxAvatarClass = ({ className }: SelectPanelGroupItemBoxAvatarType) => {\n  return `\n  group/selectPanelGroupItemBoxAvatar\n  bg-base-100\n  group-active/selectPanelGroupItem:bg-base-100\n  group-data-[disabled]/selectPanelGroupItem:bg-base-100\n  rounded-[999px]\n  transition-all\n  group-hover/selectPanelGroupItem:bg-base-50\n  group-data-[highlighted]/selectPanelGroupItem:bg-base-50\n  group-data-[disabled]/selectPanelGroupItem:bg-base-50\n  ${className}\n  `;\n};\n\nexport const selectPanelGroupItemBoxAvatarImageClass = ({\n  className,\n  selectPanelGroupItemBoxAvatarProps,\n}: SelectPanelGroupItemBoxAvatarType) => {\n  const imageClass = tv({\n    base: \"rounded-[999px] group-data-[disabled]/selectPanelGroupItem:opacity-[0.6]\",\n    variants: { groupItemBoxAvatarMultiline: { false: \"w-7 h-7\", true: \"w-10 h-10\" } },\n\n    defaultVariants: { groupItemBoxAvatarMultiline: selectPanelGroupItemBoxAvatarDefaults.multiline },\n  });\n  return imageClass({\n    class: className,\n\n    groupItemBoxAvatarMultiline: selectPanelGroupItemBoxAvatarProps?.multiline,\n  });\n};\n\nexport const selectPanelGroupItemBoxAvatarLabelClass = ({\n  className,\n  selectPanelGroupItemBoxAvatarProps,\n}: SelectPanelGroupItemBoxAvatarType) => {\n  const labelClass = tv({\n    base: \"text-base-600 font-text select-none group-data-[disabled]/selectPanelGroupItem:text-base-400\",\n    variants: { groupItemBoxAvatarMultiline: { false: \"text-xs font-normal\", true: \"text-md font-medium\" } },\n\n    defaultVariants: { groupItemBoxAvatarMultiline: selectPanelGroupItemBoxAvatarDefaults.multiline },\n  });\n  return labelClass({\n    class: className,\n\n    groupItemBoxAvatarMultiline: selectPanelGroupItemBoxAvatarProps?.multiline,\n  });\n};\n\nexport const selectPanelGroupItemBoxAvatarIconClass = ({\n  className,\n  selectPanelGroupItemBoxAvatarProps,\n}: SelectPanelGroupItemBoxAvatarType) => {\n  const iconClass = tv({\n    base: \"text-primary-600 group-data-[disabled]/selectPanelGroupItem:text-base-400\",\n    variants: { groupItemBoxAvatarMultiline: { false: \"w-3 h-3\", true: \"w-6 h-6\" } },\n\n    defaultVariants: { groupItemBoxAvatarMultiline: selectPanelGroupItemBoxAvatarDefaults.multiline },\n  });\n  return iconClass({\n    class: className,\n\n    groupItemBoxAvatarMultiline: selectPanelGroupItemBoxAvatarProps?.multiline,\n  });\n};\n\nexport const SelectPanelGroupItemBoxAvatarLayout = ({\n  renderRoot,\n  styleProps: { className, selectPanelGroupItemBoxAvatarProps },\n  imageSlot,\n  labelSlot,\n}: {\n  renderRoot: RenderRoot;\n  styleProps: SelectPanelGroupItemBoxAvatarType;\n  imageSlot: React.ReactNode;\n  labelSlot: React.ReactNode;\n}) =>\n  renderRoot(\n    <>\n      {imageSlot}\n      {labelSlot}\n    </>,\n    tv({\n      base: \"flex flex-row justify-center items-center\",\n      variants: { groupItemBoxAvatarMultiline: { false: \"h-7 w-7\", true: \"h-10 w-10\" } },\n\n      defaultVariants: { groupItemBoxAvatarMultiline: selectPanelGroupItemBoxAvatarDefaults.multiline },\n    })({\n      class: className,\n      groupItemBoxAvatarMultiline: selectPanelGroupItemBoxAvatarProps?.multiline,\n    }),\n  );\nexport const SelectPanelGroupItemBoxAvatarWithIconLayout = ({\n  renderRoot,\n  styleProps: { className, selectPanelGroupItemBoxAvatarProps },\n  imageSlot,\n  iconSlot,\n}: {\n  renderRoot: RenderRoot;\n  styleProps: SelectPanelGroupItemBoxAvatarType;\n  imageSlot: React.ReactNode;\n  iconSlot: React.ReactNode;\n}) =>\n  renderRoot(\n    <>\n      {imageSlot}\n      {iconSlot}\n    </>,\n    tv({\n      base: \"flex flex-row justify-center items-center\",\n      variants: { groupItemBoxAvatarMultiline: { false: \"h-7 w-7\", true: \"h-10 w-10\" } },\n\n      defaultVariants: { groupItemBoxAvatarMultiline: selectPanelGroupItemBoxAvatarDefaults.multiline },\n    })({\n      class: className,\n      groupItemBoxAvatarMultiline: selectPanelGroupItemBoxAvatarProps?.multiline,\n    }),\n  );\n\nexport type SelectPanelGroupItemBoxIconBoxStyleProps = {\n  multiline?: true | false;\n};\n\nexport type SelectPanelGroupItemBoxIconBoxType = {\n  className?: string;\n  selectPanelGroupItemBoxIconBoxProps?: SelectPanelGroupItemBoxIconBoxStyleProps;\n  selectPanelProps?: SelectPanelStyleProps;\n};\n\nexport const selectPanelGroupItemBoxIconBoxDefaults: Required<SelectPanelGroupItemBoxIconBoxStyleProps> = {\n  multiline: false,\n};\n\nexport const selectPanelGroupItemBoxIconBoxClass = ({\n  className,\n  selectPanelGroupItemBoxIconBoxProps,\n}: SelectPanelGroupItemBoxIconBoxType) => {\n  const rootClass = tv({\n    base: \"group/selectPanelGroupItemBoxIconBox rounded-md\",\n    variants: {\n      groupItemBoxIconBoxMultiline: {\n        false: \"\",\n        true: \"bg-base-100 group-active/selectPanelGroupItem:bg-base-100 group-data-[disabled]/selectPanelGroupItem:bg-base-100 group-hover/selectPanelGroupItem:bg-base-50 group-data-[highlighted]/selectPanelGroupItem:bg-base-50\",\n      },\n    },\n\n    defaultVariants: { groupItemBoxIconBoxMultiline: selectPanelGroupItemBoxIconBoxDefaults.multiline },\n  });\n  return rootClass({\n    class: className,\n    groupItemBoxIconBoxMultiline: selectPanelGroupItemBoxIconBoxProps?.multiline,\n  });\n};\n\nexport const selectPanelGroupItemBoxIconBoxIconClass = ({\n  className,\n  selectPanelGroupItemBoxIconBoxProps,\n}: SelectPanelGroupItemBoxIconBoxType) => {\n  const iconClass = tv({\n    base: \"text-base-600 group-data-[disabled]/selectPanelGroupItem:text-base-400\",\n    variants: { groupItemBoxIconBoxMultiline: { false: \"w-5 h-5\", true: \"w-6 h-6\" } },\n\n    defaultVariants: { groupItemBoxIconBoxMultiline: selectPanelGroupItemBoxIconBoxDefaults.multiline },\n  });\n  return iconClass({\n    class: className,\n\n    groupItemBoxIconBoxMultiline: selectPanelGroupItemBoxIconBoxProps?.multiline,\n  });\n};\n\nexport const SelectPanelGroupItemBoxIconBoxLayout = ({\n  renderRoot,\n  styleProps: { className, selectPanelGroupItemBoxIconBoxProps },\n  iconSlot,\n}: {\n  renderRoot: RenderRoot;\n  styleProps: SelectPanelGroupItemBoxIconBoxType;\n  iconSlot: React.ReactNode;\n}) =>\n  renderRoot(\n    <>{iconSlot}</>,\n    tv({\n      base: \"flex flex-row justify-center items-center\",\n      variants: { groupItemBoxIconBoxMultiline: { false: \"h-fit w-fit\", true: \"h-10 w-10\" } },\n\n      defaultVariants: { groupItemBoxIconBoxMultiline: selectPanelGroupItemBoxIconBoxDefaults.multiline },\n    })({\n      class: className,\n      groupItemBoxIconBoxMultiline: selectPanelGroupItemBoxIconBoxProps?.multiline,\n    }),\n  );\n\n",
        "target": "underatom/components/radix/select-panel/select-panel.tsx"
      }
    ]
  },
  {
    "name": "select-trigger",
    "type": "registry:ui",
    "relativePath": "radix/select-trigger",
    "stylingName": "select-trigger.tsx",
    "dependencies": [
      "@radix-ui/react-select",
      "@radix-ui/react-avatar",
      "react-aria-components",
      "react-aria"
    ],
    "files": [
      {
        "type": "registry:ui",
        "path": "ui/radix/select-trigger/SelectTrigger.atoms.tsx",
        "content": "import { AvatarImageProps } from \"@radix-ui/react-avatar\";\nimport {\n  SelectTriggerBoxAvatarLayout,\n  SelectTriggerBoxAvatarWithIconLayout,\n  SelectTriggerBoxLayout,\n  SelectTriggerBoxTagAvatarLayout,\n  SelectTriggerBoxTagAvatarWithIconLayout,\n  SelectTriggerBoxTagDismissLayout,\n  SelectTriggerBoxTagLayout,\n  SelectTriggerBoxTagWithAvatarLayout,\n  SelectTriggerBoxTagWithIconLayout,\n  SelectTriggerBoxWithAvatarLayout,\n  SelectTriggerBoxWithTagsLayout,\n  SelectTriggerLayout,\n} from \"./select-trigger\";\nimport {\n  USelectTriggerAsterisk,\n  USelectTriggerBoxAvatarIcon,\n  USelectTriggerBoxAvatarImage,\n  USelectTriggerBoxAvatarLabel,\n  USelectTriggerBoxAvatarRoot,\n  USelectTriggerBoxAvatarRootProps,\n  USelectTriggerBoxCaret,\n  USelectTriggerBoxIcon,\n  USelectTriggerBoxRoot,\n  USelectTriggerBoxRootProps,\n  USelectTriggerBoxTagAvatarIcon,\n  USelectTriggerBoxTagAvatarImage,\n  USelectTriggerBoxTagAvatarLabel,\n  USelectTriggerBoxTagAvatarRoot,\n  USelectTriggerBoxTagAvatarRootProps,\n  USelectTriggerBoxTagDismissIcon,\n  USelectTriggerBoxTagDismissRoot,\n  USelectTriggerBoxTagDismissRootProps,\n  USelectTriggerBoxTagIcon,\n  USelectTriggerBoxTagLabel,\n  USelectTriggerBoxTagLabelProps,\n  USelectTriggerBoxTagRoot,\n  USelectTriggerBoxTagRootProps,\n  USelectTriggerBoxText,\n  USelectTriggerBoxTextProps,\n  USelectTriggerDescription,\n  USelectTriggerLabel,\n  USelectTriggerRoot,\n  USelectTriggerRootProps,\n  useSelectTriggerInternalProvider,\n} from \"./SelectTrigger.underatoms\";\nimport { forwardRef, ReactNode } from \"react\";\n\n/*\n  ====================================\n  SelectTrigger\n  ====================================\n*/\nexport type SelectTriggerProps = Omit<USelectTriggerRootProps, \"children\"> & {\n  label?: string;\n  description?: string;\n  boxSlot?: ReactNode;\n};\nexport const SelectTrigger = ({ label, description, boxSlot, ...props }: SelectTriggerProps) => (\n  <SelectTriggerLayout\n    renderRoot={(children, className) => (\n      <USelectTriggerRoot {...props} className={className}>\n        {children}\n      </USelectTriggerRoot>\n    )}\n    styleProps={{ className: props.className, selectTriggerProps: props }}\n    labelSlot={label && <USelectTriggerLabel>{label}</USelectTriggerLabel>}\n    descriptionSlot={description && <USelectTriggerDescription>{description}</USelectTriggerDescription>}\n    asteriskSlot={props.required && <USelectTriggerAsterisk />}\n    boxSlot={<>{boxSlot}</>}\n  />\n);\n\n/*\n  ====================================\n  SelectTriggerBox\n  ====================================\n*/\nexport type SelectTriggerBoxProps = USelectTriggerBoxRootProps & {\n  icon?: (className: string) => ReactNode;\n  textProps?: USelectTriggerBoxTextProps;\n};\n\nexport const SelectTriggerBox = forwardRef<HTMLButtonElement, SelectTriggerBoxProps>(\n  ({ icon, textProps, ...props }, forwardedRef) => {\n    const selectTriggerProps = useSelectTriggerInternalProvider();\n    return (\n      <SelectTriggerBoxLayout\n        renderRoot={(children, className) => (\n          <USelectTriggerBoxRoot ref={forwardedRef} {...props} className={className}>\n            {children}\n          </USelectTriggerBoxRoot>\n        )}\n        styleProps={{ className: props.className, selectTriggerProps }}\n        iconSlot={icon && <USelectTriggerBoxIcon>{icon}</USelectTriggerBoxIcon>}\n        textSlot={<USelectTriggerBoxText {...textProps} />}\n        caretSlot={<USelectTriggerBoxCaret />}\n      />\n    );\n  },\n);\n\nexport type SelectTriggerBoxWithAvatar = USelectTriggerBoxRootProps & {\n  avatarSlot?: ReactNode;\n  textProps?: USelectTriggerBoxTextProps;\n};\nexport const SelectTriggerBoxWithAvatar = ({ avatarSlot, textProps, ...props }: SelectTriggerBoxWithAvatar) => {\n  const selectTriggerProps = useSelectTriggerInternalProvider();\n  return (\n    <SelectTriggerBoxWithAvatarLayout\n      renderRoot={(children, className) => (\n        <USelectTriggerBoxRoot {...props} className={className}>\n          {children}\n        </USelectTriggerBoxRoot>\n      )}\n      styleProps={{ className: props.className, selectTriggerProps }}\n      avatarSlot={avatarSlot}\n      textSlot={<USelectTriggerBoxText {...textProps} />}\n      caretSlot={<USelectTriggerBoxCaret />}\n    />\n  );\n};\nexport type SelectTriggerBoxWithTags = USelectTriggerBoxRootProps & {\n  tagSlots: ReactNode;\n  textProps?: USelectTriggerBoxTextProps;\n};\nexport const SelectTriggerBoxWithTags = ({ tagSlots, textProps, ...props }: SelectTriggerBoxWithTags) => {\n  const selectTriggerProps = useSelectTriggerInternalProvider();\n  return (\n    <SelectTriggerBoxWithTagsLayout\n      renderRoot={(children, className) => (\n        <USelectTriggerBoxRoot {...props} className={className}>\n          {children}\n        </USelectTriggerBoxRoot>\n      )}\n      styleProps={{ className: props.className, selectTriggerProps }}\n      tagSlots={tagSlots}\n      caretSlot={<USelectTriggerBoxCaret />}\n      textSlot={textProps?.hidden ? undefined : <USelectTriggerBoxText {...textProps} />}\n    />\n  );\n};\n\n/*\n  ====================================\n  SelectTriggerBoxAvatar\n  ====================================\n*/\n\nexport type SelectTriggerBoxAvatarProps = Omit<USelectTriggerBoxAvatarRootProps, \"children\"> & {\n  imageProps?: AvatarImageProps;\n  fallbackText?: string;\n};\nexport const SelectTriggerBoxAvatar = ({ imageProps, fallbackText, ...props }: SelectTriggerBoxAvatarProps) => {\n  const selectTriggerProps = useSelectTriggerInternalProvider();\n  return (\n    <SelectTriggerBoxAvatarLayout\n      renderRoot={(children, className) => (\n        <USelectTriggerBoxAvatarRoot {...props} className={className}>\n          {children}\n        </USelectTriggerBoxAvatarRoot>\n      )}\n      styleProps={{ className: props.className, selectTriggerProps }}\n      imageSlot={<USelectTriggerBoxAvatarImage {...imageProps} />}\n      labelSlot={fallbackText && <USelectTriggerBoxAvatarLabel>{fallbackText}</USelectTriggerBoxAvatarLabel>}\n    />\n  );\n};\n\nexport type SelectTriggerBoxAvatarWithIcon = Omit<USelectTriggerBoxAvatarRootProps, \"children\"> & {\n  imageProps?: AvatarImageProps;\n  fallbackIcon?: (className: string) => ReactNode;\n};\nexport const SelectTriggerBoxAvatarWithIcon = ({\n  imageProps,\n  fallbackIcon,\n  ...props\n}: SelectTriggerBoxAvatarWithIcon) => {\n  const selectTriggerProps = useSelectTriggerInternalProvider();\n  return (\n    <SelectTriggerBoxAvatarWithIconLayout\n      renderRoot={(children, className) => (\n        <USelectTriggerBoxAvatarRoot {...props} className={className}>\n          {children}\n        </USelectTriggerBoxAvatarRoot>\n      )}\n      styleProps={{ className: props.className, selectTriggerProps }}\n      iconSlot={fallbackIcon && <USelectTriggerBoxAvatarIcon>{fallbackIcon}</USelectTriggerBoxAvatarIcon>}\n      imageSlot={<USelectTriggerBoxAvatarImage {...imageProps} />}\n    />\n  );\n};\n\n/*\n  ====================================\n  SelectTriggerBoxTag\n  ====================================\n*/\n\nexport type SelectTriggerBoxTagProps = USelectTriggerBoxTagRootProps & {\n  labelProps?: USelectTriggerBoxTagLabelProps;\n  onDismiss?: () => void;\n};\nexport const SelectTriggerBoxTag = ({ labelProps, onDismiss, ...props }: SelectTriggerBoxTagProps) => {\n  const selectTriggerProps = useSelectTriggerInternalProvider();\n  return (\n    <SelectTriggerBoxTagLayout\n      renderRoot={(children, className) => (\n        <USelectTriggerBoxTagRoot {...props} className={className}>\n          {children}\n        </USelectTriggerBoxTagRoot>\n      )}\n      styleProps={{ className: props.className, selectTriggerProps }}\n      labelSlot={<USelectTriggerBoxTagLabel {...labelProps} />}\n      dismissSlot={onDismiss && <SelectTriggerBoxTagDismiss onPress={onDismiss} />}\n    />\n  );\n};\n\nexport type SelectTriggerBoxTagWithIconProps = USelectTriggerBoxTagRootProps & {\n  icon?: (className: string) => ReactNode;\n  labelProps?: USelectTriggerBoxTagLabelProps;\n  onDismiss?: () => void;\n};\nexport const SelectTriggerBoxTagWithIcon = ({\n  icon,\n  labelProps,\n  onDismiss,\n  ...props\n}: SelectTriggerBoxTagWithIconProps) => {\n  const selectTriggerProps = useSelectTriggerInternalProvider();\n  return (\n    <SelectTriggerBoxTagWithIconLayout\n      renderRoot={(children, className) => (\n        <USelectTriggerBoxTagRoot {...props} className={className}>\n          {children}\n        </USelectTriggerBoxTagRoot>\n      )}\n      styleProps={{ className: props.className, selectTriggerProps }}\n      iconSlot={icon && <USelectTriggerBoxTagIcon>{icon}</USelectTriggerBoxTagIcon>}\n      labelSlot={<USelectTriggerBoxTagLabel {...labelProps} />}\n      dismissSlot={onDismiss && <SelectTriggerBoxTagDismiss onPress={onDismiss} />}\n    />\n  );\n};\n\nexport type SelectTriggerBoxTagWithAvatarProps = USelectTriggerBoxTagRootProps & {\n  labelProps?: USelectTriggerBoxTagLabelProps;\n  onDismiss?: () => void;\n  avatarSlot?: ReactNode;\n};\nexport const SelectTriggerBoxTagWithAvatar = ({\n  avatarSlot,\n  labelProps,\n  onDismiss,\n  ...props\n}: SelectTriggerBoxTagWithAvatarProps) => {\n  const selectTriggerProps = useSelectTriggerInternalProvider();\n  return (\n    <SelectTriggerBoxTagWithAvatarLayout\n      renderRoot={(children, className) => (\n        <USelectTriggerBoxTagRoot {...props} className={className}>\n          {children}\n        </USelectTriggerBoxTagRoot>\n      )}\n      styleProps={{ className: props.className, selectTriggerProps }}\n      labelSlot={<USelectTriggerBoxTagLabel {...labelProps} />}\n      dismissSlot={onDismiss && <SelectTriggerBoxTagDismiss onPress={onDismiss} />}\n      avatarSlot={avatarSlot}\n    />\n  );\n};\n\n/*\n  ====================================\n  SelectTriggerBoxTagDismiss\n  ====================================\n*/\n\nexport type SelectTriggerBoxTagDismissProps = USelectTriggerBoxTagDismissRootProps;\nexport const SelectTriggerBoxTagDismiss = (props: SelectTriggerBoxTagDismissProps) => {\n  const selectTriggerProps = useSelectTriggerInternalProvider();\n  return (\n    <SelectTriggerBoxTagDismissLayout\n      renderRoot={(children, className) => (\n        <USelectTriggerBoxTagDismissRoot {...props} className={className}>\n          {children}\n        </USelectTriggerBoxTagDismissRoot>\n      )}\n      styleProps={{ className: props.className, selectTriggerProps }}\n      iconSlot={<USelectTriggerBoxTagDismissIcon />}\n    />\n  );\n};\n\n/*\n  ====================================\n  SelectTriggerBoxTagAvatar\n  ====================================\n*/\n\nexport type SelectTriggerBoxTagAvatar = Omit<USelectTriggerBoxTagAvatarRootProps, \"children\"> & {\n  imageProps?: AvatarImageProps;\n  fallbackText?: string;\n};\nexport const SelectTriggerBoxTagAvatar = ({ imageProps, fallbackText, ...props }: SelectTriggerBoxTagAvatar) => {\n  const selectTriggerProps = useSelectTriggerInternalProvider();\n  return (\n    <SelectTriggerBoxTagAvatarLayout\n      renderRoot={(children, className) => (\n        <USelectTriggerBoxTagAvatarRoot {...props} className={className}>\n          {children}\n        </USelectTriggerBoxTagAvatarRoot>\n      )}\n      styleProps={{ className: props.className, selectTriggerProps }}\n      imageSlot={imageProps && <USelectTriggerBoxTagAvatarImage {...imageProps} />}\n      labelSlot={fallbackText && <USelectTriggerBoxTagAvatarLabel>{fallbackText}</USelectTriggerBoxTagAvatarLabel>}\n    />\n  );\n};\nexport type SelectTriggerBoxTagAvatarWithIcon = Omit<USelectTriggerBoxTagAvatarRootProps, \"children\"> & {\n  imageProps?: AvatarImageProps;\n  fallbackIcon: (className: string) => ReactNode;\n};\nexport const SelectTriggerBoxTagAvatarWithIcon = ({\n  imageProps,\n  fallbackIcon,\n  ...props\n}: SelectTriggerBoxTagAvatarWithIcon) => {\n  const selectTriggerProps = useSelectTriggerInternalProvider();\n  return (\n    <SelectTriggerBoxTagAvatarWithIconLayout\n      renderRoot={(children, className) => (\n        <USelectTriggerBoxTagAvatarRoot {...props} className={className}>\n          {children}\n        </USelectTriggerBoxTagAvatarRoot>\n      )}\n      styleProps={{ className: props.className, selectTriggerProps }}\n      imageSlot={imageProps && <USelectTriggerBoxTagAvatarImage {...imageProps} />}\n      iconSlot={fallbackIcon && <USelectTriggerBoxTagAvatarIcon>{fallbackIcon}</USelectTriggerBoxTagAvatarIcon>}\n    />\n  );\n};\n",
        "target": "underatom/components/radix/select-trigger/SelectTrigger.atoms.tsx"
      },
      {
        "type": "registry:ui",
        "path": "ui/radix/select-trigger/SelectTrigger.underatoms.tsx",
        "content": "import * as RadixSelect from \"@radix-ui/react-select\";\nimport * as Avatar from \"@radix-ui/react-avatar\";\nimport {\n  SelectTriggerStyleProps,\n  selectTriggerClass,\n  selectTriggerLabelClass,\n  selectTriggerDescriptionClass,\n  selectTriggerBoxClass,\n  selectTriggerAsteriskClass,\n  selectTriggerBoxIconClass,\n  selectTriggerBoxTextClass,\n  selectTriggerBoxCaretClass,\n  selectTriggerBoxTagLabelClass,\n  selectTriggerBoxTagClass,\n  selectTriggerBoxTagIconClass,\n  selectTriggerBoxAvatarClass,\n  selectTriggerBoxAvatarLabelClass,\n  selectTriggerBoxAvatarIconClass,\n  selectTriggerBoxAvatarImageClass,\n  selectTriggerBoxTagAvatarClass,\n  selectTriggerBoxTagAvatarLabelClass,\n  selectTriggerBoxTagAvatarIconClass,\n  selectTriggerBoxTagAvatarImageClass,\n  selectTriggerBoxTagDismissClass,\n  selectTriggerBoxTagDismissIconClass,\n} from \"./select-trigger\";\nimport { forwardRef, ReactNode, useId } from \"react\";\nimport { Button, ButtonProps } from \"react-aria-components\";\nimport { getGenericContext } from \"../../../utils/utils\";\nimport { mergeProps, useFocusRing } from \"react-aria\";\nimport { CaretDown, X } from \"../../../utils/Icons\";\n\n/*\n  ====================================\n  SelectTrigger\n  ====================================\n*/\n\nexport const { Provider: SelectTriggerInternalProvider, useComponentContext: useSelectTriggerInternalProvider } =\n  getGenericContext<USelectTriggerRootProps>(\"SelectTriggerInternalProvider\");\n\nexport type USelectTriggerRootProps = React.ComponentPropsWithoutRef<\"div\"> &\n  SelectTriggerStyleProps & {\n    invalid?: boolean;\n    required?: boolean;\n    disabled?: boolean;\n  };\nexport const USelectTriggerRoot = (props: USelectTriggerRootProps) => {\n  const generatedId = useId();\n\n  return (\n    <div\n      {...props}\n      className={selectTriggerClass({ className: props.className, selectTriggerProps: props })}\n      data-invalid={!!props.invalid}\n      data-required={!!props.required}\n      data-disabled={!!props.disabled}\n    >\n      <SelectTriggerInternalProvider value={{ ...props, id: generatedId }}>\n        {props.children}\n      </SelectTriggerInternalProvider>\n    </div>\n  );\n};\n\nexport type USelectTriggerLabelProps = React.ComponentPropsWithoutRef<\"label\">;\nexport const USelectTriggerLabel = (props: USelectTriggerLabelProps) => {\n  const selectTriggerProps = useSelectTriggerInternalProvider();\n  const { id } = useSelectTriggerInternalProvider();\n  return (\n    <label\n      {...props}\n      htmlFor={id}\n      className={selectTriggerLabelClass({ className: props.className, selectTriggerProps })}\n    />\n  );\n};\n\nexport type USelectTriggerDescriptionProps = React.ComponentPropsWithoutRef<\"span\">;\nexport const USelectTriggerDescription = (props: USelectTriggerDescriptionProps) => {\n  const selectTriggerProps = useSelectTriggerInternalProvider();\n  return (\n    <span {...props} className={selectTriggerDescriptionClass({ className: props.className, selectTriggerProps })} />\n  );\n};\n\nexport type USelectTriggerAsteriskProps = React.ComponentPropsWithoutRef<\"span\">;\nexport const USelectTriggerAsterisk = (props: USelectTriggerAsteriskProps) => {\n  const selectTriggerProps = useSelectTriggerInternalProvider();\n  return (\n    <span {...props} className={selectTriggerAsteriskClass({ className: props.className, selectTriggerProps })}>\n      *\n    </span>\n  );\n};\n\n/*\n  ====================================\n  SelectTriggerBox\n  ====================================\n*/\n\nexport type USelectTriggerBoxRootProps = Omit<RadixSelect.SelectTriggerProps, \"disabled\">;\nexport const USelectTriggerBoxRoot = forwardRef<HTMLButtonElement, USelectTriggerBoxRootProps>(\n  (props, forwardedRef) => {\n    const selectTriggerProps = useSelectTriggerInternalProvider();\n    const { isFocusVisible, focusProps } = useFocusRing();\n\n    return (\n      <RadixSelect.SelectTrigger\n        ref={forwardedRef}\n        {...mergeProps(props, focusProps)}\n        className={selectTriggerBoxClass({ className: props.className, selectTriggerProps })}\n        data-ring={isFocusVisible}\n        disabled={selectTriggerProps.disabled}\n      >\n        {props.children}\n      </RadixSelect.SelectTrigger>\n    );\n  },\n);\n\nexport type USelectTriggerBoxIconProps = {\n  children: (className: string) => React.ReactNode;\n  className?: string;\n};\nexport const USelectTriggerBoxIcon = ({ children, className }: USelectTriggerBoxIconProps) => {\n  const selectTriggerProps = useSelectTriggerInternalProvider();\n  return <>{children(selectTriggerBoxIconClass({ className, selectTriggerProps }))}</>;\n};\n\nexport type USelectTriggerBoxTextProps = RadixSelect.SelectValueProps;\nexport const USelectTriggerBoxText = forwardRef<HTMLSpanElement, USelectTriggerBoxTextProps>((props, forwardedRef) => {\n  const selectTriggerProps = useSelectTriggerInternalProvider();\n  return (\n    <span className={selectTriggerBoxTextClass({ className: props.className, selectTriggerProps })}>\n      <RadixSelect.SelectValue ref={forwardedRef} {...props} />\n    </span>\n  );\n});\n\nexport type USelectTriggerBoxCaretProps = RadixSelect.SelectIconProps;\nexport const USelectTriggerBoxCaret = (props: USelectTriggerBoxCaretProps) => {\n  const selectTriggerProps = useSelectTriggerInternalProvider();\n  return (\n    <RadixSelect.SelectIcon {...props}>\n      <CaretDown className={selectTriggerBoxCaretClass({ className: props.className, selectTriggerProps })} />\n    </RadixSelect.SelectIcon>\n  );\n};\n\n/*\n  ====================================\n  SelectTriggerBoxTag\n  ====================================\n*/\n\nexport type USelectTriggerBoxTagRootProps = React.ComponentPropsWithoutRef<\"div\">;\nexport const USelectTriggerBoxTagRoot = (props: USelectTriggerBoxTagRootProps) => {\n  const selectTriggerProps = useSelectTriggerInternalProvider();\n  return <div {...props} className={selectTriggerBoxTagClass({ className: props.className, selectTriggerProps })} />;\n};\n\nexport type USelectTriggerBoxTagLabelProps = RadixSelect.SelectValueProps;\nexport const USelectTriggerBoxTagLabel = forwardRef<HTMLSpanElement, USelectTriggerBoxTagLabelProps>(\n  (props, forwardedRef) => {\n    const selectTriggerProps = useSelectTriggerInternalProvider();\n    return (\n      <span className={selectTriggerBoxTagLabelClass({ className: props.className, selectTriggerProps })}>\n        <RadixSelect.SelectValue ref={forwardedRef} {...props} />\n      </span>\n    );\n  },\n);\n\nexport type USelectTriggerBoxTagIconProps = {\n  children: (className: string) => ReactNode;\n  className?: string;\n};\nexport const USelectTriggerBoxTagIcon = ({ children, className }: USelectTriggerBoxTagIconProps) => {\n  const selectTriggerProps = useSelectTriggerInternalProvider();\n  return <>{children(selectTriggerBoxTagIconClass({ className, selectTriggerProps }))}</>;\n};\n\n/*\n  ====================================\n  SelectTriggerBoxAvatar\n  ====================================\n*/\n\nexport type USelectTriggerBoxAvatarRootProps = Avatar.AvatarProps & {\n  /** Avatar content */\n  children: Avatar.AvatarProps[\"children\"];\n};\n\nexport const USelectTriggerBoxAvatarRoot = (props: USelectTriggerBoxAvatarRootProps) => {\n  const selectTriggerProps = useSelectTriggerInternalProvider();\n  return (\n    <Avatar.Root {...props} className={selectTriggerBoxAvatarClass({ className: props.className, selectTriggerProps })}>\n      {props.children}\n    </Avatar.Root>\n  );\n};\n\nexport type USelectTriggerBoxAvatarFallbackProps = Avatar.AvatarFallbackProps;\nexport const USelectTriggerBoxAvatarFallback = (props: USelectTriggerBoxAvatarFallbackProps) => {\n  return <Avatar.Fallback {...props} />;\n};\n\nexport type USelectTriggerBoxAvatarLabelProps = {\n  /** Text content */\n  children: ReactNode;\n  className?: string;\n};\nexport const USelectTriggerBoxAvatarLabel = ({ children, className }: USelectTriggerBoxAvatarLabelProps) => {\n  const selectTriggerProps = useSelectTriggerInternalProvider();\n  return <span className={selectTriggerBoxAvatarLabelClass({ className, selectTriggerProps })}>{children}</span>;\n};\n\nexport type USelectTriggerBoxAvatarIconProps = {\n  /** Icon render function */\n  children: (className: string) => ReactNode;\n  className?: string;\n};\nexport const USelectTriggerBoxAvatarIcon = ({ children, className }: USelectTriggerBoxAvatarIconProps) => {\n  const selectTriggerProps = useSelectTriggerInternalProvider();\n  return <>{children(selectTriggerBoxAvatarIconClass({ className, selectTriggerProps }))}</>;\n};\n\nexport type USelectTriggerBoxAvatarImageProps = Avatar.AvatarImageProps;\nexport const USelectTriggerBoxAvatarImage = (props: USelectTriggerBoxAvatarImageProps) => {\n  const selectTriggerProps = useSelectTriggerInternalProvider();\n  return (\n    <Avatar.Image\n      className={selectTriggerBoxAvatarImageClass({ className: props.className, selectTriggerProps })}\n      {...props}\n    />\n  );\n};\n\n/*\n  ====================================\n  SelectTriggerBoxTagAvatar\n  ====================================\n*/\n\nexport type USelectTriggerBoxTagAvatarRootProps = Avatar.AvatarProps & {\n  /** Avatar content */\n  children: Avatar.AvatarProps[\"children\"];\n  className?: string;\n};\n\nexport const USelectTriggerBoxTagAvatarRoot = (props: USelectTriggerBoxTagAvatarRootProps) => {\n  const selectTriggerProps = useSelectTriggerInternalProvider();\n  return (\n    <Avatar.Root\n      {...props}\n      className={selectTriggerBoxTagAvatarClass({ className: props.className, selectTriggerProps })}\n    >\n      {props.children}\n    </Avatar.Root>\n  );\n};\n\nexport type USelectTriggerBoxTagAvatarFallbackProps = Avatar.AvatarFallbackProps;\nexport const USelectTriggerBoxTagAvatarFallback = (props: USelectTriggerBoxTagAvatarFallbackProps) => {\n  return <Avatar.Fallback {...props} />;\n};\n\nexport type USelectTriggerBoxTagAvatarLabelProps = {\n  /** Text content */\n  children: ReactNode;\n  className?: string;\n};\nexport const USelectTriggerBoxTagAvatarLabel = ({ children, className }: USelectTriggerBoxTagAvatarLabelProps) => {\n  const selectTriggerProps = useSelectTriggerInternalProvider();\n  return <span className={selectTriggerBoxTagAvatarLabelClass({ className, selectTriggerProps })}>{children}</span>;\n};\n\nexport type USelectTriggerBoxTagAvatarIconProps = {\n  /** Icon render function */\n  children: (className: string) => ReactNode;\n  className?: string;\n};\nexport const USelectTriggerBoxTagAvatarIcon = ({ children, className }: USelectTriggerBoxTagAvatarIconProps) => {\n  const selectTriggerProps = useSelectTriggerInternalProvider();\n  return <>{children(selectTriggerBoxTagAvatarIconClass({ className, selectTriggerProps }))}</>;\n};\n\nexport type USelectTriggerBoxTagAvatarImageProps = Avatar.AvatarImageProps;\nexport const USelectTriggerBoxTagAvatarImage = (props: USelectTriggerBoxTagAvatarImageProps) => {\n  const selectTriggerProps = useSelectTriggerInternalProvider();\n  return (\n    <Avatar.Image\n      className={selectTriggerBoxTagAvatarImageClass({ className: props.className, selectTriggerProps })}\n      {...props}\n    />\n  );\n};\n\n/*\n  ====================================\n  SelectTriggerBoxTagDismiss\n  ====================================\n*/\n\nexport type USelectTriggerBoxTagDismissRootProps = ButtonProps & {\n  className?: string;\n};\nexport const USelectTriggerBoxTagDismissRoot = (props: USelectTriggerBoxTagDismissRootProps) => {\n  const selectTriggerProps = useSelectTriggerInternalProvider();\n  const { disabled: parentDisabled } = useSelectTriggerInternalProvider();\n  const propsWithDisabled = { ...props, isDisabled: !!props.isDisabled || !!parentDisabled };\n\n  return (\n    <Button\n      {...propsWithDisabled}\n      className={selectTriggerBoxTagDismissClass({ className: props.className, selectTriggerProps })}\n    />\n  );\n};\nexport type USelectTriggerBoxTagDismissIconProps = {\n  className?: string;\n};\nexport const USelectTriggerBoxTagDismissIcon = (props: USelectTriggerBoxTagDismissIconProps) => {\n  const selectTriggerProps = useSelectTriggerInternalProvider();\n  return <X className={selectTriggerBoxTagDismissIconClass({ className: props.className, selectTriggerProps })} />;\n};\n",
        "target": "underatom/components/radix/select-trigger/SelectTrigger.underatoms.tsx"
      },
      {
        "type": "registry:ui",
        "path": "ui/radix/select-trigger/select-trigger.tsx",
        "content": "import { tv } from \"../../../utils/extendedTV\";\nimport type { RenderRoot } from \"../../../utils/utils\";\n\n/*\n  ====================================\n  SelectTrigger\n  ====================================\n*/\n\nexport type SelectTriggerStyleProps = {\n  attachment?: \"none\" | \"start\" | \"center\" | \"end\";\n  size?: \"sm\" | \"md\" | \"lg\";\n};\n\nexport type SelectTriggerType = {\n  className?: string;\n  selectTriggerProps?: SelectTriggerStyleProps;\n};\n\nexport const selectTriggerDefaults: Required<SelectTriggerStyleProps> = {\n  attachment: \"none\",\n  size: \"md\",\n};\n\nexport const selectTriggerClass = ({ className }: SelectTriggerType) => {\n  return `group/selectTrigger  ${className}`;\n};\n\nexport const selectTriggerLabelClass = ({ className }: SelectTriggerType) => {\n  return `text-primary-800 text-sm font-text font-medium group-data-[disabled=true]/selectTrigger:text-primary-300 ${className}`;\n};\n\nexport const selectTriggerDescriptionClass = ({ className }: SelectTriggerType) => {\n  return `\n  text-primary-600\n  text-sm\n  font-text\n  font-normal\n  group-data-[invalid=true]/selectTrigger:text-danger-500\n  group-data-[disabled=true]/selectTrigger:text-primary-300\n  group-data-[disabled=true]/selectTrigger:group-data-[invalid=true]/selectTrigger:text-primary-300\n  ${className}\n  `;\n};\n\nexport const selectTriggerAsteriskClass = ({ className }: SelectTriggerType) => {\n  return `\n  group-data-[required=true]/selectTrigger:[display:unset]\n  group-data-[required=true]/selectTrigger:text-danger-500\n  group-data-[required=true]/selectTrigger:text-[14px]\n  group-data-[required=true]/selectTrigger:font-['Inter']\n  group-data-[required=true]/selectTrigger:leading-[16.94318199157715px]\n  group-data-[required=true]/selectTrigger:font-normal\n  group-data-[disabled=true]/selectTrigger:group-data-[required=true]/selectTrigger:text-base-300\n  hidden\n  ${className}\n  `;\n};\n\nexport const SelectTriggerLayout = ({\n  renderRoot,\n  styleProps: { className },\n  labelSlot,\n  asteriskSlot,\n  boxSlot,\n  descriptionSlot,\n}: {\n  renderRoot: RenderRoot;\n  styleProps: SelectTriggerType;\n  labelSlot: React.ReactNode;\n  asteriskSlot: React.ReactNode;\n  boxSlot: React.ReactNode;\n  descriptionSlot: React.ReactNode;\n}) =>\n  renderRoot(\n    <>\n      <div className=\"h-fit w-full flex flex-row gap-[2px]\">\n        {labelSlot}\n        {asteriskSlot}\n      </div>\n      {boxSlot}\n      {descriptionSlot}\n    </>,\n    `h-fit w-full flex flex-col gap-[2px] ${className}`,\n  );\nexport type SelectTriggerBoxType = {\n  className?: string;\n  selectTriggerProps?: SelectTriggerStyleProps;\n};\n\nexport const selectTriggerBoxClass = ({ className, selectTriggerProps }: SelectTriggerBoxType) => {\n  const rootClass = tv({\n    base: `\ngroup/selectTriggerBox\n  border-solid\n  border-base-200\n  group-data-[disabled=true]/selectTrigger:border-base-200\n  border-1\n  bg-base-50\n  shadow-sm\n  transition-all\n  group-data-[disabled=true]/selectTrigger:bg-base-100\n  hover:border-base-300\n  active:border-base-950\n  data-[ring=true]:border-base-950\n  data-[state=open]:border-base-950\n  group-data-[invalid=true]/selectTrigger:border-danger-400\n  group-data-[invalid=true]/selectTrigger:hover:border-danger-600\n  group-data-[invalid=true]/selectTrigger:active:border-danger-500\n  group-data-[invalid=true]/selectTrigger:data-[ring=true]:border-danger-500\n  group-data-[invalid=true]/selectTrigger:data-[state=open]:border-danger-500\n  group-data-[disabled=true]/selectTrigger:hover:border-base-200\n  group-data-[disabled=true]/selectTrigger:active:border-base-200\n  group-data-[disabled=true]/selectTrigger:data-[ring=true]:border-base-200\n  group-data-[disabled=true]/selectTrigger:data-[state=open]:border-base-200\n  group-data-[disabled=true]/selectTrigger:group-data-[invalid=true]/selectTrigger:border-base-200\n`,\n    variants: {\n      attachment: {\n        none: \"rounded-md\",\n        start: \"rounded-l-md rounded-r-[0px]\",\n        center: \"\",\n        end: \"rounded-l-[0px] rounded-r-md\",\n      },\n    },\n\n    defaultVariants: { attachment: selectTriggerDefaults.attachment },\n  });\n  return rootClass({\n    class: className,\n    attachment: selectTriggerProps?.attachment,\n  });\n};\n\nexport const selectTriggerBoxIconClass = ({ className }: SelectTriggerBoxType) => {\n  return `w-5 h-5 text-base-700 group-data-[disabled=true]/selectTrigger:text-base-400 ${className}`;\n};\n\nexport const selectTriggerBoxTextClass = ({ className }: SelectTriggerBoxType) => {\n  return `text-base-950 text-sm font-text font-normal group-data-[disabled=true]/selectTrigger:text-primary-300 ${className}`;\n};\n\nexport const selectTriggerBoxCaretClass = ({ className }: SelectTriggerBoxType) => {\n  return `w-5 h-5 text-base-700 group-data-[disabled=true]/selectTrigger:text-base-400 ${className}`;\n};\n\nexport const SelectTriggerBoxLayout = ({\n  renderRoot,\n  styleProps: { className, selectTriggerProps },\n  iconSlot,\n  textSlot,\n  caretSlot,\n}: {\n  renderRoot: RenderRoot;\n  styleProps: SelectTriggerBoxType;\n  iconSlot: React.ReactNode;\n  textSlot: React.ReactNode;\n  caretSlot: React.ReactNode;\n}) =>\n  renderRoot(\n    <>\n      <div className=\"h-fit w-full flex flex-row items-center gap-2\">\n        {iconSlot}\n        {textSlot}\n      </div>\n      {caretSlot}\n    </>,\n    tv({\n      base: \"w-full flex flex-row items-center\",\n      variants: { size: { sm: \"h-9 gap-1 px-2\", md: \"h-11 gap-1 px-3\", lg: \"h-[48px] gap-[6px] pl-3 pr-5\" } },\n\n      defaultVariants: { size: selectTriggerDefaults.size },\n    })({\n      class: className,\n      size: selectTriggerProps?.size,\n    }),\n  );\nexport const SelectTriggerBoxWithAvatarLayout = ({\n  renderRoot,\n  styleProps: { className, selectTriggerProps },\n  avatarSlot,\n  textSlot,\n  caretSlot,\n}: {\n  renderRoot: RenderRoot;\n  styleProps: SelectTriggerBoxType;\n  avatarSlot: React.ReactNode;\n  textSlot: React.ReactNode;\n  caretSlot: React.ReactNode;\n}) =>\n  renderRoot(\n    <>\n      <div className=\"h-fit w-full flex flex-row items-center gap-2\">\n        {avatarSlot}\n        {textSlot}\n      </div>\n      {caretSlot}\n    </>,\n    tv({\n      base: \"w-full flex flex-row items-center\",\n      variants: {\n        size: {\n          sm: \"h-9 gap-1 pl-[6px] pr-3\",\n          md: \"h-11 gap-1 pl-[10px] pr-3\",\n          lg: \"h-[48px] gap-[6px] pl-[14px] pr-5\",\n        },\n      },\n\n      defaultVariants: { size: selectTriggerDefaults.size },\n    })({\n      class: className,\n      size: selectTriggerProps?.size,\n    }),\n  );\nexport const SelectTriggerBoxWithTagsLayout = ({\n  renderRoot,\n  styleProps: { className, selectTriggerProps },\n  tagSlots,\n  textSlot,\n  caretSlot,\n}: {\n  renderRoot: RenderRoot;\n  styleProps: SelectTriggerBoxType;\n  tagSlots: React.ReactNode;\n  textSlot: React.ReactNode;\n  caretSlot: React.ReactNode;\n}) =>\n  renderRoot(\n    <>\n      <div className=\"h-fit w-full flex flex-row items-center gap-1\">\n        {tagSlots}\n\n        <div\n          className={tv({\n            base: \"h-fit w-fit flex flex-row\",\n            variants: { size: { sm: \"pl-1\", md: \"pl-[6px]\", lg: \"pl-2\" } },\n\n            defaultVariants: { size: selectTriggerDefaults.size },\n          })({ size: selectTriggerProps?.size })}\n        >\n          {textSlot}\n        </div>\n      </div>\n      {caretSlot}\n    </>,\n    tv({\n      base: \"w-full flex flex-row items-center\",\n      variants: {\n        size: { sm: \"h-9 gap-1 pl-1 pr-2\", md: \"h-11 gap-1 pl-[6px] pr-3\", lg: \"h-[48px] gap-[6px] pl-2 pr-5\" },\n      },\n\n      defaultVariants: { size: selectTriggerDefaults.size },\n    })({\n      class: className,\n      size: selectTriggerProps?.size,\n    }),\n  );\n\nexport type SelectTriggerBoxTagType = {\n  className?: string;\n  selectTriggerProps?: SelectTriggerStyleProps;\n};\n\nexport const selectTriggerBoxTagClass = ({ className }: SelectTriggerBoxTagType) => {\n  return `group/selectTriggerBoxTag border-solid border-primary-200 border-1 bg-white rounded-sm group-data-[disabled=true]/selectTrigger:border-primary-100 ${className}`;\n};\n\nexport const selectTriggerBoxTagLabelClass = ({ className }: SelectTriggerBoxTagType) => {\n  return `text-base-950 text-sm font-text font-medium group-data-[disabled=true]/selectTrigger:text-base-400 ${className}`;\n};\n\nexport const selectTriggerBoxTagIconClass = ({ className }: SelectTriggerBoxTagType) => {\n  return `w-[14px] h-[14px] text-base-700 group-data-[disabled=true]/selectTrigger:text-base-400 ${className}`;\n};\n\nexport const SelectTriggerBoxTagLayout = ({\n  renderRoot,\n  styleProps: { className, selectTriggerProps },\n  labelSlot,\n  dismissSlot,\n}: {\n  renderRoot: RenderRoot;\n  styleProps: SelectTriggerBoxTagType;\n  labelSlot: React.ReactNode;\n  dismissSlot: React.ReactNode;\n}) =>\n  renderRoot(\n    <>\n      {labelSlot}\n      {dismissSlot}\n    </>,\n    tv({\n      base: \"w-fit flex flex-row justify-center items-center\",\n      variants: { size: { sm: \"h-7 gap-[10px] px-[6px]\", md: \"h-8 gap-[10px] px-2\", lg: \"h-9 gap-3 px-[10px]\" } },\n\n      defaultVariants: { size: selectTriggerDefaults.size },\n    })({\n      class: className,\n      size: selectTriggerProps?.size,\n    }),\n  );\nexport const SelectTriggerBoxTagWithIconLayout = ({\n  renderRoot,\n  styleProps: { className, selectTriggerProps },\n  iconSlot,\n  labelSlot,\n  dismissSlot,\n}: {\n  renderRoot: RenderRoot;\n  styleProps: SelectTriggerBoxTagType;\n  iconSlot: React.ReactNode;\n  labelSlot: React.ReactNode;\n  dismissSlot: React.ReactNode;\n}) =>\n  renderRoot(\n    <>\n      <div\n        className={tv({\n          base: \"h-fit w-fit flex flex-row justify-center items-center\",\n          variants: { size: { sm: \"gap-1\", md: \"gap-[6px]\", lg: \"gap-[6px]\" } },\n\n          defaultVariants: { size: selectTriggerDefaults.size },\n        })({ size: selectTriggerProps?.size })}\n      >\n        {iconSlot}\n        {labelSlot}\n      </div>\n      {dismissSlot}\n    </>,\n    tv({\n      base: \"w-fit flex flex-row justify-center items-center gap-[10px]\",\n      variants: { size: { sm: \"h-7 px-[6px]\", md: \"h-8 px-2\", lg: \"h-9 px-[10px]\" } },\n\n      defaultVariants: { size: selectTriggerDefaults.size },\n    })({\n      class: className,\n      size: selectTriggerProps?.size,\n    }),\n  );\nexport const SelectTriggerBoxTagWithAvatarLayout = ({\n  renderRoot,\n  styleProps: { className, selectTriggerProps },\n  avatarSlot,\n  labelSlot,\n  dismissSlot,\n}: {\n  renderRoot: RenderRoot;\n  styleProps: SelectTriggerBoxTagType;\n  avatarSlot: React.ReactNode;\n  labelSlot: React.ReactNode;\n  dismissSlot: React.ReactNode;\n}) =>\n  renderRoot(\n    <>\n      <div\n        className={tv({\n          base: \"h-fit w-fit flex flex-row justify-center items-center\",\n          variants: { size: { sm: \"gap-1\", md: \"gap-[6px]\", lg: \"gap-[6px]\" } },\n\n          defaultVariants: { size: selectTriggerDefaults.size },\n        })({ size: selectTriggerProps?.size })}\n      >\n        {avatarSlot}\n        {labelSlot}\n      </div>\n      {dismissSlot}\n    </>,\n    tv({\n      base: \"w-fit flex flex-row justify-center items-center gap-[10px]\",\n      variants: { size: { sm: \"h-7 pl-1 pr-[6px]\", md: \"h-8 pl-1 pr-2\", lg: \"h-9 pl-1 pr-[10px]\" } },\n\n      defaultVariants: { size: selectTriggerDefaults.size },\n    })({\n      class: className,\n      size: selectTriggerProps?.size,\n    }),\n  );\n\nexport type SelectTriggerBoxAvatarType = {\n  className?: string;\n  selectTriggerProps?: SelectTriggerStyleProps;\n};\n\nexport const selectTriggerBoxAvatarClass = ({ className }: SelectTriggerBoxAvatarType) => {\n  return `group/selectTriggerBoxAvatar bg-primary-100 rounded-xs ${className}`;\n};\n\nexport const selectTriggerBoxAvatarImageClass = ({ className }: SelectTriggerBoxAvatarType) => {\n  return `w-6 h-6 rounded-xs group-data-[disabled=true]/selectTrigger:opacity-[0.46] ${className}`;\n};\n\nexport const selectTriggerBoxAvatarLabelClass = ({ className }: SelectTriggerBoxAvatarType) => {\n  return `text-base-700 text-xs font-text font-medium group-data-[disabled=true]/selectTrigger:text-primary-300 ${className}`;\n};\n\nexport const selectTriggerBoxAvatarIconClass = ({ className }: SelectTriggerBoxAvatarType) => {\n  return `w-[14px] h-[14px] text-base-700 group-data-[disabled=true]/selectTrigger:text-primary-300 ${className}`;\n};\n\nexport const SelectTriggerBoxAvatarLayout = ({\n  renderRoot,\n  styleProps: { className },\n  imageSlot,\n  labelSlot,\n}: {\n  renderRoot: RenderRoot;\n  styleProps: SelectTriggerBoxAvatarType;\n  imageSlot: React.ReactNode;\n  labelSlot: React.ReactNode;\n}) =>\n  renderRoot(\n    <>\n      {imageSlot}\n      {labelSlot}\n    </>,\n    `h-6 w-6 flex flex-row justify-center items-center ${className}`,\n  );\nexport const SelectTriggerBoxAvatarWithIconLayout = ({\n  renderRoot,\n  styleProps: { className },\n  imageSlot,\n  iconSlot,\n}: {\n  renderRoot: RenderRoot;\n  styleProps: SelectTriggerBoxAvatarType;\n  imageSlot: React.ReactNode;\n  iconSlot: React.ReactNode;\n}) =>\n  renderRoot(\n    <>\n      {imageSlot}\n      {iconSlot}\n    </>,\n    `h-6 w-6 flex flex-row justify-center items-center ${className}`,\n  );\n\nexport type SelectTriggerBoxTagAvatarType = {\n  className?: string;\n  selectTriggerProps?: SelectTriggerStyleProps;\n};\n\nexport const selectTriggerBoxTagAvatarClass = ({ className }: SelectTriggerBoxTagAvatarType) => {\n  return `group/selectTriggerBoxTagAvatar bg-base-200 rounded-xs ${className}`;\n};\n\nexport const selectTriggerBoxTagAvatarImageClass = ({\n  className,\n  selectTriggerProps,\n}: SelectTriggerBoxTagAvatarType) => {\n  const imageClass = tv({\n    base: \"rounded-xs group-data-[disabled=true]/selectTrigger:shadow-[inset_0px_0px_0px_1000px_#d9d9d9b2]\",\n    variants: { size: { sm: \"w-5 h-5\", md: \"w-6 h-6\", lg: \"w-7 h-7\" } },\n\n    defaultVariants: { size: selectTriggerDefaults.size },\n  });\n  return imageClass({\n    class: className,\n\n    size: selectTriggerProps?.size,\n  });\n};\n\nexport const selectTriggerBoxTagAvatarLabelClass = ({ className }: SelectTriggerBoxTagAvatarType) => {\n  return `text-base-600 text-xs font-text font-medium group-data-[disabled=true]/selectTrigger:text-primary-300 ${className}`;\n};\n\nexport const selectTriggerBoxTagAvatarIconClass = ({\n  className,\n  selectTriggerProps,\n}: SelectTriggerBoxTagAvatarType) => {\n  const iconClass = tv({\n    base: \"text-base-600 group-data-[disabled=true]/selectTrigger:text-primary-300\",\n    variants: { size: { sm: \"w-3 h-3\", md: \"w-[14px] h-[14px]\", lg: \"w-5 h-5\" } },\n\n    defaultVariants: { size: selectTriggerDefaults.size },\n  });\n  return iconClass({\n    class: className,\n\n    size: selectTriggerProps?.size,\n  });\n};\n\nexport const SelectTriggerBoxTagAvatarLayout = ({\n  renderRoot,\n  styleProps: { className, selectTriggerProps },\n  imageSlot,\n  labelSlot,\n}: {\n  renderRoot: RenderRoot;\n  styleProps: SelectTriggerBoxTagAvatarType;\n  imageSlot: React.ReactNode;\n  labelSlot: React.ReactNode;\n}) =>\n  renderRoot(\n    <>\n      {imageSlot}\n      {labelSlot}\n    </>,\n    tv({\n      base: \"flex flex-row justify-center items-center\",\n      variants: { size: { sm: \"h-5 w-5\", md: \"h-6 w-6\", lg: \"h-7 w-7\" } },\n\n      defaultVariants: { size: selectTriggerDefaults.size },\n    })({\n      class: className,\n      size: selectTriggerProps?.size,\n    }),\n  );\nexport const SelectTriggerBoxTagAvatarWithIconLayout = ({\n  renderRoot,\n  styleProps: { className, selectTriggerProps },\n  imageSlot,\n  iconSlot,\n}: {\n  renderRoot: RenderRoot;\n  styleProps: SelectTriggerBoxTagAvatarType;\n  imageSlot: React.ReactNode;\n  iconSlot: React.ReactNode;\n}) =>\n  renderRoot(\n    <>\n      {imageSlot}\n      {iconSlot}\n    </>,\n    tv({\n      base: \"flex flex-row justify-center items-center\",\n      variants: { size: { sm: \"h-5 w-5\", md: \"h-6 w-6\", lg: \"h-7 w-7\" } },\n\n      defaultVariants: { size: selectTriggerDefaults.size },\n    })({\n      class: className,\n      size: selectTriggerProps?.size,\n    }),\n  );\n\nexport type SelectTriggerBoxTagDismissType = {\n  className?: string;\n  selectTriggerProps?: SelectTriggerStyleProps;\n};\n\nexport const selectTriggerBoxTagDismissClass = ({ className }: SelectTriggerBoxTagDismissType) => {\n  return `\n  group/selectTriggerBoxTagDismiss\n  rounded-xs\n  group-data-[disabled=true]/selectTrigger:data-[disabled]:rounded-xs\n  hover:bg-primary-100\n  data-[focus-visible]:bg-primary-100\n  data-[pressed]:[background:unset]\n  data-[focus-visible]:shadow-focus-ring\n  ${className}\n  `;\n};\n\nexport const selectTriggerBoxTagDismissIconClass = ({ className }: SelectTriggerBoxTagDismissType) => {\n  return `\n  w-[14px]\n  group-data-[disabled=true]/selectTrigger:group-data-[disabled]/selectTriggerBoxTagDismiss:w-[14px]\n  h-[14px]\n  group-data-[disabled=true]/selectTrigger:group-data-[disabled]/selectTriggerBoxTagDismiss:h-[14px]\n  text-base-700\n  group-hover/selectTriggerBoxTagDismiss:text-base-800\n  group-data-[focus-visible]/selectTriggerBoxTagDismiss:text-base-800\n  group-data-[pressed]/selectTriggerBoxTagDismiss:text-base-950\n  group-data-[disabled=true]/selectTrigger:group-data-[disabled]/selectTriggerBoxTagDismiss:text-base-400\n  ${className}\n  `;\n};\n\nexport const SelectTriggerBoxTagDismissLayout = ({\n  renderRoot,\n  styleProps: { className, selectTriggerProps },\n  iconSlot,\n}: {\n  renderRoot: RenderRoot;\n  styleProps: SelectTriggerBoxTagDismissType;\n  iconSlot: React.ReactNode;\n}) =>\n  renderRoot(\n    <>{iconSlot}</>,\n    tv({\n      base: \"flex flex-row justify-center items-center\",\n      variants: { size: { sm: \"h-5 w-5\", md: \"h-6 w-6\", lg: \"h-6 w-6\" } },\n\n      defaultVariants: { size: selectTriggerDefaults.size },\n    })({\n      class: className,\n      size: selectTriggerProps?.size,\n    }),\n  );\n\n",
        "target": "underatom/components/radix/select-trigger/select-trigger.tsx"
      }
    ]
  },
  {
    "name": "side-nav",
    "type": "registry:ui",
    "relativePath": "radix/side-nav",
    "stylingName": "side-nav.tsx",
    "dependencies": [
      "@radix-ui/react-accordion",
      "@radix-ui/react-toggle-group",
      "@tanstack/react-router",
      "react-aria"
    ],
    "files": [
      {
        "type": "registry:ui",
        "path": "ui/radix/side-nav/SideNav.atoms.tsx",
        "content": "import { ReactNode } from \"react\";\nimport {\n  SideNavGroupHeaderLayout,\n  SideNavGroupItemBoxBadgeLayout,\n  SideNavGroupItemBoxBadgeWithIconLayout,\n  SideNavGroupItemBoxLayout,\n  SideNavGroupItemLayout,\n  SideNavGroupLayout,\n  SideNavLayout,\n} from \"./side-nav\";\nimport {\n  USideNavGroupHeaderCaret,\n  USideNavGroupHeaderLabel,\n  USideNavGroupHeaderRootProps,\n  USideNavGroupItemBoxBadgeIcon,\n  USideNavGroupItemBoxBadgeRoot,\n  USideNavGroupItemBoxBadgeRootProps,\n  USideNavGroupItemBoxBadgeText,\n  USideNavGroupItemBoxIcon,\n  USideNavGroupItemBoxLabel,\n  USideNavGroupItemBoxRoot,\n  USideNavGroupItemBoxRootProps,\n  USideNavGroupItemRoot,\n  USideNavGroupItemRootProps,\n  USideNavGroupRoot,\n  USideNavGroupRootProps,\n  USideNavRoot,\n  USideNavRootProps,\n  USideNavGroupContent,\n  USideNavGroupHeaderRoot,\n  USideNavGroupItemLinkRoot,\n  USideNavGroupItemLinkRootProps,\n  useSideNavInternalProvider,\n} from \"./SideNav.underatoms\";\n\nimport * as Accordion from \"@radix-ui/react-accordion\";\n\n/*\n  ====================================\n  SideNav\n  ====================================\n*/\n\nexport type SideNavProps = Omit<USideNavRootProps, \"children\"> & {\n  groupSlots: ReactNode[];\n  accordionProps: Accordion.AccordionSingleProps | Accordion.AccordionMultipleProps;\n};\nexport const SideNav = ({ groupSlots, ...props }: SideNavProps) => {\n  return (\n    <SideNavLayout\n      renderRoot={(children, className) => {\n        return (\n          <USideNavRoot {...props} className={className}>\n            {children}\n          </USideNavRoot>\n        );\n      }}\n      styleProps={{ className: props.className, sideNavProps: props }}\n      groupSlots={groupSlots}\n    />\n  );\n};\n\n/*\n  ====================================\n  SideNavGroupItemBoxBadge\n  ====================================\n*/\n\nexport type SideNavGroupItemBoxBadgeProps = USideNavGroupItemBoxBadgeRootProps & {\n  text?: string;\n};\nexport const SideNavGroupItemBoxBadge = ({ text, ...props }: SideNavGroupItemBoxBadgeProps) => {\n  const sideNavProps = useSideNavInternalProvider();\n  return (\n    <SideNavGroupItemBoxBadgeLayout\n      renderRoot={(children, className) => (\n        <USideNavGroupItemBoxBadgeRoot {...props} className={className}>\n          {children}\n        </USideNavGroupItemBoxBadgeRoot>\n      )}\n      styleProps={{ className: props.className, sideNavProps }}\n      textSlot={text && <USideNavGroupItemBoxBadgeText>{text}</USideNavGroupItemBoxBadgeText>}\n    />\n  );\n};\n\nexport type SideNavGroupItemBoxBadgeWithIconProps = USideNavGroupItemBoxBadgeRootProps & {\n  icon?: (className: string) => React.ReactNode;\n  text?: string;\n};\nexport const SideNavGroupItemBoxBadgeWithIcon = ({\n  icon,\n  text,\n  color = \"base\",\n  ...props\n}: SideNavGroupItemBoxBadgeWithIconProps) => {\n  const sideNavProps = useSideNavInternalProvider();\n  return (\n    <SideNavGroupItemBoxBadgeWithIconLayout\n      renderRoot={(children, className) => (\n        <USideNavGroupItemBoxBadgeRoot {...props} className={className}>\n          {children}\n        </USideNavGroupItemBoxBadgeRoot>\n      )}\n      styleProps={{ className: props.className, sideNavProps }}\n      iconSlot={icon && <USideNavGroupItemBoxBadgeIcon>{icon}</USideNavGroupItemBoxBadgeIcon>}\n      textSlot={text && <USideNavGroupItemBoxBadgeText>{text}</USideNavGroupItemBoxBadgeText>}\n    />\n  );\n};\n\n/*\n  ====================================\n  SideNavGroupItemBox\n  ====================================\n*/\n\nexport type SideNavGroupItemBoxProps = USideNavGroupItemBoxRootProps & {\n  icon?: (className: string) => React.ReactNode;\n  label: string;\n  badgeSlot?: ReactNode;\n};\nexport const SideNavGroupItemBox = ({ icon, label, badgeSlot, ...props }: SideNavGroupItemBoxProps) => {\n  const sideNavProps = useSideNavInternalProvider();\n  return (\n    <SideNavGroupItemBoxLayout\n      renderRoot={(children, className) => (\n        <USideNavGroupItemBoxRoot {...props} className={className}>\n          {children}\n        </USideNavGroupItemBoxRoot>\n      )}\n      styleProps={{ className: props.className, sideNavProps }}\n      iconSlot={icon && <USideNavGroupItemBoxIcon>{icon}</USideNavGroupItemBoxIcon>}\n      labelSlot={<USideNavGroupItemBoxLabel>{label}</USideNavGroupItemBoxLabel>}\n      badgeSlot={badgeSlot}\n    />\n  );\n};\n\n/*\n  ====================================\n  SideNavGroupHeader\n  ====================================\n*/\n\nexport type SideNavGroupHeaderProps = Omit<USideNavGroupHeaderRootProps, \"children\"> & {\n  hasCaret?: boolean;\n  label: string;\n};\nexport const SideNavGroupHeader = ({ hasCaret, label, ...props }: SideNavGroupHeaderProps) => {\n  const sideNavProps = useSideNavInternalProvider();\n  return (\n    <SideNavGroupHeaderLayout\n      renderRoot={(children, className) => (\n        <USideNavGroupHeaderRoot {...props} className={className}>\n          {children}\n        </USideNavGroupHeaderRoot>\n      )}\n      styleProps={{ className: props.className, sideNavProps }}\n      caretSlot={hasCaret && <USideNavGroupHeaderCaret />}\n      labelSlot={label && <USideNavGroupHeaderLabel>{label}</USideNavGroupHeaderLabel>}\n    />\n  );\n};\n\n/*\n  ====================================\n  SideNavGroupItem\n  ====================================\n*/\n\nexport type SideNavGroupItemProps = Omit<USideNavGroupItemRootProps, \"children\"> & {\n  boxSlot: ReactNode;\n};\nexport const SideNavGroupItem = ({ boxSlot, ...props }: SideNavGroupItemProps) => {\n  const sideNavProps = useSideNavInternalProvider();\n  return (\n    <SideNavGroupItemLayout\n      renderRoot={(children, className) => (\n        <USideNavGroupItemRoot {...props} className={className}>\n          {children}\n        </USideNavGroupItemRoot>\n      )}\n      styleProps={{ className: props.className, sideNavProps }}\n      boxSlot={boxSlot}\n    />\n  );\n};\n\nexport type SideNavGroupItemLinkProps = Omit<USideNavGroupItemLinkRootProps, \"children\"> & {\n  boxSlot: ReactNode;\n};\nexport const SideNavGroupItemLink = ({ boxSlot, ...props }: SideNavGroupItemLinkProps) => {\n  const sideNavProps = useSideNavInternalProvider();\n  return (\n    <SideNavGroupItemLayout\n      renderRoot={(children, className) => (\n        <USideNavGroupItemLinkRoot {...props} className={className}>\n          {children}\n        </USideNavGroupItemLinkRoot>\n      )}\n      styleProps={{ className: props.className, sideNavProps }}\n      boxSlot={boxSlot}\n    />\n  );\n};\n\n/*\n  ====================================\n  SideNavGroup\n  ====================================\n*/\n\nexport type SideNavGroupProps = USideNavGroupRootProps & {\n  headerSlot: ReactNode;\n  itemSlots: ReactNode[];\n};\nexport const SideNavGroup = ({ headerSlot, itemSlots, ...props }: SideNavGroupProps) => {\n  const sideNavProps = useSideNavInternalProvider();\n  return (\n    <SideNavGroupLayout\n      renderRoot={(children, className) => (\n        <USideNavGroupRoot {...props} className={className}>\n          {children}\n        </USideNavGroupRoot>\n      )}\n      styleProps={{ className: props.className, sideNavProps }}\n      headerSlot={headerSlot}\n      itemSlots={<USideNavGroupContent>{itemSlots}</USideNavGroupContent>}\n    />\n  );\n};\n",
        "target": "underatom/components/radix/side-nav/SideNav.atoms.tsx"
      },
      {
        "type": "registry:ui",
        "path": "ui/radix/side-nav/SideNav.underatoms.tsx",
        "content": "import { ReactNode } from \"react\";\nimport { CaretDown } from \"../../../utils/Icons\";\nimport * as Accordion from \"@radix-ui/react-accordion\";\nimport * as ToggleGroup from \"@radix-ui/react-toggle-group\";\nimport { Link, LinkProps } from \"@tanstack/react-router\";\nimport React from \"react\";\nimport { mergeProps, useFocusRing } from \"react-aria\";\nimport {\n  SideNavStyleProps,\n  sideNavClass,\n  sideNavGroupClass,\n  sideNavGroupHeaderCaretClass,\n  sideNavGroupHeaderClass,\n  sideNavGroupHeaderLabelClass,\n  sideNavGroupItemBoxBadgeClass,\n  sideNavGroupItemBoxBadgeIconClass,\n  sideNavGroupItemBoxBadgeTextClass,\n  sideNavGroupItemBoxClass,\n  sideNavGroupItemBoxIconClass,\n  sideNavGroupItemBoxLabelClass,\n  sideNavGroupItemClass,\n} from \"./side-nav\";\nimport { getGenericContext } from \"../../../utils/utils\";\n\n/*\n  ====================================\n  SideNav\n  ====================================\n*/\n\nexport const { Provider: SideNavInternalProvider, useComponentContext: useSideNavInternalProvider } =\n  getGenericContext<USideNavRootProps>(\"SideNavInternalProvider\");\n\nexport type USideNavRootProps = SideNavStyleProps &\n  Omit<ToggleGroup.ToggleGroupSingleProps, \"type\"> & {\n    children: ReactNode;\n    accordionProps: Accordion.AccordionSingleProps | Accordion.AccordionMultipleProps;\n  };\nexport const USideNavRoot = (props: USideNavRootProps) => {\n  return (\n    <SideNavInternalProvider value={props}>\n      <ToggleGroup.Root className=\"ToggleGroup\" {...props} type=\"single\">\n        <Accordion.Root\n          {...props.accordionProps}\n          className={sideNavClass({ className: props.className, sideNavProps: props })}\n        >\n          {props.children}\n        </Accordion.Root>\n      </ToggleGroup.Root>\n    </SideNavInternalProvider>\n  );\n};\n\n/*\n  ====================================\n  SideNavGroup\n  ====================================\n*/\n\nexport type USideNavGroupRootProps = Accordion.AccordionItemProps;\nexport const USideNavGroupRoot = (props: USideNavGroupRootProps) => {\n  const sideNavProps = useSideNavInternalProvider();\n  return <Accordion.Item {...props} className={sideNavGroupClass({ className: props.className, sideNavProps })} />;\n};\n\nexport type USideNavGroupContentProps = Accordion.AccordionContentProps;\nexport const USideNavGroupContent = (props: USideNavGroupContentProps) => {\n  return <Accordion.AccordionContent {...props} />;\n};\n\n/*\n  ====================================\n  SideNavGroupHeader\n  ====================================\n*/\n\nexport type USideNavGroupHeaderRootProps = Accordion.AccordionTriggerProps & {\n  /** `AccordionTrigger` content */\n  children: Accordion.AccordionTriggerProps[\"children\"];\n};\nexport const USideNavGroupHeaderRoot = React.forwardRef<HTMLButtonElement, USideNavGroupHeaderRootProps>(\n  ({ children, className, ...props }, forwardedRef) => {\n    const sideNavProps = useSideNavInternalProvider();\n    const { focusProps, isFocusVisible } = useFocusRing();\n    return (\n      <Accordion.Header>\n        <Accordion.Trigger\n          {...mergeProps(props, focusProps)}\n          data-ring={isFocusVisible}\n          ref={forwardedRef}\n          className={sideNavGroupHeaderClass({ className, sideNavProps })}\n        >\n          {children}\n        </Accordion.Trigger>\n      </Accordion.Header>\n    );\n  },\n);\n\n/*\n  ====================================\n  SideNavGroupItem\n  ====================================\n*/\n\nexport type USideNavGroupItemRootProps = Omit<ToggleGroup.ToggleGroupItemProps, \"asChild\">;\nexport const USideNavGroupItemRoot = (props: USideNavGroupItemRootProps) => {\n  const sideNavProps = useSideNavInternalProvider();\n  const { focusProps, isFocusVisible } = useFocusRing();\n  return (\n    <ToggleGroup.Item\n      {...mergeProps(props, focusProps)}\n      data-ring={isFocusVisible}\n      className={sideNavGroupItemClass({ className: props.className, sideNavProps })}\n    >\n      {props.children}\n    </ToggleGroup.Item>\n  );\n};\n\nexport type USideNavGroupItemLinkRootProps = Omit<ToggleGroup.ToggleGroupItemProps, \"asChild\"> & {\n  linkProps?: LinkProps;\n};\nexport const USideNavGroupItemLinkRoot = (props: USideNavGroupItemLinkRootProps) => {\n  const sideNavProps = useSideNavInternalProvider();\n  const { focusProps, isFocusVisible } = useFocusRing();\n  return (\n    <ToggleGroup.Item\n      asChild\n      {...mergeProps(props, focusProps)}\n      data-ring={isFocusVisible}\n      className={sideNavGroupItemClass({ className: props.className, sideNavProps })}\n    >\n      <Link {...props.linkProps}>{props.children}</Link>\n    </ToggleGroup.Item>\n  );\n};\n\n/*\n  ====================================\n  SideNavGroupItemBox\n  ====================================\n*/\n\nexport type USideNavGroupItemBoxRootProps = React.ComponentPropsWithoutRef<\"div\">;\nexport const USideNavGroupItemBoxRoot = ({ children, className }: USideNavGroupItemBoxRootProps) => {\n  const sideNavProps = useSideNavInternalProvider();\n  return <div className={sideNavGroupItemBoxClass({ className, sideNavProps })}>{children}</div>;\n};\n\nexport type USideNavGroupItemBoxLabelProps = {\n  children: React.ReactNode;\n  className?: string;\n};\nexport const USideNavGroupItemBoxLabel = ({ className, ...props }: USideNavGroupItemBoxLabelProps) => {\n  const sideNavProps = useSideNavInternalProvider();\n  return <span {...props} className={sideNavGroupItemBoxLabelClass({ className, sideNavProps })} />;\n};\n\nexport type USideNavGroupItemBoxIconProps = {\n  children: (className: string) => ReactNode;\n  className?: string;\n};\nexport const USideNavGroupItemBoxIcon = ({ children, className }: USideNavGroupItemBoxIconProps) => {\n  const sideNavProps = useSideNavInternalProvider();\n  return <>{children(sideNavGroupItemBoxIconClass({ className, sideNavProps }))}</>;\n};\n\nexport const USideNavGroupHeaderCaret = () => {\n  const sideNavProps = useSideNavInternalProvider();\n  return <CaretDown className={sideNavGroupHeaderCaretClass({ sideNavProps })} />;\n};\n\nexport type USideNavGroupHeaderLabelProps = React.ComponentPropsWithoutRef<\"span\">;\nexport const USideNavGroupHeaderLabel = (props: USideNavGroupHeaderLabelProps) => {\n  const sideNavProps = useSideNavInternalProvider();\n  return <span {...props} className={sideNavGroupHeaderLabelClass({ sideNavProps })} />;\n};\n\n/*\n  ====================================\n  SideNavGroupItemBoxBadge\n  ====================================\n*/\n\nexport type USideNavGroupItemBoxBadgeRootProps = React.ComponentPropsWithoutRef<\"div\">;\nexport const USideNavGroupItemBoxBadgeRoot = ({\n  className,\n  children,\n  ...props\n}: USideNavGroupItemBoxBadgeRootProps) => {\n  const sideNavProps = useSideNavInternalProvider();\n  return (\n    <div {...props} className={sideNavGroupItemBoxBadgeClass({ className, sideNavProps })}>\n      {children}\n    </div>\n  );\n};\n\nexport type USideNavGroupItemBoxBadgeTextProps = React.ComponentPropsWithoutRef<\"span\">;\nexport const USideNavGroupItemBoxBadgeText = (props: USideNavGroupItemBoxBadgeTextProps) => {\n  const sideNavProps = useSideNavInternalProvider();\n  return <span {...props} className={sideNavGroupItemBoxBadgeTextClass({ sideNavProps })} />;\n};\n\nexport type USideNavGroupItemBoxBadgeIconProps = {\n  children: (className: string) => ReactNode;\n};\nexport const USideNavGroupItemBoxBadgeIcon = ({ children }: USideNavGroupItemBoxBadgeIconProps) => {\n  const sideNavProps = useSideNavInternalProvider();\n  return <>{children(sideNavGroupItemBoxBadgeIconClass({ sideNavProps }))}</>;\n};\n",
        "target": "underatom/components/radix/side-nav/SideNav.underatoms.tsx"
      },
      {
        "type": "registry:ui",
        "path": "ui/radix/side-nav/side-nav.tsx",
        "content": "import { tv } from \"../../../utils/extendedTV\";\nimport type { RenderRoot } from \"../../../utils/utils\";\n\n/*\n  ====================================\n  SideNav\n  ====================================\n*/\n\nexport type SideNavStyleProps = {\n  size?: \"md\";\n};\n\nexport type SideNavType = {\n  className?: string;\n  sideNavProps?: SideNavStyleProps;\n};\n\nexport const sideNavDefaults: Required<SideNavStyleProps> = {\n  size: \"md\",\n};\n\nexport const sideNavClass = ({ className }: SideNavType) => {\n  return `group/sideNav  ${className}`;\n};\n\nexport const SideNavLayout = ({\n  renderRoot,\n  styleProps: { className },\n  groupSlots,\n}: {\n  renderRoot: RenderRoot;\n  styleProps: SideNavType;\n  groupSlots: React.ReactNode;\n}) => renderRoot(<>{groupSlots}</>, `h-full w-full flex flex-col gap-5 ${className}`);\nexport type SideNavGroupType = {\n  className?: string;\n  sideNavProps?: SideNavStyleProps;\n};\n\nexport const sideNavGroupClass = ({ className }: SideNavGroupType) => {\n  return `group/sideNavGroup  ${className}`;\n};\n\nexport const SideNavGroupLayout = ({\n  renderRoot,\n  styleProps: { className },\n  headerSlot,\n  itemSlots,\n}: {\n  renderRoot: RenderRoot;\n  styleProps: SideNavGroupType;\n  headerSlot: React.ReactNode;\n  itemSlots: React.ReactNode;\n}) =>\n  renderRoot(\n    <>\n      {headerSlot}\n      <div className=\"h-fit w-full flex flex-col px-2\">{itemSlots}</div>\n    </>,\n    `h-fit w-full flex flex-col gap-[2px] ${className}`,\n  );\n\nexport type SideNavGroupItemType = {\n  className?: string;\n  sideNavProps?: SideNavStyleProps;\n};\n\nexport const sideNavGroupItemClass = ({ className }: SideNavGroupItemType) => {\n  return `group/sideNavGroupItem group-data-[disabled]/sideNavGroup:pointer-events-none data-[disabled]:pointer-events-none ${className}`;\n};\n\nexport const SideNavGroupItemLayout = ({\n  renderRoot,\n  styleProps: { className },\n  boxSlot,\n}: {\n  renderRoot: RenderRoot;\n  styleProps: SideNavGroupItemType;\n  boxSlot: React.ReactNode;\n}) => renderRoot(<>{boxSlot}</>, `h-fit w-full flex flex-row justify-center items-center ${className}`);\n\nexport type SideNavGroupHeaderType = {\n  className?: string;\n  sideNavProps?: SideNavStyleProps;\n};\n\nexport const sideNavGroupHeaderClass = ({ className }: SideNavGroupHeaderType) => {\n  return `\n  group/sideNavGroupHeader\n  rounded-md\n  transition-all\n  active:[background:unset]\n  group-data-[disabled]/sideNavGroup:hover:[background:unset]\n  group-data-[disabled]/sideNavGroup:data-[ring=true]:[background:unset]\n  hover:bg-base-100\n  data-[ring=true]:bg-base-100\n  data-[ring=true]:shadow-focus-ring\n  group-data-[disabled]/sideNavGroup:pointer-events-none\n  group-data-[disabled]/sideNavGroup:data-[ring=true]:shadow-none\n  ${className}\n  `;\n};\n\nexport const sideNavGroupHeaderCaretClass = ({ className }: SideNavGroupHeaderType) => {\n  return `w-5 h-5 text-base-600 group-data-[disabled]/sideNavGroup:text-base-300 ${className}`;\n};\n\nexport const sideNavGroupHeaderLabelClass = ({ className }: SideNavGroupHeaderType) => {\n  return `text-base-600 text-sm font-text font-medium select-none group-data-[disabled]/sideNavGroup:text-base-400 ${className}`;\n};\n\nexport const SideNavGroupHeaderLayout = ({\n  renderRoot,\n  styleProps: { className },\n  labelSlot,\n  caretSlot,\n}: {\n  renderRoot: RenderRoot;\n  styleProps: SideNavGroupHeaderType;\n  labelSlot: React.ReactNode;\n  caretSlot: React.ReactNode;\n}) =>\n  renderRoot(\n    <>\n      <div className=\"h-fit w-full flex flex-row items-center gap-[10px]\">{labelSlot}</div>\n      {caretSlot}\n    </>,\n    `h-9 w-full flex flex-row items-center gap-1 px-[10px] ${className}`,\n  );\n\nexport type SideNavGroupItemBoxType = {\n  className?: string;\n  sideNavProps?: SideNavStyleProps;\n};\n\nexport const sideNavGroupItemBoxClass = ({ className }: SideNavGroupItemBoxType) => {\n  return `\n  group/sideNavGroupItemBox\n  rounded-[10px]\n  transition-all\n  group-active/sideNavGroupItem:[background:unset]\n  group-data-[disabled]/sideNavGroupItem:[background:unset]\n  group-data-[disabled]/sideNavGroup:group-hover/sideNavGroupItem:[background:unset]\n  group-data-[disabled]/sideNavGroup:group-data-[ring=true]/sideNavGroupItem:[background:unset]\n  group-data-[disabled]/sideNavGroup:group-data-[ring=true]/sideNavGroupItem:shadow-none\n  group-hover/sideNavGroupItem:bg-base-100\n  group-data-[ring=true]/sideNavGroupItem:bg-base-100\n  group-data-[disabled]/sideNavGroup:group-data-[state=on]/sideNavGroupItem:bg-base-100\n  group-data-[disabled]/sideNavGroupItem:group-data-[state=on]/sideNavGroupItem:bg-base-100\n  group-data-[ring=true]/sideNavGroupItem:shadow-focus-ring\n  group-data-[state=on]/sideNavGroupItem:bg-primary-950\n  group-active/sideNavGroupItem:group-data-[state=on]/sideNavGroupItem:bg-primary-950\n  group-hover/sideNavGroupItem:group-data-[state=on]/sideNavGroupItem:bg-primary-900\n  group-data-[ring=true]/sideNavGroupItem:group-data-[state=on]/sideNavGroupItem:bg-primary-900\n  group-data-[disabled]/sideNavGroup:group-hover/sideNavGroupItem:group-data-[state=on]/sideNavGroupItem:bg-base-100\n  group-data-[disabled]/sideNavGroup:group-active/sideNavGroupItem:group-data-[state=on]/sideNavGroupItem:bg-base-100\n  group-data-[disabled]/sideNavGroup:group-data-[ring=true]/sideNavGroupItem:group-data-[state=on]/sideNavGroupItem:bg-base-100\n  ${className}\n  `;\n};\n\nexport const sideNavGroupItemBoxLabelClass = ({ className }: SideNavGroupItemBoxType) => {\n  return `\n  text-base-950\n  text-sm\n  font-text\n  font-medium\n  select-none\n  group-data-[disabled]/sideNavGroup:text-base-400\n  group-data-[disabled]/sideNavGroupItem:text-base-400\n  group-data-[state=on]/sideNavGroupItem:text-white\n  group-data-[disabled]/sideNavGroup:group-data-[state=on]/sideNavGroupItem:text-base-400\n  group-data-[disabled]/sideNavGroupItem:group-data-[state=on]/sideNavGroupItem:text-base-400\n  ${className}\n  `;\n};\n\nexport const sideNavGroupItemBoxIconClass = ({ className }: SideNavGroupItemBoxType) => {\n  return `\n  w-5\n  h-5\n  text-base-600\n  group-data-[disabled]/sideNavGroup:text-base-400\n  group-data-[disabled]/sideNavGroupItem:text-base-400\n  group-data-[state=on]/sideNavGroupItem:text-white\n  group-data-[disabled]/sideNavGroup:group-data-[state=on]/sideNavGroupItem:text-base-400\n  group-data-[disabled]/sideNavGroupItem:group-data-[state=on]/sideNavGroupItem:text-base-400\n  ${className}\n  `;\n};\n\nexport const SideNavGroupItemBoxLayout = ({\n  renderRoot,\n  styleProps: { className },\n  iconSlot,\n  labelSlot,\n  badgeSlot,\n}: {\n  renderRoot: RenderRoot;\n  styleProps: SideNavGroupItemBoxType;\n  iconSlot: React.ReactNode;\n  labelSlot: React.ReactNode;\n  badgeSlot: React.ReactNode;\n}) =>\n  renderRoot(\n    <>\n      <div className=\"h-fit w-full flex flex-row items-center gap-2\">\n        {iconSlot}\n        {labelSlot}\n      </div>\n      {badgeSlot}\n    </>,\n    `h-[42px] w-full flex flex-row items-center gap-1 px-3 ${className}`,\n  );\n\nexport type SideNavGroupItemBoxBadgeType = {\n  className?: string;\n  sideNavProps?: SideNavStyleProps;\n};\n\nexport const sideNavGroupItemBoxBadgeClass = ({ className }: SideNavGroupItemBoxBadgeType) => {\n  return `\n  group/sideNavGroupItemBoxBadge\n  bg-base-950\n  rounded-[999px]\n  transition-all\n  group-data-[disabled]/sideNavGroup:group-data-[disabled]/sideNavGroupItem:transition-all\n  group-data-[disabled]/sideNavGroup:bg-base-200\n  group-data-[disabled]/sideNavGroupItem:bg-base-200\n  group-data-[state=on]/sideNavGroupItem:bg-white\n  group-data-[disabled]/sideNavGroup:group-data-[state=on]/sideNavGroupItem:bg-base-200\n  group-data-[disabled]/sideNavGroupItem:group-data-[state=on]/sideNavGroupItem:bg-base-200\n  ${className}\n  `;\n};\n\nexport const sideNavGroupItemBoxBadgeTextClass = ({ className }: SideNavGroupItemBoxBadgeType) => {\n  return `\n  text-base-50\n  text-xs\n  font-text\n  font-normal\n  select-none\n  group-data-[state=on]/sideNavGroupItem:text-base-950\n  group-data-[disabled]/sideNavGroup:text-base-400\n  group-data-[disabled]/sideNavGroupItem:text-base-400\n  group-data-[disabled]/sideNavGroup:group-data-[state=on]/sideNavGroupItem:text-base-400\n  group-data-[disabled]/sideNavGroupItem:group-data-[state=on]/sideNavGroupItem:text-base-400\n  ${className}\n  `;\n};\n\nexport const sideNavGroupItemBoxBadgeIconClass = ({ className }: SideNavGroupItemBoxBadgeType) => {\n  return `\n  w-3\n  h-3\n  text-base-50\n  group-data-[state=on]/sideNavGroupItem:text-base-950\n  group-data-[disabled]/sideNavGroup:text-base-400\n  group-data-[disabled]/sideNavGroupItem:text-base-400\n  group-data-[disabled]/sideNavGroup:group-data-[state=on]/sideNavGroupItem:text-base-400\n  group-data-[disabled]/sideNavGroupItem:group-data-[state=on]/sideNavGroupItem:text-base-400\n  ${className}\n  `;\n};\n\nexport const SideNavGroupItemBoxBadgeLayout = ({\n  renderRoot,\n  styleProps: { className },\n  textSlot,\n}: {\n  renderRoot: RenderRoot;\n  styleProps: SideNavGroupItemBoxBadgeType;\n  textSlot: React.ReactNode;\n}) => renderRoot(<>{textSlot}</>, `h-6 w-fit flex flex-row justify-center items-center px-2 ${className}`);\nexport const SideNavGroupItemBoxBadgeWithIconLayout = ({\n  renderRoot,\n  styleProps: { className },\n  iconSlot,\n  textSlot,\n}: {\n  renderRoot: RenderRoot;\n  styleProps: SideNavGroupItemBoxBadgeType;\n  iconSlot: React.ReactNode;\n  textSlot: React.ReactNode;\n}) =>\n  renderRoot(\n    <>\n      {iconSlot}\n      {textSlot}\n    </>,\n    `h-6 w-fit flex flex-row justify-center items-center gap-1 pl-1 pr-2 ${className}`,\n  );\n\n",
        "target": "underatom/components/radix/side-nav/side-nav.tsx"
      }
    ]
  },
  {
    "name": "switch",
    "type": "registry:ui",
    "relativePath": "radix/switch",
    "stylingName": "switch.tsx",
    "dependencies": [
      "@radix-ui/react-switch",
      "react-aria"
    ],
    "files": [
      {
        "type": "registry:ui",
        "path": "ui/radix/switch/Switch.atoms.tsx",
        "content": "import { ReactNode } from \"react\";\nimport {\n  SwitchLayout,\n  SwitchToggleHandleLayout,\n  SwitchToggleLayout,\n  SwitchToggleStyleProps,\n} from \"./switch\";\nimport {\n  useSwitchInternalProvider,\n  useSwitchToggleInternalProvider,\n  USwitchAsterisk,\n  USwitchDescription,\n  USwitchLabel,\n  USwitchRoot,\n  USwitchRootProps,\n  USwitchToggleHandleIcon,\n  USwitchToggleHandleRoot,\n  USwitchToggleHandleRootProps,\n  USwitchToggleRoot,\n  USwitchToggleRootProps,\n} from \"./Switch.underatoms\";\n\n/*\n  ====================================\n  Switch\n  ====================================\n*/\n\nexport type SwitchProps = USwitchRootProps & {\n  label?: string;\n  description?: string;\n  icon?: (className?: string) => ReactNode;\n  color?: SwitchToggleStyleProps[\"color\"];\n};\nexport const Switch = ({ description, label, icon, color, ...props }: SwitchProps) => {\n  return (\n    <SwitchLayout\n      renderRoot={(children, className) => (\n        <USwitchRoot {...props} className={className}>\n          {children}\n        </USwitchRoot>\n      )}\n      styleProps={{ className: props.className, switchProps: props }}\n      labelSlot={label && <USwitchLabel>{label}</USwitchLabel>}\n      descriptionSlot={description && <USwitchDescription>{description}</USwitchDescription>}\n      asteriskSlot={<USwitchAsterisk />}\n      toggleSlot={<SwitchToggle icon={icon} color={color} />}\n    />\n  );\n};\n\n/*\n  ====================================\n  SwitchToggle\n  ====================================\n*/\n\nexport type SwitchToggleProps = USwitchToggleRootProps & {\n  icon?: (className?: string) => ReactNode;\n};\nexport const SwitchToggle = ({ icon, ...props }: SwitchToggleProps) => {\n  const switchProps = useSwitchInternalProvider();\n  return (\n    <SwitchToggleLayout\n      renderRoot={(children, className) => (\n        <USwitchToggleRoot {...props} className={className}>\n          {children}\n        </USwitchToggleRoot>\n      )}\n      styleProps={{ className: props.className, switchProps, switchToggleProps: props }}\n      handleSlot={<SwitchToggleHandle icon={icon} />}\n    />\n  );\n};\n\n/*\n  ====================================\n  SwitchToggleHandle\n  ====================================\n*/\n\nexport type SwitchToggleHandleProps = USwitchToggleHandleRootProps & {\n  icon?: (className: string) => ReactNode;\n};\nexport const SwitchToggleHandle = ({ icon, ...props }: SwitchToggleHandleProps) => {\n  const switchProps = useSwitchInternalProvider();\n  const switchToggleProps = useSwitchToggleInternalProvider();\n\n  return (\n    <SwitchToggleHandleLayout\n      renderRoot={(children, className) => (\n        <USwitchToggleHandleRoot {...props} className={className}>\n          {children}\n        </USwitchToggleHandleRoot>\n      )}\n      styleProps={{ className: props.className, switchProps, switchToggleProps }}\n      iconSlot={icon && <USwitchToggleHandleIcon>{icon}</USwitchToggleHandleIcon>}\n    />\n  );\n};\n",
        "target": "underatom/components/radix/switch/Switch.atoms.tsx"
      },
      {
        "type": "registry:ui",
        "path": "ui/radix/switch/Switch.underatoms.tsx",
        "content": "import { ReactNode, useId } from \"react\";\nimport * as RadixSwitch from \"@radix-ui/react-switch\";\nimport { getGenericContext } from \"../../../utils/utils\";\nimport { mergeProps, useFocusRing } from \"react-aria\";\nimport {\n  switchAsteriskClass,\n  switchClass,\n  switchDescriptionClass,\n  switchLabelClass,\n  SwitchStyleProps,\n  switchToggleClass,\n  switchToggleHandleClass,\n  switchToggleHandleIconClass,\n  SwitchToggleStyleProps,\n} from \"./switch\";\n\n/*\n  ====================================\n  Switch\n  ====================================\n*/\n\nexport const { Provider: SwitchInternalProvider, useComponentContext: useSwitchInternalProvider } =\n  getGenericContext<USwitchRootProps>(\"Switch\");\n\nexport type USwitchRootProps = RadixSwitch.SwitchProps & SwitchStyleProps & { id?: string; invalid?: boolean };\nexport const USwitchRoot = (props: USwitchRootProps) => {\n  const id = useId();\n  return (\n    <div\n      className={switchClass({ className: props.className, switchProps: props })}\n      data-invalid={!!props.invalid}\n      data-required={!!props.required}\n      data-disabled={!!props.disabled}\n    >\n      <SwitchInternalProvider value={{ ...props, id }}>{props.children}</SwitchInternalProvider>\n    </div>\n  );\n};\n\nexport type USwitchLabelProps = {\n  children: ReactNode;\n  className?: string;\n};\nexport const USwitchLabel = (props: USwitchLabelProps) => {\n  const switchProps = useSwitchInternalProvider();\n  return (\n    <label htmlFor={switchProps.id} className={switchLabelClass({ className: props.className, switchProps })}>\n      {props.children}\n    </label>\n  );\n};\n\nexport type USwitchDescriptionProps = {\n  children: ReactNode;\n  className?: string;\n};\nexport const USwitchDescription = (props: USwitchDescriptionProps) => {\n  const switchProps = useSwitchInternalProvider();\n  return <span className={switchDescriptionClass({ className: props.className, switchProps })}>{props.children}</span>;\n};\n\nexport type USwitchAsteriskProps = {\n  className?: string;\n};\nexport const USwitchAsterisk = (props: USwitchAsteriskProps) => {\n  const switchProps = useSwitchInternalProvider();\n  return <span className={switchAsteriskClass({ className: props.className, switchProps })}>*</span>;\n};\n\n/*\n  ====================================\n  SwitchToggle\n  ====================================\n*/\n\nexport const { Provider: SwitchToggleInternalProvider, useComponentContext: useSwitchToggleInternalProvider } =\n  getGenericContext<USwitchToggleRootProps>(\"Switch\");\n\nexport type USwitchToggleRootProps = { children?: ReactNode; className?: string } & SwitchToggleStyleProps;\nexport const USwitchToggleRoot = (props: USwitchToggleRootProps) => {\n  const { isFocusVisible, focusProps } = useFocusRing();\n  const switchProps = useSwitchInternalProvider();\n  return (\n    <RadixSwitch.Root\n      {...mergeProps(switchProps, focusProps)}\n      className={switchToggleClass({ className: props.className, switchProps, switchToggleProps: props })}\n      data-ring={isFocusVisible}\n    >\n      <SwitchToggleInternalProvider value={props}>{props.children}</SwitchToggleInternalProvider>\n    </RadixSwitch.Root>\n  );\n};\n\n/*\n  ====================================\n  SwitchToggleHandle\n  ====================================\n*/\n\nexport type USwitchToggleHandleRootProps = RadixSwitch.SwitchThumbProps & {\n  /** Thumb content */\n  children?: ReactNode;\n};\nexport const USwitchToggleHandleRoot = (props: USwitchToggleHandleRootProps) => {\n  const switchProps = useSwitchInternalProvider();\n  const switchToggleProps = useSwitchToggleInternalProvider();\n  return (\n    <RadixSwitch.Thumb\n      {...props}\n      className={switchToggleHandleClass({ className: props.className, switchProps, switchToggleProps })}\n    />\n  );\n};\n\nexport type USwitchToggleHandleIconProps = {\n  /** Icon render function */\n  children: (className: string) => ReactNode;\n  className?: string;\n};\nexport const USwitchToggleHandleIcon = ({ children, className }: USwitchToggleHandleIconProps) => {\n  const switchProps = useSwitchInternalProvider();\n  const switchToggleProps = useSwitchToggleInternalProvider();\n  return <>{children(switchToggleHandleIconClass({ className, switchProps, switchToggleProps }))}</>;\n};\n",
        "target": "underatom/components/radix/switch/Switch.underatoms.tsx"
      },
      {
        "type": "registry:ui",
        "path": "ui/radix/switch/switch.tsx",
        "content": "import { tv } from \"../../../utils/extendedTV\";\nimport type { RenderRoot } from \"../../../utils/utils\";\n\n/*\n  ====================================\n  Switch\n  ====================================\n*/\n\nexport type SwitchStyleProps = {\n  size?: \"sm\" | \"md\" | \"lg\";\n};\n\nexport type SwitchType = {\n  className?: string;\n  switchProps?: SwitchStyleProps;\n};\n\nexport const switchDefaults: Required<SwitchStyleProps> = {\n  size: \"md\",\n};\n\nexport const switchClass = ({ className }: SwitchType) => {\n  return `group/switch  ${className}`;\n};\n\nexport const switchLabelClass = ({ className }: SwitchType) => {\n  return `text-base-950 text-sm font-text font-medium group-data-[disabled=true]/switch:text-base-400 ${className}`;\n};\n\nexport const switchDescriptionClass = ({ className }: SwitchType) => {\n  return `text-base-700 text-sm font-text font-normal group-data-[invalid=true]/switch:text-danger-500 group-data-[disabled=true]/switch:text-base-400 group-data-[disabled=true]/switch:group-data-[invalid=true]/switch:text-base-400 ${className}`;\n};\n\nexport const switchAsteriskClass = ({ className }: SwitchType) => {\n  return `\n  hidden\n  group-data-[invalid=true]/switch:group-data-[required=true]/switch:[display:unset]\n  group-data-[required=true]/switch:[display:unset]\n  group-data-[required=true]/switch:text-danger-500\n  group-data-[invalid=true]/switch:group-data-[required=true]/switch:text-xs\n  group-data-[required=true]/switch:text-xs\n  group-data-[invalid=true]/switch:group-data-[required=true]/switch:font-text\n  group-data-[required=true]/switch:font-text\n  group-data-[invalid=true]/switch:group-data-[required=true]/switch:font-medium\n  group-data-[required=true]/switch:font-medium\n  group-data-[disabled=true]/switch:group-data-[invalid=true]/switch:group-data-[required=true]/switch:text-base-400\n  ${className}\n  `;\n};\n\nexport const SwitchLayout = ({\n  renderRoot,\n  styleProps: { className },\n  toggleSlot,\n  labelSlot,\n  asteriskSlot,\n  descriptionSlot,\n}: {\n  renderRoot: RenderRoot;\n  styleProps: SwitchType;\n  toggleSlot: React.ReactNode;\n  labelSlot: React.ReactNode;\n  asteriskSlot: React.ReactNode;\n  descriptionSlot: React.ReactNode;\n}) =>\n  renderRoot(\n    <>\n      <div className=\"h-fit w-full flex flex-row gap-2\">\n        {toggleSlot}\n        <div className=\"h-fit w-fit flex flex-row gap-1\">\n          {labelSlot}\n          {asteriskSlot}\n        </div>\n      </div>\n      <div className=\"h-fit w-full flex flex-col pl-14\">{descriptionSlot}</div>\n    </>,\n    `h-fit w-fit flex flex-col [&>*:not(:first-child)]:[margin-top:-4px] ${className}`,\n  );\nexport type SwitchToggleStyleProps = {\n  color?: \"primary\" | \"success\";\n};\n\nexport type SwitchToggleType = {\n  className?: string;\n  switchToggleProps?: SwitchToggleStyleProps;\n  switchProps?: SwitchStyleProps;\n};\n\nexport const switchToggleDefaults: Required<SwitchToggleStyleProps> = {\n  color: \"primary\",\n};\n\nexport const switchToggleClass = ({ className, switchToggleProps }: SwitchToggleType) => {\n  const rootClass = tv({\n    base: `\ngroup/switchToggle\n  bg-base-200\n  active:bg-base-200\n  group-data-[disabled=true]/switch:bg-base-200\n  rounded-[50px]\n  transition-all\n  hover:bg-base-300\n  data-[ring=true]:bg-base-300\n  data-[ring=true]:shadow-focus-ring\n  group-data-[invalid=true]/switch:border-solid\n  group-data-[invalid=true]/switch:border-danger-500\n  group-data-[invalid=true]/switch:border-1\n  group-data-[disabled=true]/switch:data-[ring=true]:shadow-none\n  group-data-[disabled=true]/switch:group-data-[invalid=true]/switch:[border:unset]\n  group-data-[invalid=true]/switch:data-[state=checked]:[border:unset]\n  group-data-[invalid=true]/switch:data-[state=checked]:bg-danger-500\n  group-data-[invalid=true]/switch:active:data-[state=checked]:bg-danger-500\n  group-data-[invalid=true]/switch:hover:data-[state=checked]:bg-danger-700\n  group-data-[invalid=true]/switch:data-[ring=true]:data-[state=checked]:bg-danger-700\n  group-data-[disabled=true]/switch:data-[state=checked]:bg-base-200\n  group-data-[disabled=true]/switch:hover:bg-base-200\n  group-data-[disabled=true]/switch:data-[ring=true]:bg-base-200\n`,\n    variants: {\n      toggleColor: {\n        primary:\n          \"data-[state=checked]:bg-primary-950 active:data-[state=checked]:bg-primary-950 hover:data-[state=checked]:bg-primary-800 data-[ring=true]:data-[state=checked]:bg-primary-800\",\n        success:\n          \"data-[state=checked]:bg-success-500 active:data-[state=checked]:bg-success-500 hover:data-[state=checked]:bg-success-600 data-[ring=true]:data-[state=checked]:bg-success-600\",\n      },\n    },\n\n    defaultVariants: { toggleColor: switchToggleDefaults.color },\n  });\n  return rootClass({\n    class: className,\n    toggleColor: switchToggleProps?.color,\n  });\n};\n\nexport const SwitchToggleLayout = ({\n  renderRoot,\n  styleProps: { className },\n  handleSlot,\n}: {\n  renderRoot: RenderRoot;\n  styleProps: SwitchToggleType;\n  handleSlot: React.ReactNode;\n}) =>\n  renderRoot(\n    <>{handleSlot}</>,\n    `h-7 w-12 flex flex-row items-center px-[2px] data-[state=checked]:pl-[22px] data-[state=checked]:pr-[2px] ${className}`,\n  );\n\nexport type SwitchToggleHandleType = {\n  className?: string;\n  switchProps?: SwitchStyleProps;\n  switchToggleProps?: SwitchToggleStyleProps;\n};\n\nexport const switchToggleHandleClass = ({ className }: SwitchToggleHandleType) => {\n  return `group/switchToggleHandle bg-white shadow-sm rounded-[50px] group-data-[disabled=true]/switch:bg-base-50 group-data-[disabled=true]/switch:shadow-none ${className}`;\n};\n\nexport const switchToggleHandleIconClass = ({ className, switchToggleProps }: SwitchToggleHandleType) => {\n  const iconClass = tv({\n    base: `\nw-5\n  group-data-[invalid=true]/switch:w-5\n  h-5\n  group-data-[invalid=true]/switch:h-5\n  text-base-600\n  group-data-[disabled=true]/switch:text-base-400\n  group-data-[invalid=true]/switch:text-danger-500\n  group-data-[disabled=true]/switch:group-data-[state=checked]/switchToggle:text-base-400\n  group-data-[invalid=true]/switch:group-data-[state=checked]/switchToggle:text-danger-500\n`,\n    variants: {\n      toggleColor: {\n        primary: \"group-data-[state=checked]/switchToggle:text-primary-950\",\n        success: \"group-data-[state=checked]/switchToggle:text-success-600\",\n      },\n    },\n\n    defaultVariants: { toggleColor: switchToggleDefaults.color },\n  });\n  return iconClass({\n    class: className,\n\n    toggleColor: switchToggleProps?.color,\n  });\n};\n\nexport const SwitchToggleHandleLayout = ({\n  renderRoot,\n  styleProps: { className },\n  iconSlot,\n}: {\n  renderRoot: RenderRoot;\n  styleProps: SwitchToggleHandleType;\n  iconSlot: React.ReactNode;\n}) => renderRoot(<>{iconSlot}</>, `h-6 w-6 flex flex-row justify-center items-center ${className}`);\n\n",
        "target": "underatom/components/radix/switch/switch.tsx"
      }
    ]
  },
  {
    "name": "tabs",
    "type": "registry:ui",
    "relativePath": "radix/tabs",
    "stylingName": "tabs.tsx",
    "dependencies": [
      "@radix-ui/react-tabs",
      "react-aria"
    ],
    "files": [
      {
        "type": "registry:ui",
        "path": "ui/radix/tabs/Tabs.atoms.tsx",
        "content": "import {\n  LoadingTabsItemLayout,\n  TabsItemBadgeLayout,\n  TabsItemBadgeWithIconLayout,\n  TabsItemDismissLayout,\n  TabsItemIndicatorStyleProps,\n  TabsItemLayout,\n  TabsItemNotificationLayout,\n  TabsItemStyleProps,\n  TabsItemWithIconLayout,\n  TabsLayout,\n} from \"./tabs\";\nimport {\n  UTabsRoot,\n  UTabsRootProps,\n  UTabsItemRoot,\n  UTabsItemBadgeIcon,\n  UTabsItemBadgeLabel,\n  UTabsItemBadgeRoot,\n  UTabsItemBadgeRootProps,\n  UTabsItemDismissIcon,\n  UTabsItemDismissRoot,\n  UTabsItemDismissRootProps,\n  UTabsItemIcon,\n  UTabsItemIndicator,\n  UTabsItemLabel,\n  UTabsItemLoader,\n  UTabsItemNotificationLabel,\n  UTabsItemNotificationRoot,\n  UTabsItemNotificationRootProps,\n  UTabsItemRootProps,\n  useTabsInternalProvider,\n  useTabsItemInternalProvider,\n  UTabsContentProps,\n  UTabsContent,\n} from \"./Tabs.underatoms\";\n\n/*\n  ====================================\n  Tabs\n  ====================================\n*/\n\nexport type TabsProps = UTabsRootProps & {\n  itemSlots: React.ReactNode;\n};\nexport const Tabs = ({ itemSlots, ...props }: TabsProps) => {\n  return (\n    <TabsLayout\n      styleProps={{ className: props.className, tabsProps: props }}\n      renderRoot={(children, className) => (\n        <UTabsRoot {...props} className={className + \" \" + (props.className ?? \"\")}>\n          {children}\n        </UTabsRoot>\n      )}\n      itemSlots={itemSlots}\n    />\n  );\n};\n\n/*\n  ====================================\n  TabsContent\n  ====================================\n*/\n\nexport type TabsContentProps = UTabsContentProps;\nexport const TabsContent = UTabsContent;\n\n/*\n  ====================================\n  TabsItem\n  ====================================\n*/\n\nexport type TabsItemProps = UTabsItemRootProps & {\n  label?: string;\n  badgeSlot?: React.ReactNode;\n  notificationSlot?: React.ReactNode;\n  onDismiss?: () => void;\n  indicatorColor?: TabsItemIndicatorStyleProps[\"color\"];\n};\n\nexport const TabsItem = ({\n  label,\n  onDismiss,\n  badgeSlot,\n  notificationSlot,\n  indicatorColor,\n  ...props\n}: TabsItemProps) => {\n  const tabsProps = useTabsInternalProvider();\n  return (\n    <TabsItemLayout\n      renderRoot={(children, className) => (\n        <UTabsItemRoot {...props} className={className + \" \" + (props.className ?? \"\")}>\n          {children}\n        </UTabsItemRoot>\n      )}\n      styleProps={{ className: props.className, tabsItemProps: props, tabsProps }}\n      labelSlot={label && <UTabsItemLabel>{label} </UTabsItemLabel>}\n      dismissSlot={onDismiss && <TabsItemDismiss onPress={onDismiss} />}\n      indicatorSlot={indicatorColor && <UTabsItemIndicator color={indicatorColor} />}\n      badgeSlot={badgeSlot}\n      notificationSlot={notificationSlot}\n    />\n  );\n};\n\nexport type TabsItemWithIconProps = UTabsItemRootProps & {\n  icon?: (className: string) => React.ReactNode;\n  label?: string;\n  badgeSlot?: React.ReactNode;\n  notificationSlot?: React.ReactNode;\n  onDismiss?: () => void;\n  indicatorColor?: TabsItemIndicatorStyleProps[\"color\"];\n};\nexport const TabsItemWithIcon = ({\n  label,\n  icon,\n  onDismiss,\n  badgeSlot,\n  notificationSlot,\n  indicatorColor,\n  ...props\n}: TabsItemWithIconProps) => {\n  const tabsProps = useTabsInternalProvider();\n  return (\n    <TabsItemWithIconLayout\n      styleProps={{ className: props.className, tabsItemProps: props, tabsProps }}\n      renderRoot={(children, className) => (\n        <UTabsItemRoot {...props} className={className + \" \" + (props.className ?? \"\")}>\n          {children}\n        </UTabsItemRoot>\n      )}\n      labelSlot={label && <UTabsItemLabel>{label} </UTabsItemLabel>}\n      iconSlot={icon && <UTabsItemIcon>{icon}</UTabsItemIcon>}\n      dismissSlot={onDismiss && <TabsItemDismiss onPress={onDismiss} />}\n      indicatorSlot={indicatorColor && <UTabsItemIndicator color={indicatorColor} />}\n      badgeSlot={badgeSlot}\n      notificationSlot={notificationSlot}\n    />\n  );\n};\n\nexport type LoadingTabsItemProps = UTabsItemRootProps &\n  Partial<TabsItemStyleProps> & {\n    label?: string;\n    badgeSlot?: React.ReactNode;\n    notificationSlot?: React.ReactNode;\n    onDismiss?: () => void;\n    indicatorColor?: TabsItemIndicatorStyleProps[\"color\"];\n  };\nexport const LoadingTabsItem = ({\n  label,\n  onDismiss,\n  badgeSlot,\n  notificationSlot,\n  indicatorColor,\n  ...props\n}: LoadingTabsItemProps) => {\n  const tabsProps = useTabsInternalProvider();\n  return (\n    <LoadingTabsItemLayout\n      styleProps={{ className: props.className, tabsItemProps: props, tabsProps }}\n      renderRoot={(children, className) => (\n        <UTabsItemRoot {...props} className={className + \" \" + (props.className ?? \"\")}>\n          {children}\n        </UTabsItemRoot>\n      )}\n      labelSlot={label && <UTabsItemLabel>{label} </UTabsItemLabel>}\n      loaderSlot={<UTabsItemLoader />}\n      dismissSlot={onDismiss && <TabsItemDismiss onPress={onDismiss} />}\n      indicatorSlot={indicatorColor && <UTabsItemIndicator color={indicatorColor} />}\n      badgeSlot={badgeSlot}\n      notificationSlot={notificationSlot}\n    />\n  );\n};\n\n/*\n  ====================================\n  TabsItemNotification\n  ====================================\n*/\n\nexport type TabsItemNotificationProps = Omit<UTabsItemNotificationRootProps, \"children\"> & {\n  label: string;\n};\nexport const TabsItemNotification = ({ label, ...props }: TabsItemNotificationProps) => {\n  const tabsProps = useTabsInternalProvider();\n  const tabsItemProps = useTabsItemInternalProvider();\n  return (\n    <TabsItemNotificationLayout\n      styleProps={{ className: props.className, tabsItemNotificationProps: props, tabsProps, tabsItemProps }}\n      renderRoot={(children, className) => (\n        <UTabsItemNotificationRoot {...props} className={className + \" \" + (props.className ?? \"\")}>\n          {children}\n        </UTabsItemNotificationRoot>\n      )}\n      labelSlot={<UTabsItemNotificationLabel>{label}</UTabsItemNotificationLabel>}\n    />\n  );\n};\n\n/*\n  ====================================\n  TabsItemDismiss\n  ====================================\n*/\n\nexport type TabsItemDismissProps = UTabsItemDismissRootProps;\nexport const TabsItemDismiss = (props: TabsItemDismissProps) => {\n  const tabsProps = useTabsInternalProvider();\n  const tabsItemProps = useTabsItemInternalProvider();\n  return (\n    <TabsItemDismissLayout\n      styleProps={{ className: props.className, tabsItemProps, tabsProps }}\n      renderRoot={(children, className) => (\n        <UTabsItemDismissRoot {...props} className={className + \" \" + (props.className ?? \"\")}>\n          {children}\n        </UTabsItemDismissRoot>\n      )}\n      iconSlot={<UTabsItemDismissIcon />}\n    />\n  );\n};\n\n/*\n  ====================================\n  TabsItemBadge\n  ====================================\n*/\n\nexport type TabsItemBadgeProps = Omit<UTabsItemBadgeRootProps, \"children\"> & {\n  label: string;\n};\n\nexport const TabsItemBadge = ({ label, ...props }: TabsItemBadgeProps) => {\n  const tabsProps = useTabsInternalProvider();\n  const tabsItemProps = useTabsItemInternalProvider();\n  return (\n    <TabsItemBadgeLayout\n      styleProps={{ className: props.className, tabsItemProps, tabsProps }}\n      renderRoot={(children, className) => (\n        <UTabsItemBadgeRoot {...props} className={className + \" \" + (props.className ?? \"\")}>\n          {children}\n        </UTabsItemBadgeRoot>\n      )}\n      labelSlot={<UTabsItemBadgeLabel>{label}</UTabsItemBadgeLabel>}\n    />\n  );\n};\n\nexport type TabsItemBadgeWithIconProps = Omit<UTabsItemBadgeRootProps, \"children\"> & {\n  icon?: (className: string) => React.ReactNode;\n  label?: string;\n};\n\nexport const TabsItemBadgeWithIcon = ({ icon, label, ...props }: TabsItemBadgeWithIconProps) => {\n  const tabsProps = useTabsInternalProvider();\n  const tabsItemProps = useTabsItemInternalProvider();\n  return (\n    <TabsItemBadgeWithIconLayout\n      styleProps={{ className: props.className, tabsItemProps, tabsProps }}\n      renderRoot={(children, className) => (\n        <UTabsItemBadgeRoot {...props} className={className + \" \" + (props.className ?? \"\")}>\n          {children}\n        </UTabsItemBadgeRoot>\n      )}\n      iconSlot={icon && <UTabsItemBadgeIcon>{icon}</UTabsItemBadgeIcon>}\n      labelSlot={label && <UTabsItemBadgeLabel>{label}</UTabsItemBadgeLabel>}\n    />\n  );\n};\n",
        "target": "underatom/components/radix/tabs/Tabs.atoms.tsx"
      },
      {
        "type": "registry:ui",
        "path": "ui/radix/tabs/Tabs.underatoms.tsx",
        "content": "import { ReactNode, useRef } from \"react\";\nimport * as Tabs from \"@radix-ui/react-tabs\";\nimport { useFocusRing, mergeProps, AriaButtonProps, useButton } from \"react-aria\";\nimport {\n  tabsClass,\n  tabsItemBadgeClass,\n  tabsItemBadgeIconClass,\n  tabsItemBadgeLabelClass,\n  TabsItemBadgeStyleProps,\n  tabsItemClass,\n  tabsItemDismissClass,\n  tabsItemDismissIconClass,\n  tabsItemIconClass,\n  tabsItemIndicatorClass,\n  TabsItemIndicatorStyleProps,\n  tabsItemLabelClass,\n  tabsItemLoaderClass,\n  tabsItemNotificationClass,\n  tabsItemNotificationLabelClass,\n  TabsItemNotificationStyleProps,\n  TabsItemStyleProps,\n  TabsStyleProps,\n} from \"./tabs\";\nimport { X, Loader } from \"../../../utils/Icons\";\nimport { getGenericContext } from \"../../../utils/utils\";\n\n/*\n  ====================================\n  Tabs\n  ====================================\n*/\n\nexport const { Provider: TabsInternalProvider, useComponentContext: useTabsInternalProvider } =\n  getGenericContext<UTabsRootProps>(\"TabsInternalProvider\");\n\nexport type UTabsRootProps = Tabs.TabsProps &\n  TabsStyleProps & {\n    disabled?: boolean;\n    contentSlots?: ReactNode;\n  };\nexport const UTabsRoot = ({ className, contentSlots, ...props }: UTabsRootProps) => {\n  return (\n    <Tabs.Root style={{ width: props.variant === \"underline\" || props.fullWidth ? \"100%\" : undefined }} {...props}>\n      <Tabs.List data-disabled={props.disabled} className={tabsClass({ className: className, tabsProps: props })}>\n        <TabsInternalProvider value={props}>{props.children}</TabsInternalProvider>\n      </Tabs.List>\n      {contentSlots}\n    </Tabs.Root>\n  );\n};\n\n/*\n  ====================================\n  TabsContent\n  ====================================\n*/\n\nexport type UTabsContentProps = Tabs.TabsContentProps;\nexport const UTabsContent = Tabs.Content;\n\n/*\n  ====================================\n  TabsItem\n  ====================================\n*/\n\nexport const { Provider: TabsItemInternalProvider, useComponentContext: useTabsItemInternalProvider } =\n  getGenericContext<UTabsItemRootProps>(\"TabsItemInternalProvider\");\n\nexport type UTabsItemRootProps = Omit<Tabs.TabsTriggerProps, \"asChild\"> & TabsItemStyleProps;\nexport const UTabsItemRoot = (props: UTabsItemRootProps) => {\n  const { focusProps, isFocusVisible } = useFocusRing();\n  const tabsProps = useTabsInternalProvider();\n  return (\n    <Tabs.Trigger\n      {...mergeProps(focusProps, { ...props, disabled: !!tabsProps.disabled || !!props.disabled })}\n      data-ring={isFocusVisible}\n      className={tabsItemClass({ className: props.className, tabsProps, tabsItemProps: props })}\n    >\n      <TabsItemInternalProvider value={props}>{props.children}</TabsItemInternalProvider>\n    </Tabs.Trigger>\n  );\n};\n\nexport type UTabsItemLabelProps = {\n  children: ReactNode;\n  className?: string;\n};\nexport const UTabsItemLabel = ({ children, className }: UTabsItemLabelProps) => {\n  const tabsProps = useTabsInternalProvider();\n  const tabsItemProps = useTabsItemInternalProvider();\n  return <span className={tabsItemLabelClass({ className, tabsItemProps, tabsProps })}>{children}</span>;\n};\n\nexport type UTabsItemIconProps = {\n  children: (className: string) => ReactNode;\n  className?: string;\n};\nexport const UTabsItemIcon = ({ children, className }: UTabsItemIconProps) => {\n  const tabsProps = useTabsInternalProvider();\n  const tabsItemProps = useTabsItemInternalProvider();\n  return <span>{children(tabsItemIconClass({ className, tabsItemProps, tabsProps }))}</span>;\n};\n\nexport type UTabsItemLoaderProps = {\n  className?: string;\n};\nexport const UTabsItemLoader = ({ className }: UTabsItemLoaderProps) => {\n  const tabsProps = useTabsInternalProvider();\n  const tabsItemProps = useTabsItemInternalProvider();\n  return <Loader className={tabsItemLoaderClass({ className, tabsItemProps, tabsProps })} />;\n};\n\nexport type UTabsItemIndicatorProps = TabsItemIndicatorStyleProps & {\n  className?: string;\n};\nexport const UTabsItemIndicator = (props: UTabsItemIndicatorProps) => {\n  const tabsProps = useTabsInternalProvider();\n  const tabsItemProps = useTabsItemInternalProvider();\n  return (\n    <span\n      className={tabsItemIndicatorClass({\n        className: props.className,\n        tabsItemProps,\n        tabsProps,\n        tabsItemIndicatorProps: props,\n      })}\n    ></span>\n  );\n};\n\n/*\n  ====================================\n  TabsItemBadge\n  ====================================\n*/\nexport const { Provider: TabsItemBadgeInternalProvider, useComponentContext: useTabsItemBadgeInternalProvider } =\n  getGenericContext<UTabsItemBadgeRootProps>(\"TabsItemBadgeInternalProvider\");\n\nexport type UTabsItemBadgeRootProps = TabsItemBadgeStyleProps & {\n  className?: string;\n  children?: ReactNode;\n};\nexport const UTabsItemBadgeRoot = (props: UTabsItemBadgeRootProps) => {\n  const tabsProps = useTabsInternalProvider();\n  const tabsItemProps = useTabsItemInternalProvider();\n  return (\n    <div\n      className={tabsItemBadgeClass({\n        className: props.className,\n        tabsItemBadgeProps: props,\n        tabsProps,\n        tabsItemProps,\n      })}\n    >\n      <TabsItemBadgeInternalProvider value={props}>{props.children}</TabsItemBadgeInternalProvider>\n    </div>\n  );\n};\n\nexport type UTabsItemBadgeLabelProps = {\n  children: ReactNode;\n  className?: string;\n};\nexport const UTabsItemBadgeLabel = ({ children, className }: UTabsItemBadgeLabelProps) => {\n  const tabsProps = useTabsInternalProvider();\n  const tabsItemProps = useTabsItemInternalProvider();\n  const tabsItemBadgeProps = useTabsItemBadgeInternalProvider();\n  return (\n    <span className={tabsItemBadgeLabelClass({ className, tabsItemBadgeProps, tabsItemProps, tabsProps })}>\n      {children}\n    </span>\n  );\n};\n\n/*\n  ====================================\n  TabsItemDismiss\n  ====================================\n*/\n\nexport type UTabsItemDismissRootProps = AriaButtonProps<\"button\"> & {\n  innerRef?: React.RefObject<HTMLButtonElement>;\n  className?: string;\n};\nexport const UTabsItemDismissRoot = ({ className, ...props }: UTabsItemDismissRootProps) => {\n  const refs = useRef<HTMLButtonElement>(null);\n  const tabsProps = useTabsInternalProvider();\n  const tabsItemProps = useTabsItemInternalProvider();\n  const { innerRef = refs } = props;\n  const propsWithDisabled = {\n    ...props,\n    isDisabled: !!props.isDisabled || !!tabsProps.disabled || !!tabsItemProps.disabled,\n  };\n  const { buttonProps, isPressed } = useButton(propsWithDisabled, refs);\n  const { isFocusVisible, focusProps } = useFocusRing();\n\n  return (\n    <button\n      ref={innerRef}\n      data-active={isPressed}\n      data-ring={isFocusVisible}\n      className={tabsItemDismissClass({ className, tabsItemProps, tabsProps })}\n      {...mergeProps(buttonProps, focusProps, {\n        onFocus: (event: React.FocusEvent<HTMLButtonElement>) => {\n          event.preventDefault();\n        },\n      })}\n    >\n      {props.children}\n    </button>\n  );\n};\n\nexport type UTabsItemDismissIconProps = {\n  className?: string;\n};\nexport const UTabsItemDismissIcon = ({ className }: UTabsItemDismissIconProps) => {\n  const tabsProps = useTabsInternalProvider();\n  const tabsItemProps = useTabsItemInternalProvider();\n  return <X className={tabsItemDismissIconClass({ className, tabsItemProps, tabsProps })} />;\n};\n\nexport type UTabsItemBadgeIconProps = {\n  children: (className: string) => ReactNode;\n  className?: string;\n};\nexport const UTabsItemBadgeIcon = ({ children, className }: UTabsItemBadgeIconProps) => {\n  const tabsProps = useTabsInternalProvider();\n  const tabsItemProps = useTabsItemInternalProvider();\n  const tabsItemBadgeProps = useTabsItemBadgeInternalProvider();\n  return <span>{children(tabsItemBadgeIconClass({ className, tabsItemBadgeProps, tabsItemProps, tabsProps }))}</span>;\n};\n\n/*\n  ====================================\n  TabsItemNotification\n  ====================================\n*/\n\nexport const {\n  Provider: TabsItemNotificationInternalProvider,\n  useComponentContext: useTabsItemNotificationInternalProvider,\n} = getGenericContext<UTabsItemNotificationRootProps>(\"TabsItemNotificationInternalProvider\");\n\nexport type UTabsItemNotificationRootProps = TabsItemNotificationStyleProps & {\n  className?: string;\n  children: ReactNode;\n};\nexport const UTabsItemNotificationRoot = (props: UTabsItemNotificationRootProps) => {\n  const tabsProps = useTabsInternalProvider();\n  const tabsItemProps = useTabsItemInternalProvider();\n  return (\n    <div\n      className={tabsItemNotificationClass({\n        className: props.className,\n        tabsItemNotificationProps: props,\n        tabsItemProps,\n        tabsProps,\n      })}\n    >\n      <TabsItemNotificationInternalProvider value={props}>{props.children}</TabsItemNotificationInternalProvider>\n    </div>\n  );\n};\n\nexport type UTabsItemNotificationLabelProps = {\n  children: ReactNode;\n  className?: string;\n};\nexport const UTabsItemNotificationLabel = ({ children, className }: UTabsItemNotificationLabelProps) => {\n  const tabsProps = useTabsInternalProvider();\n  const tabsItemProps = useTabsItemInternalProvider();\n  const tabsItemNotificationProps = useTabsItemNotificationInternalProvider();\n  return (\n    <span\n      className={tabsItemNotificationLabelClass({ className, tabsProps, tabsItemProps, tabsItemNotificationProps })}\n    >\n      {children}\n    </span>\n  );\n};\n",
        "target": "underatom/components/radix/tabs/Tabs.underatoms.tsx"
      },
      {
        "type": "registry:ui",
        "path": "ui/radix/tabs/tabs.tsx",
        "content": "import { tv } from \"../../../utils/extendedTV\";\nimport type { RenderRoot } from \"../../../utils/utils\";\n\n/*\n  ====================================\n  Tabs\n  ====================================\n*/\n\nexport type TabsStyleProps = {\n  size?: \"md\" | \"lg\";\n  variant?: \"fill\" | \"underline\" | \"handle\";\n  fullWidth?: true | false;\n};\n\nexport type TabsType = {\n  className?: string;\n  tabsProps?: TabsStyleProps;\n};\n\nexport const tabsDefaults: Required<TabsStyleProps> = {\n  size: \"md\",\n  variant: \"fill\",\n  fullWidth: false,\n};\n\nexport const tabsClass = ({ className, tabsProps }: TabsType) => {\n  const rootClass = tv({\n    base: \"group/tabs \",\n    variants: {\n      variant: {\n        fill: \"\",\n        underline: \"bg-transparent shadow-[inset_0px_-1px_0px_0px_#d9d9de]\",\n        handle: \"bg-base-100 rounded-sm\",\n      },\n    },\n\n    defaultVariants: { variant: tabsDefaults.variant },\n  });\n  return rootClass({\n    class: className,\n    variant: tabsProps?.variant,\n  });\n};\n\nexport const TabsLayout = ({\n  renderRoot,\n  styleProps: { className, tabsProps },\n  itemSlots,\n}: {\n  renderRoot: RenderRoot;\n  styleProps: TabsType;\n  itemSlots: React.ReactNode;\n}) =>\n  renderRoot(\n    <>{itemSlots}</>,\n    tv({\n      base: \"h-fit w-full flex flex-row items-center\",\n      variants: { variant: { fill: \"\", underline: \"\", handle: \"p-1\" } },\n\n      defaultVariants: { variant: tabsDefaults.variant },\n    })({\n      class: className,\n      variant: tabsProps?.variant,\n    }),\n  );\nexport type TabsItemStyleProps = {\n  attachment?: \"start\" | \"center\" | \"end\";\n};\n\nexport type TabsItemIndicatorStyleProps = {\n  color?: \"primary\" | \"red\";\n};\n\nexport type TabsItemType = {\n  className?: string;\n  tabsItemProps?: TabsItemStyleProps;\n  tabsProps?: TabsStyleProps;\n};\n\nexport type TabsItemIndicatorType = {\n  className?: string;\n  tabsItemProps?: TabsItemStyleProps;\n  tabsProps?: TabsStyleProps;\n  tabsItemIndicatorProps?: TabsItemIndicatorStyleProps;\n};\n\nexport const tabsItemDefaults: Required<TabsItemStyleProps> = {\n  attachment: \"center\",\n};\n\nexport const tabsItemIndicatorDefaults: Required<TabsItemIndicatorStyleProps> = {\n  color: \"primary\",\n};\n\nexport const tabsItemClass = ({ className, tabsProps }: TabsItemType) => {\n  const rootClass = tv({\n    base: \"group/tabsItem transition-all data-[ring=true]:bg-transparent\",\n    variants: {\n      variant: {\n        fill: `\ngroup-data-[disabled=true]/tabs:data-[ring=true]:shadow-focus-ring\n  data-[ring=true]:shadow-focus-ring\n  group-data-[disabled=true]/tabs:data-[ring=true]:rounded-sm\n  data-[ring=true]:rounded-sm\n  data-[state=active]:bg-primary-950\n  data-[ring=true]:data-[state=active]:bg-primary-950\n`,\n        underline: `\nborder-solid\n  data-[state=active]:border-solid\n  group-data-[disabled=true]/tabs:border-base-300\n  border-base-300\n  border-t-0\n  border-b-1\n  border-x-0\n  data-[state=active]:border-t-0\n  data-[state=active]:border-b-1\n  data-[state=active]:border-x-0\n  group-data-[disabled=true]/tabs:transition-all\n  data-[ring=true]:shadow-focus-ring\n  data-[ring=true]:rounded-sm\n  data-[state=active]:border-primary-950\n  group-data-[disabled=true]/tabs:data-[state=active]:bg-base-100\n  data-[state=active]:bg-base-100\n  data-[ring=true]:data-[state=active]:[border:unset]\n`,\n        handle: `\ngroup-data-[disabled=true]/tabs:rounded-sm\n  rounded-sm\n  group-data-[disabled=true]/tabs:transition-all\n  data-[ring=true]:shadow-focus-ring\n  data-[state=active]:bg-base-50\n  data-[state=active]:shadow-md\n  data-[ring=true]:data-[state=active]:bg-base-50\n`,\n      },\n      fullWidth: {\n        true: \"group-data-[disabled=true]/tabs:transition-all group-data-[disabled=true]/tabs:data-[ring=true]:[background:unset]\",\n        false: \"\",\n      },\n    },\n    compoundVariants: [\n      {\n        variant: [\"fill\"],\n        fullWidth: [true],\n        class:\n          \"group-data-[disabled=true]/tabs:data-[ring=true]:shadow-none group-data-[disabled=true]/tabs:data-[state=active]:bg-primary-200 group-data-[disabled=true]/tabs:data-[ring=true]:data-[state=active]:bg-primary-200\",\n      },\n      {\n        variant: [\"fill\"],\n        fullWidth: [false],\n        class:\n          \"group-data-[disabled=true]/tabs:transition-all group-data-[disabled=true]/tabs:data-[disabled]:data-[state=active]:transition-all group-data-[disabled=true]/tabs:data-[disabled]:data-[state=active]:bg-primary-200\",\n      },\n      {\n        variant: [\"underline\"],\n        fullWidth: [true],\n        class: `\ngroup-data-[disabled=true]/tabs:border-solid\n  group-data-[disabled=true]/tabs:border-t-0\n  group-data-[disabled=true]/tabs:border-b-1\n  group-data-[disabled=true]/tabs:border-x-0\n  group-data-[disabled=true]/tabs:data-[ring=true]:shadow-none\n  group-data-[disabled=true]/tabs:data-[state=active]:border-primary-400\n  data-[ring=true]:data-[state=active]:bg-base-100\n`,\n      },\n      {\n        variant: [\"underline\"],\n        fullWidth: [false],\n        class: `\ngroup-data-[disabled=true]/tabs:border-solid\n  group-data-[disabled=true]/tabs:data-[state=active]:border-solid\n  group-data-[disabled=true]/tabs:border-t-0\n  group-data-[disabled=true]/tabs:border-b-1\n  group-data-[disabled=true]/tabs:border-x-0\n  group-data-[disabled=true]/tabs:data-[state=active]:border-t-0\n  group-data-[disabled=true]/tabs:data-[state=active]:border-b-1\n  group-data-[disabled=true]/tabs:data-[state=active]:border-x-0\n  group-data-[disabled=true]/tabs:data-[disabled]:data-[state=active]:border-primary-400\n  group-data-[disabled=true]/tabs:data-[state=active]:border-primary-950\n  group-data-[disabled=true]/tabs:data-[ring=true]:data-[state=active]:[border:unset]\n  data-[ring=true]:data-[state=active]:bg-base-100\n`,\n      },\n      {\n        variant: [\"handle\"],\n        fullWidth: [true],\n        class: `\ngroup-data-[disabled=true]/tabs:data-[ring=true]:shadow-none\n  group-data-[disabled=true]/tabs:data-[state=active]:shadow-none\n  group-data-[disabled=true]/tabs:data-[state=active]:bg-base-100\n  group-data-[disabled=true]/tabs:data-[ring=true]:data-[state=active]:bg-base-100\n  data-[ring=true]:data-[state=active]:shadow-focus-ring\n`,\n      },\n      {\n        variant: [\"handle\"],\n        fullWidth: [false],\n        class:\n          \"group-data-[disabled=true]/tabs:data-[disabled]:data-[state=active]:bg-base-100 group-data-[disabled=true]/tabs:data-[disabled]:data-[state=active]:shadow-none data-[ring=true]:data-[state=active]:shadow-focus-ring\",\n      },\n    ],\n    defaultVariants: { variant: tabsDefaults.variant, fullWidth: tabsDefaults.fullWidth },\n  });\n  return rootClass({\n    class: className,\n    variant: tabsProps?.variant,\n    fullWidth: tabsProps?.fullWidth,\n  });\n};\n\nexport const tabsItemLabelClass = ({ className, tabsProps }: TabsItemType) => {\n  const labelClass = tv({\n    base: `\ntext-primary-700\n  text-sm\n  font-text\n  font-medium\n  select-none\n  group-data-[disabled=true]/tabs:text-base-400\n  group-data-[disabled]/tabsItem:text-base-400\n  group-data-[disabled=true]/tabs:group-data-[state=active]/tabsItem:text-base-400\n  group-data-[disabled]/tabsItem:group-data-[state=active]/tabsItem:text-base-400\n`,\n    variants: {\n      variant: {\n        fill: \"group-data-[state=active]/tabsItem:text-base-50\",\n        underline: \"group-data-[state=active]/tabsItem:text-primary-950\",\n        handle: \"group-data-[state=active]/tabsItem:text-primary-950\",\n      },\n    },\n\n    defaultVariants: { variant: tabsDefaults.variant },\n  });\n  return labelClass({\n    class: className,\n\n    variant: tabsProps?.variant,\n  });\n};\n\nexport const tabsItemIndicatorClass = ({ className, tabsProps, tabsItemIndicatorProps }: TabsItemIndicatorType) => {\n  const indicatorClass = tv({\n    base: \"w-[6px] h-[6px] rounded-[50px] transition-all group-data-[disabled=true]/tabs:bg-base-400 group-data-[disabled]/tabsItem:bg-base-400\",\n    variants: {\n      variant: {\n        fill: `\ngroup-data-[state=active]/tabsItem:bg-white\n  group-data-[disabled]/tabsItem:group-data-[state=active]/tabsItem:bg-white\n  group-data-[disabled=true]/tabs:group-data-[state=active]/tabsItem:bg-base-400\n  group-data-[disabled]/tabsItem:group-data-[state=active]/tabsItem:bg-base-400\n`,\n        underline: \"\",\n        handle: \"\",\n      },\n      itemIndicatorColor: { red: \"\", primary: \"\" },\n    },\n    compoundVariants: [\n      { variant: [\"fill\"], itemIndicatorColor: [\"red\"], class: \"bg-danger-500\" },\n      { variant: [\"underline\", \"handle\"], itemIndicatorColor: [\"red\"], class: \"bg-danger-500\" },\n      { variant: [\"fill\"], itemIndicatorColor: [\"primary\"], class: \"bg-primary-950\" },\n      { variant: [\"underline\", \"handle\"], itemIndicatorColor: [\"primary\"], class: \"bg-primary-950\" },\n    ],\n    defaultVariants: { itemIndicatorColor: tabsItemIndicatorDefaults.color, variant: tabsDefaults.variant },\n  });\n  return indicatorClass({\n    class: className,\n    itemIndicatorColor: tabsItemIndicatorProps?.color,\n    variant: tabsProps?.variant,\n  });\n};\n\nexport const tabsItemIconClass = ({ className, tabsProps }: TabsItemType) => {\n  const iconClass = tv({\n    base: \"w-5 h-5 group-data-[disabled=true]/tabs:text-base-400 group-data-[disabled]/tabsItem:text-base-400\",\n    variants: {\n      variant: {\n        fill: \"text-base-600 group-data-[state=active]/tabsItem:text-base-50 group-data-[disabled=true]/tabs:group-data-[state=active]/tabsItem:text-base-400 group-data-[disabled]/tabsItem:group-data-[state=active]/tabsItem:text-base-400\",\n        underline: \"text-base-600\",\n        handle: \"text-base-600\",\n      },\n    },\n\n    defaultVariants: { variant: tabsDefaults.variant },\n  });\n  return iconClass({\n    class: className,\n\n    variant: tabsProps?.variant,\n  });\n};\n\nexport const tabsItemLoaderClass = ({ className, tabsProps }: TabsItemType) => {\n  const loaderClass = tv({\n    base: `\nw-5\n  h-5\n  text-primary-700\n  group-data-[disabled=true]/tabs:text-base-400\n  group-data-[disabled]/tabsItem:text-base-400\n  group-data-[disabled=true]/tabs:group-data-[state=active]/tabsItem:text-base-400\n  group-data-[disabled]/tabsItem:group-data-[state=active]/tabsItem:text-base-400\n  animate-spin\n`,\n    variants: {\n      variant: {\n        fill: \"group-data-[state=active]/tabsItem:text-base-50\",\n        underline: \"group-data-[state=active]/tabsItem:text-primary-950\",\n        handle: \"group-data-[state=active]/tabsItem:text-primary-950\",\n      },\n    },\n\n    defaultVariants: { variant: tabsDefaults.variant },\n  });\n  return loaderClass({\n    class: className,\n\n    variant: tabsProps?.variant,\n  });\n};\n\nexport const TabsItemLayout = ({\n  renderRoot,\n  styleProps: { className, tabsProps },\n  labelSlot,\n  badgeSlot,\n  notificationSlot,\n  indicatorSlot,\n  dismissSlot,\n}: {\n  renderRoot: RenderRoot;\n  styleProps: TabsItemType;\n  labelSlot: React.ReactNode;\n  badgeSlot: React.ReactNode;\n  notificationSlot: React.ReactNode;\n  indicatorSlot: React.ReactNode;\n  dismissSlot: React.ReactNode;\n}) =>\n  renderRoot(\n    <>\n      <div className=\"h-fit w-fit flex flex-row gap-[6px]\">\n        <div className=\"h-fit w-fit flex flex-row items-center gap-[6px]\">\n          {labelSlot}\n          {badgeSlot}\n          {notificationSlot}\n        </div>\n        {indicatorSlot}\n      </div>\n      {dismissSlot}\n    </>,\n    tv({\n      base: \"flex flex-row items-center gap-5\",\n      variants: {\n        size: { md: \"pl-2 pr-[6px]\", lg: \"h-13 pl-3 pr-[10px]\" },\n        variant: { fill: \"\", underline: \"\", handle: \"\" },\n        fullWidth: { false: \"w-fit\", true: \"w-full justify-between\" },\n      },\n      compoundVariants: [\n        { size: [\"md\"], variant: [\"fill\", \"underline\"], class: \"h-10\" },\n        { size: [\"md\"], variant: [\"handle\"], class: \"h-8\" },\n      ],\n      defaultVariants: { size: tabsDefaults.size, variant: tabsDefaults.variant, fullWidth: tabsDefaults.fullWidth },\n    })({\n      class: className,\n      size: tabsProps?.size,\n      variant: tabsProps?.variant,\n      fullWidth: tabsProps?.fullWidth,\n    }),\n  );\nexport const TabsItemWithIconLayout = ({\n  renderRoot,\n  styleProps: { className, tabsProps },\n  iconSlot,\n  labelSlot,\n  badgeSlot,\n  notificationSlot,\n  indicatorSlot,\n  dismissSlot,\n}: {\n  renderRoot: RenderRoot;\n  styleProps: TabsItemType;\n  iconSlot: React.ReactNode;\n  labelSlot: React.ReactNode;\n  badgeSlot: React.ReactNode;\n  notificationSlot: React.ReactNode;\n  indicatorSlot: React.ReactNode;\n  dismissSlot: React.ReactNode;\n}) =>\n  renderRoot(\n    <>\n      <div className=\"h-fit w-fit flex flex-row gap-[6px]\">\n        <div className=\"h-fit w-fit flex flex-row justify-center items-center gap-[6px]\">\n          <div className=\"h-fit w-fit flex flex-row justify-center items-center gap-[6px]\">\n            {iconSlot}\n            {labelSlot}\n          </div>\n          {badgeSlot}\n          {notificationSlot}\n        </div>\n        {indicatorSlot}\n      </div>\n      {dismissSlot}\n    </>,\n    tv({\n      base: \"flex flex-row items-center gap-5\",\n      variants: {\n        size: { md: \"pl-2 pr-[6px]\", lg: \"h-13 pl-3 pr-[10px]\" },\n        variant: { fill: \"\", underline: \"\", handle: \"\" },\n        fullWidth: { false: \"w-fit\", true: \"w-full justify-between\" },\n      },\n      compoundVariants: [\n        { size: [\"md\"], variant: [\"fill\", \"underline\"], class: \"h-10\" },\n        { size: [\"md\"], variant: [\"handle\"], class: \"h-8\" },\n      ],\n      defaultVariants: { size: tabsDefaults.size, variant: tabsDefaults.variant, fullWidth: tabsDefaults.fullWidth },\n    })({\n      class: className,\n      size: tabsProps?.size,\n      variant: tabsProps?.variant,\n      fullWidth: tabsProps?.fullWidth,\n    }),\n  );\nexport const LoadingTabsItemLayout = ({\n  renderRoot,\n  styleProps: { className, tabsProps },\n  loaderSlot,\n  labelSlot,\n  badgeSlot,\n  notificationSlot,\n  indicatorSlot,\n  dismissSlot,\n}: {\n  renderRoot: RenderRoot;\n  styleProps: TabsItemType;\n  loaderSlot: React.ReactNode;\n  labelSlot: React.ReactNode;\n  badgeSlot: React.ReactNode;\n  notificationSlot: React.ReactNode;\n  indicatorSlot: React.ReactNode;\n  dismissSlot: React.ReactNode;\n}) =>\n  renderRoot(\n    <>\n      <div className=\"h-fit w-fit flex flex-row gap-[6px]\">\n        <div className=\"h-fit w-fit flex flex-row justify-center items-center gap-[6px]\">\n          <div className=\"h-fit w-fit flex flex-row justify-center items-center gap-1\">\n            {loaderSlot}\n            {labelSlot}\n          </div>\n          {badgeSlot}\n          {notificationSlot}\n        </div>\n        {indicatorSlot}\n      </div>\n      {dismissSlot}\n    </>,\n    tv({\n      base: \"flex flex-row items-center gap-5\",\n      variants: {\n        size: { md: \"pl-2 pr-[6px]\", lg: \"h-13 pl-3 pr-[10px]\" },\n        variant: { fill: \"\", underline: \"\", handle: \"\" },\n        fullWidth: { false: \"w-fit\", true: \"w-full\" },\n      },\n      compoundVariants: [\n        { size: [\"md\"], variant: [\"fill\", \"underline\"], class: \"h-10\" },\n        { size: [\"md\"], variant: [\"handle\"], class: \"h-8\" },\n      ],\n      defaultVariants: { size: tabsDefaults.size, variant: tabsDefaults.variant, fullWidth: tabsDefaults.fullWidth },\n    })({\n      class: className,\n      size: tabsProps?.size,\n      variant: tabsProps?.variant,\n      fullWidth: tabsProps?.fullWidth,\n    }),\n  );\nexport const IconTabsItemLayout = ({\n  renderRoot,\n  styleProps: { className, tabsProps },\n  iconSlot,\n}: {\n  renderRoot: RenderRoot;\n  styleProps: TabsItemType;\n  iconSlot: React.ReactNode;\n}) =>\n  renderRoot(\n    <>{iconSlot}</>,\n    tv({\n      base: \"flex flex-row justify-center items-center gap-5\",\n      variants: { size: { md: \"w-full\", lg: \"h-13 w-13\" }, variant: { fill: \"\", underline: \"\", handle: \"\" } },\n      compoundVariants: [\n        { size: [\"md\"], variant: [\"fill\", \"underline\"], class: \"h-10\" },\n        { size: [\"md\"], variant: [\"handle\"], class: \"h-8\" },\n      ],\n      defaultVariants: { size: tabsDefaults.size, variant: tabsDefaults.variant },\n    })({\n      class: className,\n      size: tabsProps?.size,\n      variant: tabsProps?.variant,\n    }),\n  );\n\nexport type TabsItemBadgeStyleProps = {\n  color?: \"primary\" | \"base\" | \"red\" | \"green\";\n};\n\nexport type TabsItemBadgeType = {\n  className?: string;\n  tabsItemBadgeProps?: TabsItemBadgeStyleProps;\n  tabsProps?: TabsStyleProps;\n  tabsItemProps?: TabsItemStyleProps;\n};\n\nexport const tabsItemBadgeDefaults: Required<TabsItemBadgeStyleProps> = {\n  color: \"primary\",\n};\n\nexport const tabsItemBadgeClass = ({ className, tabsProps, tabsItemBadgeProps }: TabsItemBadgeType) => {\n  const rootClass = tv({\n    base: \"group/tabsItemBadge rounded-[999px] group-data-[disabled=true]/tabs:bg-base-400 group-data-[disabled]/tabsItem:bg-base-400\",\n    variants: {\n      variant: {\n        underline: \"\",\n        handle: \"\",\n        fill: \"transition-all group-data-[state=active]/tabsItem:bg-white group-data-[disabled=true]/tabs:group-data-[state=active]/tabsItem:bg-base-400 group-data-[disabled]/tabsItem:group-data-[state=active]/tabsItem:bg-base-400\",\n      },\n      itemBadgeColor: { base: \"\", primary: \"\", red: \"\", green: \"\" },\n    },\n    compoundVariants: [\n      { variant: [\"underline\", \"handle\"], itemBadgeColor: [\"base\"], class: \"bg-base-950\" },\n      { variant: [\"fill\"], itemBadgeColor: [\"base\"], class: \"bg-base-950\" },\n      { variant: [\"underline\", \"handle\"], itemBadgeColor: [\"primary\"], class: \"bg-primary-950\" },\n      { variant: [\"fill\"], itemBadgeColor: [\"primary\"], class: \"bg-primary-950\" },\n      { variant: [\"fill\"], itemBadgeColor: [\"red\"], class: \"bg-danger-500\" },\n      { variant: [\"fill\"], itemBadgeColor: [\"green\"], class: \"bg-success-600\" },\n      { variant: [\"underline\", \"handle\"], itemBadgeColor: [\"red\"], class: \"bg-danger-500\" },\n      { variant: [\"underline\", \"handle\"], itemBadgeColor: [\"green\"], class: \"bg-success-600\" },\n    ],\n    defaultVariants: { variant: tabsDefaults.variant, itemBadgeColor: tabsItemBadgeDefaults.color },\n  });\n  return rootClass({\n    class: className,\n    variant: tabsProps?.variant,\n    itemBadgeColor: tabsItemBadgeProps?.color,\n  });\n};\n\nexport const tabsItemBadgeLabelClass = ({ className, tabsProps }: TabsItemBadgeType) => {\n  const labelClass = tv({\n    base: \"text-xs font-text font-normal select-none\",\n    variants: {\n      variant: {\n        underline: \"text-base-50\",\n        handle: \"text-base-50\",\n        fill: \"group-data-[disabled=true]/tabs:group-data-[state=active]/tabsItem:text-base-50 text-base-50 group-data-[disabled]/tabsItem:group-data-[state=active]/tabsItem:text-base-50 group-data-[state=active]/tabsItem:text-base-950\",\n      },\n    },\n\n    defaultVariants: { variant: tabsDefaults.variant },\n  });\n  return labelClass({\n    class: className,\n\n    variant: tabsProps?.variant,\n  });\n};\n\nexport const tabsItemBadgeIconClass = ({ className, tabsProps }: TabsItemBadgeType) => {\n  const iconClass = tv({\n    base: \"w-[14px] h-[14px]\",\n    variants: {\n      variant: {\n        underline: \"text-base-50\",\n        handle: \"text-base-50\",\n        fill: \"group-data-[disabled=true]/tabs:group-data-[state=active]/tabsItem:text-base-50 text-base-50 group-data-[disabled]/tabsItem:group-data-[state=active]/tabsItem:text-base-50 group-data-[state=active]/tabsItem:text-base-700\",\n      },\n    },\n\n    defaultVariants: { variant: tabsDefaults.variant },\n  });\n  return iconClass({\n    class: className,\n\n    variant: tabsProps?.variant,\n  });\n};\n\nexport const TabsItemBadgeLayout = ({\n  renderRoot,\n  styleProps: { className },\n  labelSlot,\n}: {\n  renderRoot: RenderRoot;\n  styleProps: TabsItemBadgeType;\n  labelSlot: React.ReactNode;\n}) => renderRoot(<>{labelSlot}</>, `h-6 w-fit flex flex-row justify-center items-center px-2 ${className}`);\nexport const TabsItemBadgeWithIconLayout = ({\n  renderRoot,\n  styleProps: { className },\n  iconSlot,\n  labelSlot,\n}: {\n  renderRoot: RenderRoot;\n  styleProps: TabsItemBadgeType;\n  iconSlot: React.ReactNode;\n  labelSlot: React.ReactNode;\n}) =>\n  renderRoot(\n    <>\n      {iconSlot}\n      {labelSlot}\n    </>,\n    `h-6 w-fit flex flex-row justify-center items-center gap-1 pl-1 pr-2 ${className}`,\n  );\n\nexport type TabsItemDismissType = {\n  className?: string;\n  tabsProps?: TabsStyleProps;\n  tabsItemProps?: TabsItemStyleProps;\n};\n\nexport const tabsItemDismissClass = ({ className }: TabsItemDismissType) => {\n  return `group/tabsItemDismiss rounded-[50px] disabled:rounded-[50px] data-[ring=true]:bg-transparent data-[ring=true]:shadow-focus-ring ${className}`;\n};\n\nexport const tabsItemDismissIconClass = ({ className, tabsProps }: TabsItemDismissType) => {\n  const iconClass = tv({\n    base: \"w-5 group-disabled/tabsItemDismiss:w-5 h-5 group-disabled/tabsItemDismiss:h-5 text-base-600 group-data-[active=true]/tabsItemDismiss:text-base-600 group-disabled/tabsItemDismiss:text-primary-200\",\n    variants: {\n      variant: {\n        underline: \"group-hover/tabsItemDismiss:text-base-950 group-data-[ring=true]/tabsItemDismiss:text-base-950\",\n        handle: \"group-hover/tabsItemDismiss:text-base-950 group-data-[ring=true]/tabsItemDismiss:text-base-950\",\n        fill: `\ngroup-hover/tabsItemDismiss:text-base-950\n  group-data-[ring=true]/tabsItemDismiss:text-base-950\n  group-data-[state=active]/tabsItem:group-hover/tabsItemDismiss:text-base-50\n  group-data-[state=active]/tabsItem:group-data-[ring=true]/tabsItemDismiss:text-base-50\n`,\n      },\n    },\n\n    defaultVariants: { variant: tabsDefaults.variant },\n  });\n  return iconClass({\n    class: className,\n\n    variant: tabsProps?.variant,\n  });\n};\n\nexport const TabsItemDismissLayout = ({\n  renderRoot,\n  styleProps: { className },\n  iconSlot,\n}: {\n  renderRoot: RenderRoot;\n  styleProps: TabsItemDismissType;\n  iconSlot: React.ReactNode;\n}) => renderRoot(<>{iconSlot}</>, `h-6 w-6 flex flex-row justify-center items-center ${className}`);\n\nexport type TabsItemNotificationStyleProps = {\n  color?: \"primary\" | \"red\";\n};\n\nexport type TabsItemNotificationType = {\n  className?: string;\n  tabsItemNotificationProps?: TabsItemNotificationStyleProps;\n  tabsProps?: TabsStyleProps;\n  tabsItemProps?: TabsItemStyleProps;\n};\n\nexport const tabsItemNotificationDefaults: Required<TabsItemNotificationStyleProps> = {\n  color: \"primary\",\n};\n\nexport const tabsItemNotificationClass = ({\n  className,\n  tabsProps,\n  tabsItemNotificationProps,\n}: TabsItemNotificationType) => {\n  const rootClass = tv({\n    base: \"group/tabsItemNotification rounded-[50px] transition-all group-data-[disabled=true]/tabs:bg-base-400 group-data-[disabled]/tabsItem:bg-base-400\",\n    variants: {\n      variant: {\n        underline: \"\",\n        handle: \"\",\n        fill: \"group-data-[state=active]/tabsItem:bg-white group-data-[disabled=true]/tabs:group-data-[state=active]/tabsItem:bg-base-400 group-data-[disabled]/tabsItem:group-data-[state=active]/tabsItem:bg-base-400\",\n      },\n      itemNotificationColor: { primary: \"\", red: \"\" },\n    },\n    compoundVariants: [\n      { variant: [\"underline\", \"handle\"], itemNotificationColor: [\"primary\"], class: \"bg-primary-950\" },\n      { variant: [\"fill\"], itemNotificationColor: [\"primary\"], class: \"bg-primary-950\" },\n      { variant: [\"underline\", \"handle\"], itemNotificationColor: [\"red\"], class: \"bg-danger-500\" },\n      { variant: [\"fill\"], itemNotificationColor: [\"red\"], class: \"bg-danger-500\" },\n    ],\n    defaultVariants: { variant: tabsDefaults.variant, itemNotificationColor: tabsItemNotificationDefaults.color },\n  });\n  return rootClass({\n    class: className,\n    variant: tabsProps?.variant,\n    itemNotificationColor: tabsItemNotificationProps?.color,\n  });\n};\n\nexport const tabsItemNotificationLabelClass = ({ className, tabsProps }: TabsItemNotificationType) => {\n  const labelClass = tv({\n    base: \"text-xs font-text font-medium\",\n    variants: {\n      variant: {\n        underline: \"text-base-50\",\n        handle: \"text-base-50\",\n        fill: \"group-data-[disabled=true]/tabs:group-data-[state=active]/tabsItem:text-base-50 text-base-50 group-data-[disabled]/tabsItem:group-data-[state=active]/tabsItem:text-base-50 group-data-[state=active]/tabsItem:text-base-950\",\n      },\n    },\n\n    defaultVariants: { variant: tabsDefaults.variant },\n  });\n  return labelClass({\n    class: className,\n\n    variant: tabsProps?.variant,\n  });\n};\n\nexport const TabsItemNotificationLayout = ({\n  renderRoot,\n  styleProps: { className },\n  labelSlot,\n}: {\n  renderRoot: RenderRoot;\n  styleProps: TabsItemNotificationType;\n  labelSlot: React.ReactNode;\n}) => renderRoot(<>{labelSlot}</>, `h-6 w-6 flex flex-row justify-center items-center ${className}`);\n\n",
        "target": "underatom/components/radix/tabs/tabs.tsx"
      }
    ]
  },
  {
    "name": "alert",
    "type": "registry:ui",
    "relativePath": "react-aria/alert",
    "stylingName": "alert.tsx",
    "dependencies": [
      "react-aria"
    ],
    "files": [
      {
        "type": "registry:ui",
        "path": "ui/react-aria/alert/Alert.atoms.tsx",
        "content": "import {\n  AlertActionLayout,\n  AlertActionWithIconLayout,\n  AlertDismissLayout,\n  AlertLayout,\n  AlertStatusLayout,\n  AlertWithStatusLayout,\n} from \"./alert\";\nimport {\n  UAlertActionIcon,\n  UAlertActionLabel,\n  UAlertActionRoot,\n  UAlertActionRootProps,\n  UAlertDescription,\n  UAlertDismissIcon,\n  UAlertDismissRoot,\n  UAlertDismissRootProps,\n  UAlertIcon,\n  UAlertRoot,\n  UAlertRootProps,\n  UAlertStatusIcon,\n  UAlertStatusRoot,\n  UAlertStatusRootProps,\n  UAlertSubtitle,\n  UAlertTitle,\n  useAlertInternalProvider,\n} from \"./Alert.underatoms\";\n\n/*\n  ====================================\n  Alert\n  ====================================\n*/\n\nexport type AlertProps = Omit<UAlertRootProps, \"children\"> & {\n  icon: (className: string) => React.ReactNode;\n  title: string;\n  subtitle: string;\n  description: string;\n  primaryActionSlot?: React.ReactNode;\n  secondaryActionSlot?: React.ReactNode;\n  dismissSlot?: React.ReactNode;\n};\nexport const Alert = ({\n  icon,\n  title,\n  subtitle,\n  description,\n  primaryActionSlot,\n  secondaryActionSlot,\n  dismissSlot,\n  ...props\n}: AlertProps) => {\n  return (\n    <AlertLayout\n      renderRoot={(children, className) => (\n        <UAlertRoot {...props} className={className}>\n          {children}\n        </UAlertRoot>\n      )}\n      styleProps={{ className: props.className, alertProps: props }}\n      iconSlot={<UAlertIcon>{icon}</UAlertIcon>}\n      titleSlot={<UAlertTitle>{title}</UAlertTitle>}\n      subtitleSlot={<UAlertSubtitle>{subtitle}</UAlertSubtitle>}\n      descriptionSlot={<UAlertDescription>{description}</UAlertDescription>}\n      dismissSlot={dismissSlot}\n      actionSlot1={primaryActionSlot}\n      actionSlot2={secondaryActionSlot}\n    />\n  );\n};\n\nexport type AlertWithStatusProps = Omit<UAlertRootProps, \"children\"> & {\n  icon: (className: string) => React.ReactNode;\n  title: string;\n  subtitle: string;\n  description: string;\n  primaryActionSlot?: React.ReactNode;\n  secondaryActionSlot?: React.ReactNode;\n  statusSlot: React.ReactNode;\n  dismissSlot?: React.ReactNode;\n};\nexport const AlertWithStatus = ({\n  title,\n  subtitle,\n  description,\n  primaryActionSlot,\n  secondaryActionSlot,\n  statusSlot,\n  dismissSlot,\n  ...props\n}: AlertWithStatusProps) => {\n  return (\n    <AlertWithStatusLayout\n      renderRoot={(children, className) => (\n        <UAlertRoot {...props} className={className}>\n          {children}\n        </UAlertRoot>\n      )}\n      styleProps={{ className: props.className, alertProps: props }}\n      titleSlot={<UAlertTitle>{title}</UAlertTitle>}\n      subtitleSlot={<UAlertSubtitle>{subtitle}</UAlertSubtitle>}\n      descriptionSlot={<UAlertDescription>{description}</UAlertDescription>}\n      dismissSlot={dismissSlot}\n      actionSlot1={primaryActionSlot}\n      actionSlot2={secondaryActionSlot}\n      statusSlot={statusSlot}\n    />\n  );\n};\n\n/*\n  ====================================\n  AlertDismiss\n  ====================================\n*/\n\nexport type AlertDismissProps = Omit<UAlertDismissRootProps, \"children\">;\nexport const AlertDismiss = (props: AlertDismissProps) => {\n  const alertProps = useAlertInternalProvider();\n  return (\n    <AlertDismissLayout\n      renderRoot={(children, className) => (\n        <UAlertDismissRoot {...props} className={className}>\n          {children}\n        </UAlertDismissRoot>\n      )}\n      styleProps={{ className: props.className, alertProps }}\n      iconSlot={<UAlertDismissIcon />}\n    />\n  );\n};\n\n/*\n  ====================================\n  AlertAction\n  ====================================\n*/\n\nexport type AlertActionProps = UAlertActionRootProps;\nexport const AlertAction = ({ children, ...props }: AlertActionProps) => {\n  const alertProps = useAlertInternalProvider();\n  return (\n    <AlertActionLayout\n      renderRoot={(children, className) => (\n        <UAlertActionRoot {...props} className={className}>\n          {children}\n        </UAlertActionRoot>\n      )}\n      styleProps={{ className: props.className, alertProps, alertActionProps: props }}\n      labelSlot={<UAlertActionLabel>{children}</UAlertActionLabel>}\n    />\n  );\n};\n\nexport type AlertActionWithIconProps = UAlertActionRootProps & {\n  icon: (className: string) => React.ReactNode;\n};\nexport const AlertActionWithIcon = ({ children, icon, ...props }: AlertActionWithIconProps) => {\n  const alertProps = useAlertInternalProvider();\n  return (\n    <AlertActionWithIconLayout\n      renderRoot={(children, className) => (\n        <UAlertActionRoot {...props} className={className}>\n          {children}\n        </UAlertActionRoot>\n      )}\n      styleProps={{ className: props.className, alertProps, alertActionProps: props }}\n      iconSlot={<UAlertActionIcon>{icon}</UAlertActionIcon>}\n      labelSlot={<UAlertActionLabel>{children}</UAlertActionLabel>}\n    />\n  );\n};\n\n/*\n  ====================================\n  AlertStatus\n  ====================================\n*/\n\nexport type AlertStatusProps = Omit<UAlertStatusRootProps, \"children\"> & {\n  icon: (className: string) => React.ReactNode;\n};\n\nexport const AlertStatus = ({ icon, ...props }: AlertStatusProps) => {\n  const alertProps = useAlertInternalProvider();\n  return (\n    <AlertStatusLayout\n      renderRoot={(children, className) => (\n        <UAlertStatusRoot {...props} className={className}>\n          {children}\n        </UAlertStatusRoot>\n      )}\n      styleProps={{ className: props.className, alertProps }}\n      iconSlot={<UAlertStatusIcon>{icon}</UAlertStatusIcon>}\n    />\n  );\n};\n",
        "target": "underatom/components/react-aria/alert/Alert.atoms.tsx"
      },
      {
        "type": "registry:ui",
        "path": "ui/react-aria/alert/Alert.underatoms.tsx",
        "content": "import { ReactNode, useRef } from \"react\";\nimport { AriaButtonProps, mergeProps, useButton, useFocusRing } from \"react-aria\";\nimport { X } from \"../../../utils/Icons\";\nimport {\n  AlertActionStyleProps,\n  AlertStyleProps,\n  alertActionClass,\n  alertActionIconClass,\n  alertActionLabelClass,\n  alertClass,\n  alertDescriptionClass,\n  alertDismissClass,\n  alertDismissIconClass,\n  alertIconClass,\n  alertStatusClass,\n  alertStatusIconClass,\n  alertSubtitleClass,\n  alertTitleClass,\n} from \"./alert\";\nimport { getGenericContext } from \"../../../utils/utils\";\n\n/*\n  ====================================\n  Alert\n  ====================================\n*/\n\nexport const { Provider: AlertInternalProvider, useComponentContext: useAlertInternalProvider } =\n  getGenericContext<UAlertRootProps>(\"AlertInternalProvider\");\n\nexport type UAlertRootProps = AlertStyleProps & {\n  children: ReactNode;\n  className?: string;\n};\nexport const UAlertRoot = (props: UAlertRootProps) => {\n  return (\n    <div className={alertClass({ className: props.className, alertProps: props })}>\n      <AlertInternalProvider value={props}>{props.children}</AlertInternalProvider>\n    </div>\n  );\n};\n\nexport type UAlertTitleProps = {\n  children: ReactNode;\n};\nexport const UAlertTitle = ({ children }: UAlertTitleProps) => {\n  const alertProps = useAlertInternalProvider();\n  return <span className={alertTitleClass({ alertProps })}>{children}</span>;\n};\n\nexport type UAlertDescriptionProps = {\n  children: ReactNode;\n};\nexport const UAlertDescription = ({ children }: UAlertDescriptionProps) => {\n  const alertProps = useAlertInternalProvider();\n  return <span className={alertDescriptionClass({ alertProps })}>{children}</span>;\n};\n\nexport type UAlertSubtitleProps = {\n  children: ReactNode;\n};\nexport const UAlertSubtitle = ({ children }: UAlertSubtitleProps) => {\n  const alertProps = useAlertInternalProvider();\n  return <span className={alertSubtitleClass({ alertProps })}>{children}</span>;\n};\n\nexport type UAlertIconProps = {\n  children: (className: string) => ReactNode;\n};\nexport const UAlertIcon = ({ children }: UAlertIconProps) => {\n  const alertProps = useAlertInternalProvider();\n  return <>{children(alertIconClass({ alertProps }))}</>;\n};\n\n/*\n  ====================================\n  AlertDismiss\n  ====================================\n*/\nexport type UAlertDismissRootProps = AriaButtonProps & {\n  innerRef?: React.RefObject<HTMLButtonElement>;\n  className?: string;\n};\nexport const UAlertDismissRoot = (props: UAlertDismissRootProps) => {\n  const refs = useRef<HTMLButtonElement>(null);\n  const { innerRef = refs } = props;\n  const { buttonProps, isPressed } = useButton(props, innerRef);\n  const { isFocusVisible, focusProps } = useFocusRing();\n  const alertProps = useAlertInternalProvider();\n  return (\n    <button\n      {...mergeProps(buttonProps, focusProps)}\n      ref={innerRef}\n      data-disabled={props.isDisabled}\n      data-active={isPressed}\n      data-ring={isFocusVisible}\n      className={alertDismissClass({ alertProps, className: props.className })}\n    >\n      {props.children}\n    </button>\n  );\n};\n\nexport const UAlertDismissIcon = () => {\n  const alertProps = useAlertInternalProvider();\n  return <X className={alertDismissIconClass({ alertProps })} />;\n};\n\n/*\n  ====================================\n  AlertAction\n  ====================================\n*/\n\nexport const { Provider: AlertActionInternalProvider, useComponentContext: useAlertActionInternalProvider } =\n  getGenericContext<UAlertActionRootProps>(\"AlertActionInternalProvider\");\n\nexport type UAlertActionRootProps = AlertActionStyleProps &\n  AriaButtonProps & {\n    innerRef?: React.RefObject<HTMLButtonElement>;\n    className?: string;\n  };\nexport const UAlertActionRoot = (props: UAlertActionRootProps) => {\n  const refs = useRef<HTMLButtonElement>(null);\n  const { innerRef = refs } = props;\n  const { buttonProps, isPressed } = useButton(props, innerRef);\n  const { isFocusVisible, focusProps } = useFocusRing();\n  const alertProps = useAlertInternalProvider();\n  return (\n    <button\n      {...mergeProps(buttonProps, focusProps)}\n      ref={innerRef}\n      data-disabled={props.isDisabled}\n      data-active={isPressed}\n      data-ring={isFocusVisible}\n      className={alertActionClass({ className: props.className, alertProps, alertActionProps: props })}\n    >\n      <AlertActionInternalProvider value={props}>{props.children}</AlertActionInternalProvider>\n    </button>\n  );\n};\n\nexport type UAlertActionIconProps = {\n  children: (className: string) => ReactNode;\n};\nexport const UAlertActionIcon = ({ children }: UAlertActionIconProps) => {\n  const alertProps = useAlertInternalProvider();\n  const alertActionProps = useAlertActionInternalProvider();\n  return <>{children(alertActionIconClass({ alertProps, alertActionProps }))}</>;\n};\n\nexport type UAlertActionLabelProps = {\n  children: ReactNode;\n};\nexport const UAlertActionLabel = ({ children }: UAlertActionLabelProps) => {\n  const alertProps = useAlertInternalProvider();\n  const alertActionProps = useAlertActionInternalProvider();\n  return <span className={alertActionLabelClass({ alertProps, alertActionProps })}>{children}</span>;\n};\n\n/*\n  ====================================\n  AlertStatus\n  ====================================\n*/\n\nexport type UAlertStatusRootProps = {\n  children: ReactNode;\n  className?: string;\n};\nexport const UAlertStatusRoot = ({ children, className }: UAlertStatusRootProps) => {\n  const alertProps = useAlertInternalProvider();\n  return <div className={alertStatusClass({ className, alertProps })}>{children}</div>;\n};\n\nexport type UAlertStatusIconProps = {\n  children: (className: string) => ReactNode;\n};\nexport const UAlertStatusIcon = ({ children }: UAlertStatusIconProps) => {\n  const alertProps = useAlertInternalProvider();\n  return <>{children(alertStatusIconClass({ alertProps }))}</>;\n};\n",
        "target": "underatom/components/react-aria/alert/Alert.underatoms.tsx"
      },
      {
        "type": "registry:ui",
        "path": "ui/react-aria/alert/alert.tsx",
        "content": "import { tv } from \"../../../utils/extendedTV\";\nimport type { RenderRoot } from \"../../../utils/utils\";\n\n/*\n  ====================================\n  Alert\n  ====================================\n*/\n\nexport type AlertStyleProps = {\n  status?: \"primary\" | \"base\" | \"danger\" | \"warning\" | \"success\";\n};\n\nexport type AlertType = {\n  className?: string;\n  alertProps?: AlertStyleProps;\n};\n\nexport const alertDefaults: Required<AlertStyleProps> = {\n  status: \"primary\",\n};\n\nexport const alertClass = ({ className, alertProps }: AlertType) => {\n  const rootClass = tv({\n    base: \"group/alert rounded-lg\",\n    variants: {\n      status: {\n        primary: \"bg-primary-100\",\n        base: \"bg-base-100\",\n        success: \"bg-success-100\",\n        warning: \"bg-warning-50\",\n        danger: \"bg-danger-50\",\n      },\n    },\n\n    defaultVariants: { status: alertDefaults.status },\n  });\n  return rootClass({\n    class: className,\n    status: alertProps?.status,\n  });\n};\n\nexport const alertTitleClass = ({ className, alertProps }: AlertType) => {\n  const titleClass = tv({\n    base: \"text-sm font-text font-medium\",\n    variants: {\n      status: {\n        primary: \"text-primary-950\",\n        base: \"text-base-950\",\n        success: \"text-success-900\",\n        warning: \"text-warning-900\",\n        danger: \"text-danger-900\",\n      },\n    },\n\n    defaultVariants: { status: alertDefaults.status },\n  });\n  return titleClass({\n    class: className,\n\n    status: alertProps?.status,\n  });\n};\n\nexport const alertSubtitleClass = ({ className, alertProps }: AlertType) => {\n  const subtitleClass = tv({\n    base: \"text-xs font-text font-normal\",\n    variants: {\n      status: {\n        primary: \"text-primary-600\",\n        base: \"text-primary-600\",\n        success: \"text-success-700\",\n        warning: \"text-warning-700\",\n        danger: \"text-danger-600\",\n      },\n    },\n\n    defaultVariants: { status: alertDefaults.status },\n  });\n  return subtitleClass({\n    class: className,\n\n    status: alertProps?.status,\n  });\n};\n\nexport const alertDescriptionClass = ({ className, alertProps }: AlertType) => {\n  const descriptionClass = tv({\n    base: \"text-sm font-text font-normal\",\n    variants: {\n      status: {\n        primary: \"text-primary-800\",\n        base: \"text-primary-800\",\n        success: \"text-success-700\",\n        warning: \"text-warning-700\",\n        danger: \"text-danger-700\",\n      },\n    },\n\n    defaultVariants: { status: alertDefaults.status },\n  });\n  return descriptionClass({\n    class: className,\n\n    status: alertProps?.status,\n  });\n};\n\nexport const alertIconClass = ({ className, alertProps }: AlertType) => {\n  const iconClass = tv({\n    base: \"w-5 h-5\",\n    variants: {\n      status: {\n        primary: \"text-primary-800\",\n        base: \"text-primary-800\",\n        success: \"text-success-700\",\n        warning: \"text-warning-700\",\n        danger: \"text-danger-700\",\n      },\n    },\n\n    defaultVariants: { status: alertDefaults.status },\n  });\n  return iconClass({\n    class: className,\n\n    status: alertProps?.status,\n  });\n};\n\nexport const AlertLayout = ({\n  renderRoot,\n  styleProps: { className },\n  iconSlot,\n  titleSlot,\n  subtitleSlot,\n  descriptionSlot,\n  actionSlot1,\n  actionSlot2,\n  dismissSlot,\n}: {\n  renderRoot: RenderRoot;\n  styleProps: AlertType;\n  iconSlot: React.ReactNode;\n  titleSlot: React.ReactNode;\n  subtitleSlot: React.ReactNode;\n  descriptionSlot: React.ReactNode;\n  actionSlot1: React.ReactNode;\n  actionSlot2: React.ReactNode;\n  dismissSlot: React.ReactNode;\n}) =>\n  renderRoot(\n    <>\n      <div className=\"h-fit w-full flex flex-row gap-5\">\n        <div className=\"h-fit w-full flex flex-row gap-2\">\n          <div className=\"h-fit w-fit flex flex-row gap-[10px] pt-1\">{iconSlot}</div>\n          <div className=\"h-fit w-full flex flex-col gap-5\">\n            <div className=\"h-fit w-full flex flex-col gap-[6px]\">\n              <div className=\"h-fit w-full flex flex-col [&>*:not(:first-child)]:[margin-top:-2px]\">\n                {titleSlot}\n                {subtitleSlot}\n              </div>\n              {descriptionSlot}\n            </div>\n            <div className=\"h-fit w-fit flex flex-row gap-[6px]\">\n              {actionSlot1}\n              {actionSlot2}\n            </div>\n          </div>\n        </div>\n        {dismissSlot}\n      </div>\n    </>,\n    `h-fit w-full flex flex-col justify-end gap-5 p-5 ${className}`,\n  );\nexport const AlertWithStatusLayout = ({\n  renderRoot,\n  styleProps: { className },\n  statusSlot,\n  titleSlot,\n  subtitleSlot,\n  descriptionSlot,\n  actionSlot1,\n  actionSlot2,\n  dismissSlot,\n}: {\n  renderRoot: RenderRoot;\n  styleProps: AlertType;\n  statusSlot: React.ReactNode;\n  titleSlot: React.ReactNode;\n  subtitleSlot: React.ReactNode;\n  descriptionSlot: React.ReactNode;\n  actionSlot1: React.ReactNode;\n  actionSlot2: React.ReactNode;\n  dismissSlot: React.ReactNode;\n}) =>\n  renderRoot(\n    <>\n      <div className=\"h-fit w-full flex flex-row gap-5\">\n        <div className=\"h-fit w-full flex flex-row gap-3\">\n          {statusSlot}\n          <div className=\"h-fit w-full flex flex-col gap-5\">\n            <div className=\"h-fit w-full flex flex-col gap-[6px]\">\n              <div className=\"h-fit w-full flex flex-col [&>*:not(:first-child)]:[margin-top:-2px]\">\n                {titleSlot}\n                {subtitleSlot}\n              </div>\n              {descriptionSlot}\n            </div>\n            <div className=\"h-fit w-fit flex flex-row gap-[6px]\">\n              {actionSlot1}\n              {actionSlot2}\n            </div>\n          </div>\n        </div>\n        {dismissSlot}\n      </div>\n    </>,\n    `h-fit w-full flex flex-col justify-end items-end gap-5 p-5 ${className}`,\n  );\nexport type AlertActionStyleProps = {\n  variant?: \"primary\" | \"base\";\n};\n\nexport type AlertActionType = {\n  className?: string;\n  alertActionProps?: AlertActionStyleProps;\n  alertProps?: AlertStyleProps;\n};\n\nexport const alertActionDefaults: Required<AlertActionStyleProps> = {\n  variant: \"primary\",\n};\n\nexport const alertActionClass = ({ className, alertProps, alertActionProps }: AlertActionType) => {\n  const rootClass = tv({\n    base: \"group/alertAction rounded-sm transition-all data-[ring=true]:shadow-focus-ring\",\n    variants: {\n      status: { primary: \"\", base: \"\", danger: \"\", warning: \"\", success: \"\" },\n      actionVariant: {\n        primary: \"\",\n        base: \"data-[active=true]:[background:unset] data-[disabled=true]:[background:unset]\",\n      },\n    },\n    compoundVariants: [\n      {\n        status: [\"primary\"],\n        actionVariant: [\"primary\"],\n        class:\n          \"bg-primary-950 data-[active=true]:bg-primary-950 hover:bg-primary-800 data-[ring=true]:bg-primary-800 data-[disabled=true]:bg-primary-200\",\n      },\n      { status: [\"primary\"], actionVariant: [\"base\"], class: \"hover:bg-base-200 data-[ring=true]:bg-base-200\" },\n      {\n        status: [\"base\"],\n        actionVariant: [\"primary\"],\n        class:\n          \"bg-base-950 data-[active=true]:bg-base-950 hover:bg-base-800 data-[ring=true]:bg-base-800 data-[disabled=true]:bg-base-200\",\n      },\n      { status: [\"base\"], actionVariant: [\"base\"], class: \"hover:bg-base-100 data-[ring=true]:bg-base-100\" },\n      {\n        status: [\"danger\"],\n        actionVariant: [\"primary\"],\n        class:\n          \"bg-danger-500 data-[active=true]:bg-danger-500 hover:bg-danger-600 data-[ring=true]:bg-danger-600 data-[disabled=true]:bg-danger-200\",\n      },\n      { status: [\"danger\"], actionVariant: [\"base\"], class: \"hover:bg-danger-200 data-[ring=true]:bg-danger-200\" },\n      {\n        status: [\"warning\"],\n        actionVariant: [\"primary\"],\n        class:\n          \"bg-warning-600 data-[active=true]:bg-warning-600 hover:bg-warning-700 data-[ring=true]:bg-warning-700 data-[disabled=true]:bg-warning-200\",\n      },\n      { status: [\"warning\"], actionVariant: [\"base\"], class: \"hover:bg-warning-200 data-[ring=true]:bg-warning-200\" },\n      {\n        status: [\"success\"],\n        actionVariant: [\"primary\"],\n        class:\n          \"bg-success-600 data-[active=true]:bg-success-600 hover:bg-success-700 data-[ring=true]:bg-success-700 data-[disabled=true]:bg-success-200\",\n      },\n      { status: [\"success\"], actionVariant: [\"base\"], class: \"hover:bg-success-200 data-[ring=true]:bg-success-200\" },\n    ],\n    defaultVariants: { status: alertDefaults.status, actionVariant: alertActionDefaults.variant },\n  });\n  return rootClass({\n    class: className,\n    status: alertProps?.status,\n    actionVariant: alertActionProps?.variant,\n  });\n};\n\nexport const alertActionLabelClass = ({ className, alertProps, alertActionProps }: AlertActionType) => {\n  const labelClass = tv({\n    base: \"text-sm font-text font-medium\",\n    variants: {\n      status: {\n        primary: \"group-data-[disabled=true]/alertAction:text-primary-400\",\n        base: \"group-data-[disabled=true]/alertAction:text-base-400\",\n        danger: \"group-data-[disabled=true]/alertAction:text-danger-400\",\n        warning: \"group-data-[disabled=true]/alertAction:text-warning-500\",\n        success: \"group-data-[disabled=true]/alertAction:text-success-500\",\n      },\n      actionVariant: { primary: \"text-white\", base: \"\" },\n    },\n    compoundVariants: [\n      { status: [\"primary\"], actionVariant: [\"base\"], class: \"text-primary-950\" },\n      { status: [\"base\"], actionVariant: [\"base\"], class: \"text-base-950\" },\n      { status: [\"danger\"], actionVariant: [\"base\"], class: \"text-danger-700\" },\n      { status: [\"warning\"], actionVariant: [\"base\"], class: \"text-warning-700\" },\n      { status: [\"success\"], actionVariant: [\"base\"], class: \"text-success-800\" },\n    ],\n    defaultVariants: { status: alertDefaults.status, actionVariant: alertActionDefaults.variant },\n  });\n  return labelClass({\n    class: className,\n\n    status: alertProps?.status,\n    actionVariant: alertActionProps?.variant,\n  });\n};\n\nexport const alertActionIconClass = ({ className, alertProps, alertActionProps }: AlertActionType) => {\n  const iconClass = tv({\n    base: \"w-5 h-5\",\n    variants: {\n      status: {\n        primary: \"group-data-[disabled=true]/alertAction:text-primary-400\",\n        base: \"group-data-[disabled=true]/alertAction:text-base-400\",\n        danger: \"group-data-[disabled=true]/alertAction:text-danger-400\",\n        warning: \"group-data-[disabled=true]/alertAction:text-warning-500\",\n        success: \"group-data-[disabled=true]/alertAction:text-success-500\",\n      },\n      actionVariant: { primary: \"text-white\", base: \"\" },\n    },\n    compoundVariants: [\n      { status: [\"primary\"], actionVariant: [\"base\"], class: \"text-primary-950\" },\n      { status: [\"base\"], actionVariant: [\"base\"], class: \"text-base-950\" },\n      { status: [\"danger\"], actionVariant: [\"base\"], class: \"text-danger-700\" },\n      { status: [\"warning\"], actionVariant: [\"base\"], class: \"text-warning-700\" },\n      { status: [\"success\"], actionVariant: [\"base\"], class: \"text-success-800\" },\n    ],\n    defaultVariants: { status: alertDefaults.status, actionVariant: alertActionDefaults.variant },\n  });\n  return iconClass({\n    class: className,\n\n    status: alertProps?.status,\n    actionVariant: alertActionProps?.variant,\n  });\n};\n\nexport const AlertActionLayout = ({\n  renderRoot,\n  styleProps: { className },\n  labelSlot,\n}: {\n  renderRoot: RenderRoot;\n  styleProps: AlertActionType;\n  labelSlot: React.ReactNode;\n}) => renderRoot(<>{labelSlot}</>, `h-9 w-fit flex flex-row justify-center items-center px-3 ${className}`);\nexport const AlertActionWithIconLayout = ({\n  renderRoot,\n  styleProps: { className },\n  iconSlot,\n  labelSlot,\n}: {\n  renderRoot: RenderRoot;\n  styleProps: AlertActionType;\n  iconSlot: React.ReactNode;\n  labelSlot: React.ReactNode;\n}) =>\n  renderRoot(\n    <>\n      {iconSlot}\n      {labelSlot}\n    </>,\n    `h-9 w-fit flex flex-row justify-center items-center gap-[6px] px-3 ${className}`,\n  );\n\nexport type AlertStatusType = {\n  className?: string;\n  alertProps?: AlertStyleProps;\n};\n\nexport const alertStatusClass = ({ className, alertProps }: AlertStatusType) => {\n  const rootClass = tv({\n    base: \"group/alertStatus rounded-sm\",\n    variants: {\n      status: {\n        primary: \"bg-primary-950\",\n        base: \"bg-primary-300\",\n        danger: \"bg-danger-200\",\n        warning: \"bg-warning-200\",\n        success: \"bg-success-300\",\n      },\n    },\n\n    defaultVariants: { status: alertDefaults.status },\n  });\n  return rootClass({\n    class: className,\n    status: alertProps?.status,\n  });\n};\n\nexport const alertStatusIconClass = ({ className, alertProps }: AlertStatusType) => {\n  const iconClass = tv({\n    base: \"w-5 h-5\",\n    variants: {\n      status: {\n        primary: \"text-white\",\n        base: \"text-base-800\",\n        danger: \"text-danger-500\",\n        warning: \"text-warning-600\",\n        success: \"text-success-700\",\n      },\n    },\n\n    defaultVariants: { status: alertDefaults.status },\n  });\n  return iconClass({\n    class: className,\n\n    status: alertProps?.status,\n  });\n};\n\nexport const AlertStatusLayout = ({\n  renderRoot,\n  styleProps: { className },\n  iconSlot,\n}: {\n  renderRoot: RenderRoot;\n  styleProps: AlertStatusType;\n  iconSlot: React.ReactNode;\n}) => renderRoot(<>{iconSlot}</>, `h-7 w-7 flex flex-row justify-center items-center ${className}`);\n\nexport type AlertDismissType = {\n  className?: string;\n  alertProps?: AlertStyleProps;\n};\n\nexport const alertDismissClass = ({ className }: AlertDismissType) => {\n  return `group/alertDismiss rounded-[50px] transition-all data-[ring=true]:bg-transparent data-[ring=true]:shadow-focus-ring ${className}`;\n};\n\nexport const alertDismissIconClass = ({ className, alertProps }: AlertDismissType) => {\n  const iconClass = tv({\n    base: \"w-5 h-5\",\n    variants: {\n      status: {\n        primary:\n          \"text-primary-500 group-data-[active=true]/alertDismiss:text-primary-500 group-hover/alertDismiss:text-primary-600 group-data-[ring=true]/alertDismiss:text-primary-600\",\n        base: \"text-base-500 group-data-[active=true]/alertDismiss:text-base-500 group-hover/alertDismiss:text-base-800 group-data-[ring=true]/alertDismiss:text-base-800\",\n        danger:\n          \"text-danger-500 group-data-[active=true]/alertDismiss:text-danger-500 group-hover/alertDismiss:text-danger-700 group-data-[ring=true]/alertDismiss:text-danger-700\",\n        warning:\n          \"text-warning-600 group-data-[active=true]/alertDismiss:text-warning-600 group-hover/alertDismiss:text-warning-700 group-data-[ring=true]/alertDismiss:text-warning-700\",\n        success:\n          \"text-success-600 group-data-[active=true]/alertDismiss:text-success-600 group-hover/alertDismiss:text-success-700 group-data-[ring=true]/alertDismiss:text-success-700\",\n      },\n    },\n\n    defaultVariants: { status: alertDefaults.status },\n  });\n  return iconClass({\n    class: className,\n\n    status: alertProps?.status,\n  });\n};\n\nexport const AlertDismissLayout = ({\n  renderRoot,\n  styleProps: { className },\n  iconSlot,\n}: {\n  renderRoot: RenderRoot;\n  styleProps: AlertDismissType;\n  iconSlot: React.ReactNode;\n}) => renderRoot(<>{iconSlot}</>, `h-7 w-7 flex flex-row justify-center items-center gap-5 ${className}`);\n\n",
        "target": "underatom/components/react-aria/alert/alert.tsx"
      }
    ]
  },
  {
    "name": "button",
    "type": "registry:ui",
    "relativePath": "react-aria/button",
    "stylingName": "button.tsx",
    "dependencies": [
      "react-aria"
    ],
    "files": [
      {
        "type": "registry:ui",
        "path": "ui/react-aria/button/Button.atoms.tsx",
        "content": "import type { ReactNode } from \"react\";\nimport type { ButtonDotStyleProps, ButtonStyleProps } from \"./button\";\nimport {\n  ButtonLayout,\n  ButtonWithDotLayout,\n  IconButtonLayout,\n  ButtonWithLeftIconLayout,\n  ButtonWithRightIconLayout,\n  LoadingButtonLayout,\n} from \"./button\";\nimport type { UButtonAnchorRootProps, UButtonRootProps } from \"./Button.underatoms\";\nimport {\n  UButtonRoot,\n  UButtonLabel,\n  UButtonAnchorRoot,\n  UButtonDot,\n  UButtonIcon,\n  UButtonLoader,\n} from \"./Button.underatoms\";\n\nexport type ButtonProps = UButtonRootProps &\n  Partial<ButtonStyleProps> & {\n    /** Text content */\n    children: ReactNode;\n  };\nexport const Button = (props: ButtonProps) => {\n  return (\n    <ButtonLayout\n      renderRoot={(children, className) => (\n        <UButtonRoot {...props} className={className}>\n          {children}\n        </UButtonRoot>\n      )}\n      styleProps={{ buttonProps: props, className: props.className }}\n      labelSlot={<UButtonLabel>{props.children}</UButtonLabel>}\n    />\n  );\n};\n\nexport type ButtonWithLeftIconProps = UButtonRootProps &\n  Partial<ButtonStyleProps> & {\n    /** Text content */\n    children: ReactNode;\n    /** Icon render function */\n    icon: (className: string) => ReactNode;\n  };\nexport const ButtonWithLeftIcon = (props: ButtonWithLeftIconProps) => {\n  return (\n    <ButtonWithLeftIconLayout\n      renderRoot={(children, className) => (\n        <UButtonRoot {...props} className={className}>\n          {children}\n        </UButtonRoot>\n      )}\n      styleProps={{ buttonProps: props, className: props.className }}\n      labelSlot={<UButtonLabel>{props.children}</UButtonLabel>}\n      iconSlot={<UButtonIcon>{props.icon}</UButtonIcon>}\n    />\n  );\n};\n\nexport type ButtonWithRightIconProps = UButtonRootProps &\n  Partial<ButtonStyleProps> & {\n    /** Text content */\n    children: ReactNode;\n    /** Icon render function */\n    icon: (className: string) => ReactNode;\n  };\nexport const ButtonWithRightIcon = (props: ButtonWithRightIconProps) => {\n  return (\n    <ButtonWithRightIconLayout\n      renderRoot={(children, className) => (\n        <UButtonRoot {...props} className={className}>\n          {children}\n        </UButtonRoot>\n      )}\n      styleProps={{ buttonProps: props, className: props.className }}\n      labelSlot={<UButtonLabel>{props.children}</UButtonLabel>}\n      iconSlot={<UButtonIcon>{props.icon}</UButtonIcon>}\n    />\n  );\n};\n\nexport type IconButtonProps = UButtonRootProps &\n  Omit<Partial<ButtonStyleProps>, \"fullWidth\"> & {\n    variant?: Exclude<ButtonStyleProps[\"variant\"], \"link\">;\n    /** Icon render function */\n    icon: (className: string) => ReactNode;\n  };\nexport const IconButton = (props: IconButtonProps) => {\n  return (\n    <IconButtonLayout\n      renderRoot={(children, className) => (\n        <UButtonRoot {...props} className={className}>\n          {children}\n        </UButtonRoot>\n      )}\n      styleProps={{ buttonProps: { ...props, fullWidth: false }, className: props.className }}\n      iconSlot={<UButtonIcon>{props.icon}</UButtonIcon>}\n    />\n  );\n};\n\nexport type ButtonWithDotProps = UButtonRootProps &\n  Partial<ButtonStyleProps> & {\n    variant?: Exclude<ButtonStyleProps[\"variant\"], \"link\">;\n    /** Text content */\n    children: ReactNode;\n    dotColor?: ButtonDotStyleProps[\"color\"];\n  };\nexport const ButtonWithDot = (props: ButtonWithDotProps) => {\n  return (\n    <ButtonWithDotLayout\n      renderRoot={(children, className) => (\n        <UButtonRoot {...props} className={className}>\n          {children}\n        </UButtonRoot>\n      )}\n      styleProps={{ buttonProps: props, className: props.className }}\n      dotSlot={<UButtonDot color={props.dotColor} />}\n      labelSlot={<UButtonLabel>{props.children}</UButtonLabel>}\n    />\n  );\n};\n\nexport type LoadingButtonProps = Omit<UButtonRootProps, \"isDisabled\"> &\n  Partial<ButtonStyleProps> & {\n    /** Text content */\n    children: ReactNode;\n  };\nexport const LoadingButton = (props: LoadingButtonProps) => {\n  return (\n    <LoadingButtonLayout\n      renderRoot={(children, className) => (\n        <UButtonRoot {...props} isDisabled className={className}>\n          {children}\n        </UButtonRoot>\n      )}\n      styleProps={{ buttonProps: props, className: props.className }}\n      loaderSlot={<UButtonLoader />}\n      labelSlot={<UButtonLabel>{props.children}</UButtonLabel>}\n    />\n  );\n};\n\nexport type AnchorButtonProps = UButtonAnchorRootProps &\n  Partial<ButtonStyleProps> & {\n    /** Text content */\n    children: ReactNode;\n  };\nexport const AnchorButton = (props: AnchorButtonProps) => {\n  return (\n    <ButtonLayout\n      renderRoot={(children, className) => (\n        <UButtonAnchorRoot {...props} className={className}>\n          {children}\n        </UButtonAnchorRoot>\n      )}\n      styleProps={{ buttonProps: props, className: props.className }}\n      labelSlot={<UButtonLabel>{props.children}</UButtonLabel>}\n    />\n  );\n};\n\nexport type IconAnchorButtonProps = UButtonAnchorRootProps &\n  Omit<Partial<ButtonStyleProps>, \"fullWidth\"> & {\n    variant?: Exclude<ButtonStyleProps[\"variant\"], \"link\">;\n    /** Icon render function */\n    icon: (className: string) => ReactNode;\n  };\nexport const IconAnchorButton = (props: IconAnchorButtonProps) => {\n  return (\n    <IconButtonLayout\n      renderRoot={(children, className) => (\n        <UButtonAnchorRoot {...props} className={className}>\n          {children}\n        </UButtonAnchorRoot>\n      )}\n      styleProps={{ buttonProps: { ...props, fullWidth: false }, className: props.className }}\n      iconSlot={<UButtonIcon>{props.icon}</UButtonIcon>}\n    />\n  );\n};\n",
        "target": "underatom/components/react-aria/button/Button.atoms.tsx"
      },
      {
        "type": "registry:ui",
        "path": "ui/react-aria/button/Button.underatoms.tsx",
        "content": "import type { ComponentPropsWithoutRef, ReactNode } from \"react\";\nimport { useRef } from \"react\";\nimport type { AriaButtonProps } from \"react-aria\";\nimport { mergeProps, useButton, useFocusRing } from \"react-aria\";\nimport { CaretDown, Loader } from \"../../../utils/Icons\";\nimport { getGenericContext } from \"../../../utils/utils\";\nimport {\n  ButtonDotStyleProps,\n  ButtonStyleProps,\n  buttonCaretClass,\n  buttonClass,\n  buttonDotClass,\n  buttonIconClass,\n  buttonLabelClass,\n  buttonLoaderClass,\n} from \"./button\";\n\nexport type UButtonRootProps = ButtonStyleProps &\n  AriaButtonProps<\"button\"> & {\n    innerRef?: React.RefObject<HTMLButtonElement>;\n    className?: string;\n  };\n\nexport const { Provider: ButtonStylePropsProvider, useComponentContext: useButtonStyleProps } =\n  getGenericContext<ButtonStyleProps>(\"ButtonStyleProps\");\n\nexport const UButtonRoot = ({ className, ...props }: UButtonRootProps) => {\n  const refs = useRef<HTMLButtonElement>(null);\n  const { innerRef = refs } = props;\n  const { buttonProps, isPressed } = useButton(props, refs);\n  const { isFocusVisible, focusProps } = useFocusRing();\n\n  return (\n    <button\n      ref={innerRef}\n      data-active={isPressed}\n      data-ring={isFocusVisible}\n      className={buttonClass({ buttonProps: props, className })}\n      {...mergeProps(buttonProps, focusProps)}\n    >\n      <ButtonStylePropsProvider value={props}>{props.children}</ButtonStylePropsProvider>\n    </button>\n  );\n};\n\nexport type UButtonAnchorRootProps = ButtonStyleProps &\n  ComponentPropsWithoutRef<\"a\"> & {\n    innerRef?: React.RefObject<HTMLAnchorElement>;\n  };\nexport const UButtonAnchorRoot = ({ className, ...props }: UButtonAnchorRootProps) => {\n  const refs = useRef<HTMLAnchorElement>(null);\n  const { innerRef = refs } = props;\n  const { isFocusVisible, focusProps } = useFocusRing();\n\n  return (\n    <a\n      ref={innerRef}\n      data-ring={isFocusVisible}\n      className={buttonClass({ buttonProps: props, className })}\n      {...mergeProps(props, focusProps)}\n    >\n      <ButtonStylePropsProvider value={props}>{props.children}</ButtonStylePropsProvider>\n    </a>\n  );\n};\n\nexport type UButtonLabelProps = {\n  /** Label content */\n  children: ReactNode;\n  className?: string;\n};\nexport const UButtonLabel = ({ children, className }: UButtonLabelProps) => {\n  const buttonProps = useButtonStyleProps();\n  return <span className={buttonLabelClass({ buttonProps, className })}>{children}</span>;\n};\n\nexport type UButtonIconProps = {\n  /** Icon render function */\n  children: (className: string) => ReactNode;\n  className?: string;\n};\nexport const UButtonIcon = ({ children, className }: UButtonIconProps) => {\n  const buttonProps = useButtonStyleProps();\n  return <>{children(buttonIconClass({ buttonProps, className }))}</>;\n};\n\nexport type UButtonDotProps = ButtonDotStyleProps & {\n  className?: string;\n};\nexport const UButtonDot = ({ className, ...props }: UButtonDotProps) => {\n  const buttonProps = useButtonStyleProps();\n  return <span className={buttonDotClass({ buttonProps, buttonDotProps: props, className })} />;\n};\n\nexport type UButtonLoader = {\n  className?: string;\n};\nexport const UButtonLoader = ({ className }: UButtonLoader) => {\n  const buttonProps = useButtonStyleProps();\n  return <Loader className={buttonLoaderClass({ buttonProps, className })} />;\n};\n\nexport type UButtonCaret = {\n  className?: string;\n};\nexport const UButtonCaret = ({ className }: UButtonCaret) => {\n  const buttonProps = useButtonStyleProps();\n  return <CaretDown className={buttonCaretClass({ buttonProps, className })} />;\n};\n",
        "target": "underatom/components/react-aria/button/Button.underatoms.tsx"
      },
      {
        "type": "registry:ui",
        "path": "ui/react-aria/button/button.tsx",
        "content": "import { tv } from \"../../../utils/extendedTV\";\nimport type { RenderRoot } from \"../../../utils/utils\";\n\n/*\n  ====================================\n  Button\n  ====================================\n*/\n\nexport type ButtonStyleProps = {\n  variant?: \"primary\" | \"base\" | \"danger\" | \"ghost\" | \"link\";\n  attachment?: \"none\" | \"center\" | \"start\" | \"end\";\n  size?: \"sm\" | \"md\" | \"lg\";\n  fullWidth?: true | false;\n};\n\nexport type ButtonDotStyleProps = {\n  color?: \"primary\" | \"base\" | \"green\" | \"red\";\n};\n\nexport type ButtonType = {\n  className?: string;\n  buttonProps?: ButtonStyleProps;\n};\n\nexport type ButtonDotType = {\n  className?: string;\n  buttonProps?: ButtonStyleProps;\n  buttonDotProps?: ButtonDotStyleProps;\n};\n\nexport const buttonDefaults: Required<ButtonStyleProps> = {\n  variant: \"primary\",\n  attachment: \"none\",\n  size: \"md\",\n  fullWidth: false,\n};\n\nexport const buttonDotDefaults: Required<ButtonDotStyleProps> = {\n  color: \"primary\",\n};\n\nexport const buttonClass = ({ className, buttonProps }: ButtonType) => {\n  const rootClass = tv({\n    base: \"group/button transition-all data-[ring=true]:shadow-focus-ring data-[ring=true]:z-10 disabled:pointer-events-none cursor-pointer\",\n    variants: {\n      variant: {\n        primary: `\nbg-primary-950\n  data-[active=true]:bg-primary-950\n  disabled:bg-primary-300\n  hover:bg-primary-800\n  data-[state=open]:bg-primary-800\n  data-[ring=true]:bg-primary-800\n  data-[state=open]:border-solid\n  data-[state=open]:border-base-400\n  data-[state=open]:border-1\n`,\n        link: \"data-[state=open]:border-solid data-[state=open]:border-base-950 data-[state=open]:border-1\",\n        base: \"border-solid border-base-300 border-1 bg-base-50 hover:bg-base-100 data-[state=open]:bg-base-100 data-[ring=true]:bg-base-100 data-[active=true]:bg-base-200\",\n        danger:\n          \"bg-danger-500 data-[active=true]:bg-danger-500 disabled:bg-danger-300 hover:bg-danger-600 data-[state=open]:bg-danger-600 data-[ring=true]:bg-danger-600\",\n        ghost:\n          \"disabled:[background:unset] hover:bg-base-100 data-[state=open]:bg-base-100 data-[ring=true]:bg-base-100 data-[state=open]:border-solid data-[state=open]:border-base-950 data-[state=open]:border-1 data-[active=true]:bg-base-200\",\n      },\n      attachment: {\n        none: \"rounded-md\",\n        start: \"rounded-l-md rounded-r-[0px]\",\n        center: \"data-[ring=true]:rounded-md\",\n        end: \"rounded-l-[0px] rounded-r-md data-[ring=true]:rounded-md\",\n      },\n    },\n    compoundVariants: [\n      { variant: [\"primary\"], attachment: [\"none\"], class: \"shadow-sm\" },\n      { variant: [\"link\"], attachment: [\"none\"], class: \"data-[ring=true]:bg-background-50\" },\n      { variant: [\"base\"], attachment: [\"none\"], class: \"shadow-sm disabled:border-base-200 disabled:bg-white\" },\n      {\n        variant: [\"danger\"],\n        attachment: [\"none\"],\n        class: \"shadow-sm data-[state=open]:border-solid data-[state=open]:border-base-950 data-[state=open]:border-1\",\n      },\n      {\n        variant: [\"ghost\"],\n        attachment: [\"none\"],\n        class: \"disabled:shadow-none hover:shadow-sm data-[state=open]:shadow-sm data-[active=true]:shadow-sm\",\n      },\n      {\n        variant: [\"primary\"],\n        attachment: [\"start\"],\n        class: \"data-[ring=true]:rounded-l-md data-[ring=true]:rounded-r-sm\",\n      },\n      { variant: [\"link\"], attachment: [\"start\"], class: \"data-[ring=true]:bg-white data-[ring=true]:rounded-md\" },\n      { variant: [\"base\"], attachment: [\"start\"], class: \"disabled:bg-base-50 data-[ring=true]:rounded-md\" },\n      { variant: [\"danger\", \"ghost\"], attachment: [\"start\"], class: \"data-[ring=true]:rounded-md\" },\n      { variant: [\"link\"], attachment: [\"center\", \"end\"], class: \"data-[ring=true]:bg-white\" },\n      { variant: [\"base\"], attachment: [\"center\", \"end\"], class: \"disabled:bg-base-50\" },\n    ],\n    defaultVariants: { variant: buttonDefaults.variant, attachment: buttonDefaults.attachment },\n  });\n  return rootClass({\n    class: className,\n    variant: buttonProps?.variant,\n    attachment: buttonProps?.attachment,\n  });\n};\n\nexport const buttonIconClass = ({ className, buttonProps }: ButtonType) => {\n  const iconClass = tv({\n    base: \"w-5 h-5\",\n    variants: {\n      variant: {\n        primary: \"text-white\",\n        link: \"text-base-950 group-disabled/button:text-primary-400\",\n        base: \"text-base-950 group-disabled/button:text-primary-400\",\n        danger: \"text-white\",\n        ghost: \"text-base-950 group-disabled/button:text-primary-400\",\n      },\n    },\n\n    defaultVariants: { variant: buttonDefaults.variant },\n  });\n  return iconClass({\n    class: className,\n\n    variant: buttonProps?.variant,\n  });\n};\n\nexport const buttonLabelClass = ({ className, buttonProps }: ButtonType) => {\n  const labelClass = tv({\n    base: \"text-sm font-text font-medium\",\n    variants: {\n      variant: {\n        primary: \"text-white\",\n        link: `\ntext-base-950\n  group-disabled/button:text-sm\n  group-data-[active=true]/button:text-sm\n  group-disabled/button:font-text\n  group-data-[active=true]/button:font-text\n  group-disabled/button:text-primary-400\n  group-disabled/button:[text-decoration-line:unset]\n  group-data-[active=true]/button:[text-decoration-line:unset]\n  group-hover/button:text-[14px]\n  group-data-[state=open]/button:text-[14px]\n  group-data-[ring=true]/button:text-[14px]\n  group-hover/button:font-['GeistVariable']\n  group-data-[state=open]/button:font-['GeistVariable']\n  group-data-[ring=true]/button:font-['GeistVariable']\n  group-hover/button:leading-[24px]\n  group-data-[state=open]/button:leading-[24px]\n  group-data-[ring=true]/button:leading-[24px]\n  group-hover/button:underline\n  group-data-[state=open]/button:underline\n  group-data-[ring=true]/button:underline\n`,\n        base: \"text-base-950 group-disabled/button:text-primary-400\",\n        danger: \"text-white\",\n        ghost: \"text-base-950 group-disabled/button:text-primary-400\",\n      },\n    },\n\n    defaultVariants: { variant: buttonDefaults.variant },\n  });\n  return labelClass({\n    class: className,\n\n    variant: buttonProps?.variant,\n  });\n};\n\nexport const buttonDotClass = ({ className, buttonProps, buttonDotProps }: ButtonDotType) => {\n  const dotClass = tv({\n    base: \"w-[6px] h-[6px] rounded-xs transition-all\",\n    variants: {\n      variant: {\n        primary: \"bg-white group-disabled/button:[background:#fcfcfc]\",\n        danger: \"bg-white group-disabled/button:[background:#fcfcfc]\",\n        base: \"group-disabled/button:[background:#8b8b8d]\",\n        ghost: \"group-disabled/button:[background:#8b8b8d]\",\n        link: \"\",\n      },\n      dotColor: { base: \"\", primary: \"\", red: \"\", green: \"\" },\n    },\n    compoundVariants: [\n      { variant: [\"base\", \"ghost\"], dotColor: [\"base\"], class: \"[background:#09090b]\" },\n      { variant: [\"base\", \"ghost\"], dotColor: [\"primary\"], class: \"[background:#18181b]\" },\n      { variant: [\"base\", \"ghost\"], dotColor: [\"red\"], class: \"[background:#dc2626]\" },\n      { variant: [\"base\", \"ghost\"], dotColor: [\"green\"], class: \"bg-success-500\" },\n    ],\n    defaultVariants: { dotColor: buttonDotDefaults.color, variant: buttonDefaults.variant },\n  });\n  return dotClass({\n    class: className,\n    dotColor: buttonDotProps?.color,\n    variant: buttonProps?.variant,\n  });\n};\n\nexport const buttonCaretClass = ({ className, buttonProps }: ButtonType) => {\n  const caretClass = tv({\n    base: \"w-5 h-5\",\n    variants: {\n      variant: {\n        primary: \"text-white\",\n        base: \"text-base-950 group-disabled/button:text-primary-400\",\n        danger: \"text-white\",\n        ghost: \"text-base-950 group-disabled/button:text-primary-400\",\n        link: \"\",\n      },\n    },\n\n    defaultVariants: { variant: buttonDefaults.variant },\n  });\n  return caretClass({\n    class: className,\n\n    variant: buttonProps?.variant,\n  });\n};\n\nexport const buttonLoaderClass = ({ className, buttonProps }: ButtonType) => {\n  const loaderClass = tv({\n    base: \"group-disabled/button:w-5 group-disabled/button:h-5 animate-spin\",\n    variants: {\n      variant: {\n        primary: \"group-disabled/button:text-base-50\",\n        danger: \"group-disabled/button:text-base-50\",\n        base: \"group-disabled/button:text-base-400\",\n        ghost: \"group-disabled/button:text-base-400\",\n        link: \"group-disabled/button:text-base-400\",\n      },\n    },\n\n    defaultVariants: { variant: buttonDefaults.variant },\n  });\n  return loaderClass({\n    class: className,\n\n    variant: buttonProps?.variant,\n  });\n};\n\nexport const IconButtonLayout = ({\n  renderRoot,\n  styleProps: { className, buttonProps },\n  iconSlot,\n}: {\n  renderRoot: RenderRoot;\n  styleProps: ButtonType;\n  iconSlot: React.ReactNode;\n}) =>\n  renderRoot(\n    <>{iconSlot}</>,\n    tv({\n      base: \"flex flex-row justify-center items-center gap-5\",\n      variants: { size: { sm: \"h-9 w-9\", md: \"h-11 w-11\", lg: \"h-[48px] w-[48px]\" } },\n\n      defaultVariants: { size: buttonDefaults.size },\n    })({\n      class: className,\n      size: buttonProps?.size,\n    }),\n  );\nexport const ButtonLayout = ({\n  renderRoot,\n  styleProps: { className, buttonProps },\n  labelSlot,\n}: {\n  renderRoot: RenderRoot;\n  styleProps: ButtonType;\n  labelSlot: React.ReactNode;\n}) =>\n  renderRoot(\n    <>{labelSlot}</>,\n    tv({\n      base: \"flex flex-row justify-center items-center\",\n      variants: {\n        size: { sm: \"h-9 gap-1\", md: \"h-11 gap-2\", lg: \"h-[48px] gap-[10px]\" },\n        fullWidth: { false: \"w-fit\", true: \"w-full\" },\n      },\n      compoundVariants: [\n        { size: [\"sm\"], fullWidth: [false], class: \"px-3\" },\n        { size: [\"md\"], fullWidth: [false], class: \"px-5\" },\n        { size: [\"lg\"], fullWidth: [false], class: \"px-7\" },\n      ],\n      defaultVariants: { size: buttonDefaults.size, fullWidth: buttonDefaults.fullWidth },\n    })({\n      class: className,\n      size: buttonProps?.size,\n      fullWidth: buttonProps?.fullWidth,\n    }),\n  );\nexport const ButtonWithLeftIconLayout = ({\n  renderRoot,\n  styleProps: { className, buttonProps },\n  iconSlot,\n  labelSlot,\n}: {\n  renderRoot: RenderRoot;\n  styleProps: ButtonType;\n  iconSlot: React.ReactNode;\n  labelSlot: React.ReactNode;\n}) =>\n  renderRoot(\n    <>\n      {iconSlot}\n      {labelSlot}\n    </>,\n    tv({\n      base: \"flex flex-row justify-center items-center\",\n      variants: {\n        size: { sm: \"h-9 gap-1\", md: \"h-11 gap-2\", lg: \"h-[48px] gap-[10px]\" },\n        fullWidth: { false: \"w-fit\", true: \"w-full\" },\n      },\n      compoundVariants: [\n        { size: [\"sm\"], fullWidth: [false], class: \"px-3\" },\n        { size: [\"md\"], fullWidth: [false], class: \"px-5\" },\n        { size: [\"lg\"], fullWidth: [false], class: \"px-7\" },\n      ],\n      defaultVariants: { size: buttonDefaults.size, fullWidth: buttonDefaults.fullWidth },\n    })({\n      class: className,\n      size: buttonProps?.size,\n      fullWidth: buttonProps?.fullWidth,\n    }),\n  );\nexport const ButtonWithRightIconLayout = ({\n  renderRoot,\n  styleProps: { className, buttonProps },\n  labelSlot,\n  iconSlot,\n}: {\n  renderRoot: RenderRoot;\n  styleProps: ButtonType;\n  labelSlot: React.ReactNode;\n  iconSlot: React.ReactNode;\n}) =>\n  renderRoot(\n    <>\n      {labelSlot}\n      {iconSlot}\n    </>,\n    tv({\n      base: \"flex flex-row justify-center items-center\",\n      variants: {\n        size: { sm: \"h-9 gap-1\", md: \"h-11 gap-2\", lg: \"h-[48px] gap-[10px]\" },\n        fullWidth: { false: \"w-fit\", true: \"w-full\" },\n      },\n      compoundVariants: [\n        { size: [\"sm\"], fullWidth: [false], class: \"px-3\" },\n        { size: [\"md\"], fullWidth: [false], class: \"px-5\" },\n        { size: [\"lg\"], fullWidth: [false], class: \"px-7\" },\n      ],\n      defaultVariants: { size: buttonDefaults.size, fullWidth: buttonDefaults.fullWidth },\n    })({\n      class: className,\n      size: buttonProps?.size,\n      fullWidth: buttonProps?.fullWidth,\n    }),\n  );\nexport const ButtonWithDotLayout = ({\n  renderRoot,\n  styleProps: { className, buttonProps },\n  dotSlot,\n  labelSlot,\n}: {\n  renderRoot: RenderRoot;\n  styleProps: ButtonType;\n  dotSlot: React.ReactNode;\n  labelSlot: React.ReactNode;\n}) =>\n  renderRoot(\n    <>\n      {dotSlot}\n      {labelSlot}\n    </>,\n    tv({\n      base: \"flex flex-row justify-center items-center\",\n      variants: {\n        size: { sm: \"h-9 gap-[6px]\", md: \"h-11 gap-2\", lg: \"h-[48px] gap-[10px]\" },\n        fullWidth: { false: \"w-fit\", true: \"w-full\" },\n      },\n      compoundVariants: [\n        { size: [\"sm\"], fullWidth: [false], class: \"px-3\" },\n        { size: [\"md\"], fullWidth: [false], class: \"px-5\" },\n        { size: [\"lg\"], fullWidth: [false], class: \"px-7\" },\n      ],\n      defaultVariants: { size: buttonDefaults.size, fullWidth: buttonDefaults.fullWidth },\n    })({\n      class: className,\n      size: buttonProps?.size,\n      fullWidth: buttonProps?.fullWidth,\n    }),\n  );\nexport const ButtonWithCaretLayout = ({\n  renderRoot,\n  styleProps: { className, buttonProps },\n  iconSlot,\n  labelSlot,\n  caretSlot,\n}: {\n  renderRoot: RenderRoot;\n  styleProps: ButtonType;\n  iconSlot: React.ReactNode;\n  labelSlot: React.ReactNode;\n  caretSlot: React.ReactNode;\n}) =>\n  renderRoot(\n    <>\n      <div\n        className={tv({\n          base: \"h-fit w-fit flex flex-row justify-center items-center\",\n          variants: { size: { sm: \"gap-1\", md: \"gap-2\", lg: \"gap-2\" } },\n\n          defaultVariants: { size: buttonDefaults.size },\n        })({ size: buttonProps?.size })}\n      >\n        {iconSlot}\n        {labelSlot}\n      </div>\n      {caretSlot}\n    </>,\n    tv({\n      base: \"flex flex-row items-center\",\n      variants: {\n        size: { sm: \"h-9 px-3\", md: \"h-11 px-5\", lg: \"h-[48px] px-7\" },\n        fullWidth: { false: \"w-fit justify-center\", true: \"w-full justify-between\" },\n      },\n      compoundVariants: [\n        { size: [\"sm\"], fullWidth: [false], class: \"gap-5\" },\n        { size: [\"md\"], fullWidth: [false], class: \"gap-7\" },\n        { size: [\"lg\"], fullWidth: [false], class: \"gap-9\" },\n        { size: [\"sm\"], fullWidth: [true], class: \"gap-1\" },\n        { size: [\"md\", \"lg\"], fullWidth: [true], class: \"gap-2\" },\n      ],\n      defaultVariants: { size: buttonDefaults.size, fullWidth: buttonDefaults.fullWidth },\n    })({\n      class: className,\n      size: buttonProps?.size,\n      fullWidth: buttonProps?.fullWidth,\n    }),\n  );\nexport const LoadingButtonLayout = ({\n  renderRoot,\n  styleProps: { className, buttonProps },\n  loaderSlot,\n  labelSlot,\n}: {\n  renderRoot: RenderRoot;\n  styleProps: ButtonType;\n  loaderSlot: React.ReactNode;\n  labelSlot: React.ReactNode;\n}) =>\n  renderRoot(\n    <>\n      {loaderSlot}\n      {labelSlot}\n    </>,\n    tv({\n      base: \"flex flex-row justify-center items-center\",\n      variants: {\n        size: { sm: \"h-9 gap-[6px]\", md: \"h-11 gap-2\", lg: \"h-[48px] gap-2\" },\n        fullWidth: { false: \"w-fit\", true: \"w-full\" },\n      },\n      compoundVariants: [\n        { size: [\"sm\"], fullWidth: [false], class: \"px-3\" },\n        { size: [\"md\"], fullWidth: [false], class: \"px-5\" },\n        { size: [\"lg\"], fullWidth: [false], class: \"px-7\" },\n      ],\n      defaultVariants: { size: buttonDefaults.size, fullWidth: buttonDefaults.fullWidth },\n    })({\n      class: className,\n      size: buttonProps?.size,\n      fullWidth: buttonProps?.fullWidth,\n    }),\n  );\n",
        "target": "underatom/components/react-aria/button/button.tsx"
      }
    ]
  },
  {
    "name": "button-toggle",
    "type": "registry:ui",
    "relativePath": "react-aria/button-toggle",
    "stylingName": "button-toggle.tsx",
    "dependencies": [
      "react-aria",
      "react-stately"
    ],
    "files": [
      {
        "type": "registry:ui",
        "path": "ui/react-aria/button-toggle/ButtonToggle.atoms.tsx",
        "content": "import type { ReactNode } from \"react\";\nimport {\n  ButtonToggleWithLeftIconLayout,\n  ButtonToggleWithRightIconLayout,\n  ButtonToggleWithDotLayout,\n  IconButtonToggleLayout,\n  LoadingButtonToggleLayout,\n  ButtonToggleDotStyleProps,\n} from \"./button-toggle\";\nimport { ButtonToggleLayout } from \"./button-toggle\";\nimport type { UButtonToggleRootProps } from \"./ButtonToggle.underatoms\";\nimport {\n  UButtonToggleRoot,\n  UButtonToggleIcon,\n  UButtonToggleLabel,\n  UButtonToggleDot,\n  UButtonToggleLoader,\n} from \"./ButtonToggle.underatoms\";\n\nexport type ButtonToggleProps = UButtonToggleRootProps & {\n  /** Text content */\n  children: ReactNode;\n};\nexport const ButtonToggle = (props: ButtonToggleProps) => {\n  return (\n    <ButtonToggleLayout\n      renderRoot={(children, className) => (\n        <UButtonToggleRoot {...props} className={className}>\n          {children}\n        </UButtonToggleRoot>\n      )}\n      styleProps={{ className: props.className, buttonToggleProps: props }}\n      labelSlot={<UButtonToggleLabel>{props.children}</UButtonToggleLabel>}\n    />\n  );\n};\n\nexport type ButtonToggleWithLeftIconProps = UButtonToggleRootProps & {\n  /** The icon render function */\n  icon?: (className: string) => ReactNode;\n  /** Text content */\n  children: ReactNode;\n};\nexport const ButtonToggleWithLeftIcon = (props: ButtonToggleWithLeftIconProps) => {\n  return (\n    <ButtonToggleWithLeftIconLayout\n      renderRoot={(children, className) => (\n        <UButtonToggleRoot {...props} className={className}>\n          {children}\n        </UButtonToggleRoot>\n      )}\n      styleProps={{ className: props.className, buttonToggleProps: props }}\n      iconSlot={props.icon && <UButtonToggleIcon>{props.icon}</UButtonToggleIcon>}\n      labelSlot={<UButtonToggleLabel>{props.children}</UButtonToggleLabel>}\n    />\n  );\n};\n\nexport type ButtonToggleWithRightIconProps = UButtonToggleRootProps & {\n  /** The icon render function */\n  icon?: (className: string) => ReactNode;\n  /** Text content */\n  children: ReactNode;\n};\nexport const ButtonToggleWithRightIcon = (props: ButtonToggleWithRightIconProps) => {\n  return (\n    <ButtonToggleWithRightIconLayout\n      renderRoot={(children, className) => (\n        <UButtonToggleRoot {...props} className={className}>\n          {children}\n        </UButtonToggleRoot>\n      )}\n      styleProps={{ className: props.className, buttonToggleProps: props }}\n      iconSlot={props.icon && <UButtonToggleIcon>{props.icon}</UButtonToggleIcon>}\n      labelSlot={<UButtonToggleLabel>{props.children}</UButtonToggleLabel>}\n    />\n  );\n};\n\nexport type ButtonToggleWithDotProps = UButtonToggleRootProps & {\n  /** Text content */\n  children: ReactNode;\n  dotColor?: ButtonToggleDotStyleProps[\"color\"];\n};\nexport const ButtonToggleWithDot = (props: ButtonToggleWithDotProps) => {\n  return (\n    <ButtonToggleWithDotLayout\n      renderRoot={(children, className) => (\n        <UButtonToggleRoot {...props} className={className}>\n          {children}\n        </UButtonToggleRoot>\n      )}\n      styleProps={{ className: props.className, buttonToggleProps: props }}\n      dotSlot={<UButtonToggleDot color={props.dotColor} />}\n      labelSlot={<UButtonToggleLabel>{props.children}</UButtonToggleLabel>}\n    />\n  );\n};\n\nexport type IconButtonToggleProps = Omit<UButtonToggleRootProps, \"fullWidth\"> & {\n  /** Icon render function */\n  icon: (className: string) => ReactNode;\n};\nexport const IconButtonToggle = (props: IconButtonToggleProps) => {\n  return (\n    <IconButtonToggleLayout\n      renderRoot={(children, className) => (\n        <UButtonToggleRoot {...props} className={className}>\n          {children}\n        </UButtonToggleRoot>\n      )}\n      styleProps={{ className: props.className, buttonToggleProps: props }}\n      iconSlot={<UButtonToggleIcon>{props.icon}</UButtonToggleIcon>}\n    />\n  );\n};\n\nexport type LoadingButtonToggleProps = Omit<UButtonToggleRootProps, \"isDisabled\"> & {\n  /** Text content */\n  children: ReactNode;\n};\nexport const LoadingButtonToggle = (props: LoadingButtonToggleProps) => {\n  return (\n    <LoadingButtonToggleLayout\n      renderRoot={(children, className) => (\n        <UButtonToggleRoot {...props} isDisabled className={className}>\n          {children}\n        </UButtonToggleRoot>\n      )}\n      styleProps={{ className: props.className, buttonToggleProps: props }}\n      loaderSlot={<UButtonToggleLoader />}\n      labelSlot={<UButtonToggleLabel>{props.children}</UButtonToggleLabel>}\n    />\n  );\n};\n",
        "target": "underatom/components/react-aria/button-toggle/ButtonToggle.atoms.tsx"
      },
      {
        "type": "registry:ui",
        "path": "ui/react-aria/button-toggle/ButtonToggle.underatoms.tsx",
        "content": "import type { ReactNode } from \"react\";\nimport { useRef } from \"react\";\nimport type { AriaToggleButtonProps } from \"react-aria\";\nimport { mergeProps, useToggleButton, useFocusRing } from \"react-aria\";\nimport { useToggleState } from \"react-stately\";\nimport { Loader } from \"../../../utils/Icons\";\nimport { getGenericContext } from \"../../../utils/utils\";\nimport {\n  ButtonToggleDotStyleProps,\n  ButtonToggleStyleProps,\n  buttonToggleClass,\n  buttonToggleDotClass,\n  buttonToggleIconClass,\n  buttonToggleLabelClass,\n  buttonToggleLoaderClass,\n} from \"./button-toggle\";\n\nexport const { Provider: ButtonToggleInternalProvider, useComponentContext: useButtonToggleInternalProvider } =\n  getGenericContext<UButtonToggleRootProps>(\"ButtonToggleInternalProvider\");\n\nexport type UButtonToggleRootProps = ButtonToggleStyleProps &\n  AriaToggleButtonProps<\"button\"> & {\n    innerRef?: React.RefObject<HTMLButtonElement>;\n    className?: string;\n  };\nexport const UButtonToggleRoot = (props: UButtonToggleRootProps) => {\n  const refs = useRef<HTMLButtonElement>(null);\n  const { innerRef = refs } = props;\n  const state = useToggleState(props);\n  const { buttonProps, isPressed } = useToggleButton(props, state, refs);\n  const { isFocusVisible, focusProps } = useFocusRing();\n\n  return (\n    <button\n      ref={innerRef}\n      data-active={isPressed}\n      data-ring={isFocusVisible}\n      data-toggled={!!state.isSelected}\n      data-disabled={props.isDisabled}\n      {...mergeProps(buttonProps, focusProps)}\n      className={buttonToggleClass({ className: props.className, buttonToggleProps: props })}\n    >\n      <ButtonToggleInternalProvider value={props}>{props.children}</ButtonToggleInternalProvider>\n    </button>\n  );\n};\n\nexport type UButtonToggleLabelProps = {\n  /** Label content */\n  children: ReactNode;\n  className?: string;\n};\nexport const UButtonToggleLabel = ({ children, className }: UButtonToggleLabelProps) => {\n  const buttonToggleProps = useButtonToggleInternalProvider();\n  return <span className={buttonToggleLabelClass({ className, buttonToggleProps })}>{children}</span>;\n};\n\nexport type UButtonToggleIconProps = {\n  /** Icon render function */\n  children: (className: string) => ReactNode;\n  className?: string;\n};\nexport const UButtonToggleIcon = ({ children, className }: UButtonToggleIconProps) => {\n  const buttonToggleProps = useButtonToggleInternalProvider();\n  return <>{children(buttonToggleIconClass({ className, buttonToggleProps }))}</>;\n};\n\nexport type UButtonToggleDotProps = ButtonToggleDotStyleProps & {\n  className?: string;\n};\nexport const UButtonToggleDot = ({ className, ...props }: UButtonToggleDotProps) => {\n  const buttonToggleProps = useButtonToggleInternalProvider();\n  return <span className={buttonToggleDotClass({ className, buttonToggleProps, buttonToggleDotProps: props })} />;\n};\n\nexport type UButtonToggleLoader = {\n  className?: string;\n};\nexport const UButtonToggleLoader = ({ className }: UButtonToggleLoader) => {\n  const buttonToggleProps = useButtonToggleInternalProvider();\n  return <Loader className={buttonToggleLoaderClass({ className, buttonToggleProps })} />;\n};\n",
        "target": "underatom/components/react-aria/button-toggle/ButtonToggle.underatoms.tsx"
      },
      {
        "type": "registry:ui",
        "path": "ui/react-aria/button-toggle/button-toggle.tsx",
        "content": "import { tv } from \"../../../utils/extendedTV\";\nimport type { RenderRoot } from \"../../../utils/utils\";\n\n/*\n  ====================================\n  ButtonToggle\n  ====================================\n*/\n\nexport type ButtonToggleStyleProps = {\n  attachment?: \"none\" | \"center\" | \"start\" | \"end\";\n  fullWidth?: true | false;\n  size?: \"sm\" | \"md\" | \"lg\";\n};\n\nexport type ButtonToggleDotStyleProps = {\n  color?: \"primary\" | \"base\" | \"green\" | \"red\";\n};\n\nexport type ButtonToggleType = {\n  className?: string;\n  buttonToggleProps?: ButtonToggleStyleProps;\n};\n\nexport type ButtonToggleDotType = {\n  className?: string;\n  buttonToggleProps?: ButtonToggleStyleProps;\n  buttonToggleDotProps?: ButtonToggleDotStyleProps;\n};\n\nexport const buttonToggleDefaults: Required<ButtonToggleStyleProps> = {\n  attachment: \"none\",\n  fullWidth: false,\n  size: \"md\",\n};\n\nexport const buttonToggleDotDefaults: Required<ButtonToggleDotStyleProps> = {\n  color: \"primary\",\n};\n\nexport const buttonToggleClass = ({ className, buttonToggleProps }: ButtonToggleType) => {\n  const rootClass = tv({\n    base: `\ngroup/buttonToggle\n  border-solid\n  data-[toggled=true]:border-primary-950\n  border-1\n  transition-all\n  data-[toggled=true]:data-[disabled=true]:border-base-400\n  data-[disabled=true]:bg-base-50\n  bg-base-50\n  data-[active=true]:bg-base-50\n  data-[toggled=true]:hover:bg-primary-200\n  data-[toggled=true]:data-[ring=true]:bg-primary-200\n  data-[ring=true]:shadow-focus-ring\n  border-base-300\n  hover:bg-base-100\n  data-[ring=true]:bg-base-100\n  data-[toggled=true]:data-[disabled=true]:bg-base-50\n  data-[ring=true]:z-10\n  data-[disabled=true]:pointer-events-none\n  cursor-pointer\n`,\n    variants: {\n      attachment: {\n        none: \"data-[toggled=true]:bg-primary-100 data-[toggled=true]:data-[active=true]:bg-primary-100 rounded-md data-[ring=true]:border-base-200 data-[toggled=true]:data-[ring=true]:border-primary-950\",\n        center:\n          \"data-[toggled=true]:bg-base-100 data-[toggled=true]:data-[active=true]:bg-base-100 data-[ring=true]:rounded-md\",\n        start:\n          \"data-[toggled=true]:bg-base-100 data-[toggled=true]:data-[active=true]:bg-base-100 rounded-l-md rounded-r-[0px] data-[ring=true]:rounded-md\",\n        end: \"data-[toggled=true]:bg-base-100 data-[toggled=true]:data-[active=true]:bg-base-100 rounded-l-[0px] rounded-r-md data-[ring=true]:rounded-md\",\n      },\n    },\n\n    defaultVariants: { attachment: buttonToggleDefaults.attachment },\n  });\n  return rootClass({\n    class: className,\n    attachment: buttonToggleProps?.attachment,\n  });\n};\n\nexport const buttonToggleIconClass = ({ className }: ButtonToggleType) => {\n  return `w-5 h-5 text-base-950 group-data-[disabled=true]/buttonToggle:text-base-400 ${className}`;\n};\n\nexport const buttonToggleLabelClass = ({ className }: ButtonToggleType) => {\n  return `text-base-950 text-sm font-text font-medium group-data-[disabled=true]/buttonToggle:text-base-400 ${className}`;\n};\n\nexport const buttonToggleDotClass = ({ className, buttonToggleDotProps }: ButtonToggleDotType) => {\n  const dotClass = tv({\n    base: \"w-[6px] h-[6px] rounded-xs group-data-[disabled=true]/buttonToggle:bg-base-400\",\n    variants: {\n      dotColor: { base: \"bg-base-950\", primary: \"bg-primary-950\", red: \"bg-danger-500\", green: \"bg-success-600\" },\n    },\n\n    defaultVariants: { dotColor: buttonToggleDotDefaults.color },\n  });\n  return dotClass({\n    class: className,\n    dotColor: buttonToggleDotProps?.color,\n  });\n};\n\nexport const buttonToggleLoaderClass = ({ className }: ButtonToggleType) => {\n  return `group-data-[disabled=true]/buttonToggle:w-5 group-data-[disabled=true]/buttonToggle:h-5 group-data-[disabled=true]/buttonToggle:text-base-400 animate-spin ${className}`;\n};\n\nexport const IconButtonToggleLayout = ({\n  renderRoot,\n  styleProps: { className, buttonToggleProps },\n  iconSlot,\n}: {\n  renderRoot: RenderRoot;\n  styleProps: ButtonToggleType;\n  iconSlot: React.ReactNode;\n}) =>\n  renderRoot(\n    <>{iconSlot}</>,\n    tv({\n      base: \"flex flex-row justify-center items-center gap-5\",\n      variants: { size: { sm: \"h-9 w-9\", md: \"h-11 w-11\", lg: \"h-[48px] w-[48px]\" } },\n\n      defaultVariants: { size: buttonToggleDefaults.size },\n    })({\n      class: className,\n      size: buttonToggleProps?.size,\n    }),\n  );\nexport const ButtonToggleLayout = ({\n  renderRoot,\n  styleProps: { className, buttonToggleProps },\n  labelSlot,\n}: {\n  renderRoot: RenderRoot;\n  styleProps: ButtonToggleType;\n  labelSlot: React.ReactNode;\n}) =>\n  renderRoot(\n    <>{labelSlot}</>,\n    tv({\n      base: \"flex flex-row justify-center items-center\",\n      variants: {\n        size: { sm: \"h-9 gap-1\", md: \"h-11 gap-2\", lg: \"h-[48px] gap-[10px]\" },\n        fullWidth: { false: \"w-fit\", true: \"w-full\" },\n      },\n      compoundVariants: [\n        { size: [\"sm\"], fullWidth: [false], class: \"px-3\" },\n        { size: [\"md\"], fullWidth: [false], class: \"px-5\" },\n        { size: [\"lg\"], fullWidth: [false], class: \"px-7\" },\n      ],\n      defaultVariants: { size: buttonToggleDefaults.size, fullWidth: buttonToggleDefaults.fullWidth },\n    })({\n      class: className,\n      size: buttonToggleProps?.size,\n      fullWidth: buttonToggleProps?.fullWidth,\n    }),\n  );\nexport const ButtonToggleWithLeftIconLayout = ({\n  renderRoot,\n  styleProps: { className, buttonToggleProps },\n  iconSlot,\n  labelSlot,\n}: {\n  renderRoot: RenderRoot;\n  styleProps: ButtonToggleType;\n  iconSlot: React.ReactNode;\n  labelSlot: React.ReactNode;\n}) =>\n  renderRoot(\n    <>\n      {iconSlot}\n      {labelSlot}\n    </>,\n    tv({\n      base: \"flex flex-row justify-center items-center\",\n      variants: {\n        size: { sm: \"h-9 gap-1\", md: \"h-11 gap-2\", lg: \"h-[48px] gap-[10px]\" },\n        fullWidth: { false: \"w-fit\", true: \"w-full\" },\n      },\n      compoundVariants: [\n        { size: [\"sm\"], fullWidth: [false], class: \"px-3\" },\n        { size: [\"md\"], fullWidth: [false], class: \"px-5\" },\n        { size: [\"lg\"], fullWidth: [false], class: \"px-7\" },\n      ],\n      defaultVariants: { size: buttonToggleDefaults.size, fullWidth: buttonToggleDefaults.fullWidth },\n    })({\n      class: className,\n      size: buttonToggleProps?.size,\n      fullWidth: buttonToggleProps?.fullWidth,\n    }),\n  );\nexport const ButtonToggleWithRightIconLayout = ({\n  renderRoot,\n  styleProps: { className, buttonToggleProps },\n  labelSlot,\n  iconSlot,\n}: {\n  renderRoot: RenderRoot;\n  styleProps: ButtonToggleType;\n  labelSlot: React.ReactNode;\n  iconSlot: React.ReactNode;\n}) =>\n  renderRoot(\n    <>\n      {labelSlot}\n      {iconSlot}\n    </>,\n    tv({\n      base: \"flex flex-row justify-center items-center\",\n      variants: {\n        size: { sm: \"h-9 gap-1\", md: \"h-11 gap-2\", lg: \"h-[48px] gap-[10px]\" },\n        fullWidth: { false: \"w-fit\", true: \"w-full\" },\n      },\n      compoundVariants: [\n        { size: [\"sm\"], fullWidth: [false], class: \"px-3\" },\n        { size: [\"md\"], fullWidth: [false], class: \"px-5\" },\n        { size: [\"lg\"], fullWidth: [false], class: \"px-7\" },\n      ],\n      defaultVariants: { size: buttonToggleDefaults.size, fullWidth: buttonToggleDefaults.fullWidth },\n    })({\n      class: className,\n      size: buttonToggleProps?.size,\n      fullWidth: buttonToggleProps?.fullWidth,\n    }),\n  );\nexport const ButtonToggleWithDotLayout = ({\n  renderRoot,\n  styleProps: { className, buttonToggleProps },\n  dotSlot,\n  labelSlot,\n}: {\n  renderRoot: RenderRoot;\n  styleProps: ButtonToggleType;\n  dotSlot: React.ReactNode;\n  labelSlot: React.ReactNode;\n}) =>\n  renderRoot(\n    <>\n      {dotSlot}\n      {labelSlot}\n    </>,\n    tv({\n      base: \"flex flex-row justify-center items-center\",\n      variants: {\n        size: { sm: \"h-9 gap-[6px]\", md: \"h-11 gap-2\", lg: \"h-[48px] gap-[10px]\" },\n        fullWidth: { false: \"w-fit\", true: \"w-full\" },\n      },\n      compoundVariants: [\n        { size: [\"sm\"], fullWidth: [false], class: \"px-3\" },\n        { size: [\"md\"], fullWidth: [false], class: \"px-5\" },\n        { size: [\"lg\"], fullWidth: [false], class: \"px-7\" },\n      ],\n      defaultVariants: { size: buttonToggleDefaults.size, fullWidth: buttonToggleDefaults.fullWidth },\n    })({\n      class: className,\n      size: buttonToggleProps?.size,\n      fullWidth: buttonToggleProps?.fullWidth,\n    }),\n  );\nexport const LoadingButtonToggleLayout = ({\n  renderRoot,\n  styleProps: { className, buttonToggleProps },\n  loaderSlot,\n  labelSlot,\n}: {\n  renderRoot: RenderRoot;\n  styleProps: ButtonToggleType;\n  loaderSlot: React.ReactNode;\n  labelSlot: React.ReactNode;\n}) =>\n  renderRoot(\n    <>\n      {loaderSlot}\n      {labelSlot}\n    </>,\n    tv({\n      base: \"flex flex-row justify-center items-center\",\n      variants: {\n        size: { sm: \"h-9 gap-1\", md: \"h-11 gap-2\", lg: \"h-[48px] gap-2\" },\n        fullWidth: { false: \"w-fit\", true: \"w-full\" },\n      },\n      compoundVariants: [\n        { size: [\"sm\"], fullWidth: [false], class: \"px-3\" },\n        { size: [\"md\"], fullWidth: [false], class: \"px-5\" },\n        { size: [\"lg\"], fullWidth: [false], class: \"px-7\" },\n      ],\n      defaultVariants: { size: buttonToggleDefaults.size, fullWidth: buttonToggleDefaults.fullWidth },\n    })({\n      class: className,\n      size: buttonToggleProps?.size,\n      fullWidth: buttonToggleProps?.fullWidth,\n    }),\n  );\n",
        "target": "underatom/components/react-aria/button-toggle/button-toggle.tsx"
      }
    ]
  },
  {
    "name": "checkbox",
    "type": "registry:ui",
    "relativePath": "react-aria/checkbox",
    "stylingName": "checkbox.tsx",
    "dependencies": [
      "react-aria-components"
    ],
    "files": [
      {
        "type": "registry:ui",
        "path": "ui/react-aria/checkbox/Checkbox.atoms.tsx",
        "content": "import { CheckboxButtonLayout, CheckboxLayout } from \"./checkbox\";\nimport {\n  UCheckboxAsterisk,\n  UCheckboxDescription,\n  UCheckboxButtonIndicator,\n  UCheckboxButtonProps,\n  UCheckboxButtonRoot,\n  UCheckboxLabel,\n  UCheckboxRoot,\n  UCheckboxRootProps,\n  useCheckboxInternalProvider,\n} from \"./Checkbox.underatoms\";\n\n/*\n  ====================================\n  Checkbox\n  ====================================\n*/\n\nexport type CheckboxProps = Omit<\n  UCheckboxRootProps & {\n    label?: string;\n    description?: string;\n  },\n  \"children\"\n>;\nexport const Checkbox = ({ label, description, className, ...props }: CheckboxProps) => {\n  return (\n    <CheckboxLayout\n      renderRoot={(children, className) => (\n        <UCheckboxRoot {...props} className={className}>\n          {children}\n        </UCheckboxRoot>\n      )}\n      styleProps={{ className, checkboxProps: props }}\n      descriptionSlot={description && <UCheckboxDescription>{description}</UCheckboxDescription>}\n      asteriskSlot={props.isRequired && <UCheckboxAsterisk />}\n      labelSlot={label && <UCheckboxLabel>{label}</UCheckboxLabel>}\n      buttonSlot={<CheckboxButton />}\n    />\n  );\n};\n\n/*\n  ====================================\n  CheckboxButton\n  ====================================\n*/\n\nexport type CheckboxButtonProps = Omit<UCheckboxButtonProps, \"asChild\" | \"children\">;\nexport const CheckboxButton = (props: CheckboxButtonProps) => {\n  const checkboxProps = useCheckboxInternalProvider();\n  return (\n    <CheckboxButtonLayout\n      renderRoot={(children, className) => (\n        <UCheckboxButtonRoot {...props} className={className}>\n          {children}\n        </UCheckboxButtonRoot>\n      )}\n      styleProps={{ className: props.className, checkboxProps }}\n      indicatorSlot={<UCheckboxButtonIndicator />}\n    />\n  );\n};\n",
        "target": "underatom/components/react-aria/checkbox/Checkbox.atoms.tsx"
      },
      {
        "type": "registry:ui",
        "path": "ui/react-aria/checkbox/Checkbox.underatoms.tsx",
        "content": "import { ComponentPropsWithoutRef, ReactNode } from \"react\";\nimport {\n  checkboxAsteriskClass,\n  checkboxButtonClass,\n  checkboxButtonIndicatorClass,\n  checkboxClass,\n  checkboxDescriptionClass,\n  checkboxLabelClass,\n  CheckboxStyleProps,\n} from \"./checkbox\";\nimport { getGenericContext } from \"../../../utils/utils\";\nimport { Check, Minus } from \"../../../utils/Icons\";\nimport { Checkbox, CheckboxProps, CheckboxRenderProps } from \"react-aria-components\";\n\n/*\n  ====================================\n  Checkbox\n  ====================================\n*/\n\nexport const { Provider: CheckboxInternalProvider, useComponentContext: useCheckboxInternalProvider } =\n  getGenericContext<UCheckboxRootProps & { renderProps: CheckboxRenderProps }>(\"CheckboxInternalProvider\");\n\nexport type UCheckboxRootProps = CheckboxProps &\n  CheckboxStyleProps & {\n    children?: ReactNode;\n    className?: string;\n  };\n\nexport const UCheckboxRoot = (props: UCheckboxRootProps) => {\n  return (\n    <Checkbox {...props} className={checkboxClass({ className: props.className, checkboxProps: props })}>\n      {(renderProps) => (\n        <CheckboxInternalProvider value={{ ...props, renderProps }}>{props.children}</CheckboxInternalProvider>\n      )}\n    </Checkbox>\n  );\n};\n\nexport type UCheckboxDescriptionProps = {\n  children: ReactNode;\n  className?: string;\n};\nexport const UCheckboxDescription = ({ children, className }: UCheckboxDescriptionProps) => {\n  const checkboxProps = useCheckboxInternalProvider();\n  return <span className={checkboxDescriptionClass({ className, checkboxProps })}>{children}</span>;\n};\n\nexport type UCheckboxAsterisk = {\n  className?: string;\n};\nexport const UCheckboxAsterisk = ({ className }: UCheckboxAsterisk) => {\n  const checkboxProps = useCheckboxInternalProvider();\n  return <span className={checkboxAsteriskClass({ className, checkboxProps })}>*</span>;\n};\n\nexport type UCheckboxLabelProps = {\n  children: ReactNode;\n  className?: string;\n};\nexport const UCheckboxLabel = ({ children, className }: UCheckboxLabelProps) => {\n  const checkboxProps = useCheckboxInternalProvider();\n  return <span className={checkboxLabelClass({ checkboxProps, className })}>{children}</span>;\n};\n\n/*\n  ====================================\n  CheckboxButton\n  ====================================\n*/\n\nexport type UCheckboxButtonProps = ComponentPropsWithoutRef<\"div\">;\nexport const UCheckboxButtonRoot = (props: UCheckboxButtonProps) => {\n  const checkboxProps = useCheckboxInternalProvider();\n\n  return (\n    <div {...props} className={checkboxButtonClass({ className: props.className, checkboxProps })} aria-hidden=\"true\" />\n  );\n};\nexport type UCheckboxButtonIndicatorProps = {\n  className?: string;\n};\nexport const UCheckboxButtonIndicator = ({ className }: UCheckboxButtonIndicatorProps) => {\n  const { renderProps, ...checkboxProps } = useCheckboxInternalProvider();\n  const { isIndeterminate, isSelected } = renderProps;\n\n  if (isIndeterminate) {\n    return (\n      <Minus\n        className={checkboxButtonIndicatorClass({\n          className,\n          checkboxProps,\n        })}\n      />\n    );\n  }\n  if (isSelected) {\n    return (\n      <Check\n        className={checkboxButtonIndicatorClass({\n          className,\n          checkboxProps,\n        })}\n      />\n    );\n  }\n\n  return null;\n};\n",
        "target": "underatom/components/react-aria/checkbox/Checkbox.underatoms.tsx"
      },
      {
        "type": "registry:ui",
        "path": "ui/react-aria/checkbox/checkbox.tsx",
        "content": "import { tv } from \"../../../utils/extendedTV\";\nimport type { RenderRoot } from \"../../../utils/utils\";\n\n/*\n  ====================================\n  Checkbox\n  ====================================\n*/\n\nexport type CheckboxStyleProps = {\n  size?: \"sm\" | \"md\" | \"lg\";\n};\n\nexport type CheckboxType = {\n  className?: string;\n  checkboxProps?: CheckboxStyleProps;\n};\n\nexport const checkboxDefaults: Required<CheckboxStyleProps> = {\n  size: \"md\",\n};\n\nexport const checkboxClass = ({ className }: CheckboxType) => {\n  return `group/checkbox  ${className}`;\n};\n\nexport const checkboxLabelClass = ({ className }: CheckboxType) => {\n  return `text-base-950 text-sm font-text font-medium group-data-[disabled=true]/checkbox:text-base-400 ${className}`;\n};\n\nexport const checkboxDescriptionClass = ({ className }: CheckboxType) => {\n  return `text-base-700 text-sm font-text font-medium group-data-[invalid=true]/checkbox:text-danger-500 group-data-[disabled=true]/checkbox:text-base-400 group-data-[invalid=true]/checkbox:group-data-[disabled=true]/checkbox:text-base-400 ${className}`;\n};\n\nexport const checkboxAsteriskClass = ({ className }: CheckboxType) => {\n  return `\n  hidden\n  group-data-[disabled=true]/checkbox:text-base-400\n  group-data-[disabled=true]/checkbox:text-sm\n  group-data-[required=true]/checkbox:text-sm\n  group-data-[disabled=true]/checkbox:font-text\n  group-data-[required=true]/checkbox:font-text\n  group-data-[disabled=true]/checkbox:font-medium\n  group-data-[required=true]/checkbox:font-medium\n  group-data-[disabled=true]/checkbox:[display:unset]\n  group-data-[required=true]/checkbox:[display:unset]\n  group-data-[required=true]/checkbox:text-danger-500\n  group-data-[required=true]/checkbox:group-data-[disabled=true]/checkbox:text-base-400\n  ${className}\n  `;\n};\n\nexport const CheckboxLayout = ({\n  renderRoot,\n  styleProps: { className },\n  buttonSlot,\n  labelSlot,\n  asteriskSlot,\n  descriptionSlot,\n}: {\n  renderRoot: RenderRoot;\n  styleProps: CheckboxType;\n  buttonSlot: React.ReactNode;\n  labelSlot: React.ReactNode;\n  asteriskSlot: React.ReactNode;\n  descriptionSlot: React.ReactNode;\n}) =>\n  renderRoot(\n    <>\n      <div className=\"h-fit w-fit flex flex-row gap-[2px]\">\n        <div className=\"h-fit w-fit flex flex-row items-center gap-[10px]\">\n          {buttonSlot}\n          {labelSlot}\n        </div>\n        {asteriskSlot}\n      </div>\n      <div className=\"h-fit w-full flex flex-col gap-[10px] pl-7\">{descriptionSlot}</div>\n    </>,\n    `h-fit w-fit flex flex-col [&>*:not(:first-child)]:[margin-top:-4px] ${className}`,\n  );\nexport type CheckboxButtonType = {\n  className?: string;\n  checkboxProps?: CheckboxStyleProps;\n};\n\nexport const checkboxButtonClass = ({ className }: CheckboxButtonType) => {\n  return `\n  group/checkboxButton\n  border-solid\n  border-base-950\n  border-1\n  bg-base-50\n  group-active/checkbox:bg-base-50\n  group-data-[disabled=true]/checkbox:bg-base-50\n  rounded-xs\n  transition-all\n  group-data-[invalid=true]/checkbox:border-danger-500\n  group-data-[invalid=true]/checkbox:bg-danger-50\n  group-data-[invalid=true]/checkbox:group-active/checkbox:bg-danger-50\n  group-data-[selected=true]/checkbox:bg-primary-950\n  group-data-[indeterminate=true]/checkbox:bg-primary-950\n  group-active/checkbox:group-data-[selected=true]/checkbox:bg-primary-950\n  group-active/checkbox:group-data-[indeterminate=true]/checkbox:bg-primary-950\n  group-data-[invalid=true]/checkbox:group-data-[selected=true]/checkbox:bg-danger-500\n  group-data-[invalid=true]/checkbox:group-data-[indeterminate=true]/checkbox:bg-danger-500\n  group-data-[invalid=true]/checkbox:group-active/checkbox:group-data-[selected=true]/checkbox:bg-danger-500\n  group-data-[invalid=true]/checkbox:group-active/checkbox:group-data-[indeterminate=true]/checkbox:bg-danger-500\n  group-hover/checkbox:bg-base-100\n  group-data-[focus-visible=true]/checkbox:bg-base-100\n  group-data-[invalid=true]/checkbox:group-hover/checkbox:bg-danger-100\n  group-data-[invalid=true]/checkbox:group-data-[focus-visible=true]/checkbox:bg-danger-100\n  group-hover/checkbox:group-data-[selected=true]/checkbox:bg-primary-800\n  group-hover/checkbox:group-data-[indeterminate=true]/checkbox:bg-primary-800\n  group-data-[focus-visible=true]/checkbox:group-data-[selected=true]/checkbox:bg-primary-800\n  group-data-[focus-visible=true]/checkbox:group-data-[indeterminate=true]/checkbox:bg-primary-800\n  group-data-[invalid=true]/checkbox:group-hover/checkbox:group-data-[selected=true]/checkbox:bg-danger-700\n  group-data-[invalid=true]/checkbox:group-hover/checkbox:group-data-[indeterminate=true]/checkbox:bg-danger-700\n  group-data-[invalid=true]/checkbox:group-data-[focus-visible=true]/checkbox:group-data-[selected=true]/checkbox:bg-danger-700\n  group-data-[invalid=true]/checkbox:group-data-[focus-visible=true]/checkbox:group-data-[indeterminate=true]/checkbox:bg-danger-700\n  group-data-[focus-visible=true]/checkbox:shadow-focus-ring\n  group-data-[disabled=true]/checkbox:border-base-200\n  group-data-[disabled=true]/checkbox:group-data-[selected=true]/checkbox:bg-base-200\n  group-data-[disabled=true]/checkbox:group-data-[indeterminate=true]/checkbox:bg-base-200\n  group-data-[invalid=true]/checkbox:group-data-[disabled=true]/checkbox:border-base-200\n  group-data-[invalid=true]/checkbox:group-data-[disabled=true]/checkbox:bg-base-50\n  group-data-[invalid=true]/checkbox:group-data-[disabled=true]/checkbox:group-data-[selected=true]/checkbox:bg-base-200\n  group-data-[invalid=true]/checkbox:group-data-[disabled=true]/checkbox:group-data-[indeterminate=true]/checkbox:bg-base-200\n  ${className}\n  `;\n};\n\nexport const checkboxButtonIndicatorClass = ({ className }: CheckboxButtonType) => {\n  return `\n  w-[14px]\n  group-data-[selected=true]/checkbox:w-[14px]\n  group-data-[indeterminate=true]/checkbox:w-[14px]\n  h-[14px]\n  group-data-[selected=true]/checkbox:h-[14px]\n  group-data-[indeterminate=true]/checkbox:h-[14px]\n  text-white\n  group-data-[disabled=true]/checkbox:group-data-[selected=true]/checkbox:text-base-400\n  group-data-[disabled=true]/checkbox:group-data-[indeterminate=true]/checkbox:text-base-400\n  ${className}\n  `;\n};\n\nexport const CheckboxButtonLayout = ({\n  renderRoot,\n  styleProps: { className },\n  indicatorSlot,\n}: {\n  renderRoot: RenderRoot;\n  styleProps: CheckboxButtonType;\n  indicatorSlot: React.ReactNode;\n}) => renderRoot(<>{indicatorSlot}</>, `h-[14px] w-[14px] flex flex-row justify-center items-center ${className}`);\n\n",
        "target": "underatom/components/react-aria/checkbox/checkbox.tsx"
      }
    ]
  },
  {
    "name": "checkbox-group",
    "type": "registry:ui",
    "relativePath": "react-aria/checkbox-group",
    "stylingName": "checkbox-group.tsx",
    "dependencies": [
      "react-aria-components",
      "react-stately"
    ],
    "files": [
      {
        "type": "registry:ui",
        "path": "ui/react-aria/checkbox-group/CheckboxGroup.atoms.tsx",
        "content": "import {\n  CheckboxGroupCheckboxButtonLayout,\n  CheckboxGroupCheckboxLayout,\n  CheckboxGroupLayout,\n} from \"./checkbox-group\";\nimport {\n  UCheckboxGroupAsterisk,\n  UCheckboxGroupCheckboxButtonIndicator,\n  UCheckboxGroupCheckboxButtonRoot,\n  UCheckboxGroupCheckboxButtonRootProps,\n  UCheckboxGroupCheckboxDescription,\n  UCheckboxGroupCheckboxLabel,\n  UCheckboxGroupCheckboxRoot,\n  UCheckboxGroupCheckboxRootProps,\n  UCheckboxGroupDescription,\n  UCheckboxGroupLabel,\n  UCheckboxGroupRoot,\n  UCheckboxGroupRootProps,\n  useCheckboxGroupInternalProvider,\n} from \"./CheckboxGroup.underatoms\";\n\n/*\n  ====================================\n  CheckboxGroup\n  ====================================\n*/\n\nexport type CheckboxGroupProps = Omit<UCheckboxGroupRootProps, \"children\"> & {\n  label: string;\n  description: string;\n  className?: string;\n  checkboxGroupCheckboxSlots: React.ReactNode[];\n};\n\nexport const CheckboxGroup = ({ label, description, checkboxGroupCheckboxSlots, ...props }: CheckboxGroupProps) => {\n  return (\n    <CheckboxGroupLayout\n      renderRoot={(children, className) => (\n        <UCheckboxGroupRoot {...props} className={className}>\n          {children}\n        </UCheckboxGroupRoot>\n      )}\n      styleProps={{ className: props.className, checkboxGroupProps: props }}\n      labelSlot={<UCheckboxGroupLabel>{label}</UCheckboxGroupLabel>}\n      asteriskSlot={<UCheckboxGroupAsterisk />}\n      descriptionSlot={<UCheckboxGroupDescription>{description}</UCheckboxGroupDescription>}\n      checkboxSlots={checkboxGroupCheckboxSlots}\n    />\n  );\n};\n\n/*\n  ====================================\n  CheckboxGroupCheckbox\n  ====================================\n*/\n\nexport type CheckboxGroupCheckboxProps = UCheckboxGroupCheckboxRootProps & {\n  /** Text content */\n  label?: string;\n  description?: string;\n};\n\nexport const CheckboxGroupCheckbox = ({ label, description, ...props }: CheckboxGroupCheckboxProps) => {\n  const checkboxGroupProps = useCheckboxGroupInternalProvider();\n  return (\n    <CheckboxGroupCheckboxLayout\n      renderRoot={(children, className) => (\n        <UCheckboxGroupCheckboxRoot {...props} className={className}>\n          {children}\n        </UCheckboxGroupCheckboxRoot>\n      )}\n      styleProps={{ className: props.className, checkboxGroupProps }}\n      buttonSlot={<CheckboxGroupCheckboxButton />}\n      labelSlot={<UCheckboxGroupCheckboxLabel>{label}</UCheckboxGroupCheckboxLabel>}\n      descriptionSlot={<UCheckboxGroupCheckboxDescription>{description}</UCheckboxGroupCheckboxDescription>}\n    />\n  );\n};\n\n/*\n  ====================================\n  CheckboxGroupCheckboxButton\n  ====================================\n*/\n\nexport type CheckboxGroupCheckboxButtonProps = Omit<UCheckboxGroupCheckboxButtonRootProps, \"children\">;\n\nexport const CheckboxGroupCheckboxButton = (props: CheckboxGroupCheckboxButtonProps) => {\n  const checkboxGroupProps = useCheckboxGroupInternalProvider();\n  return (\n    <CheckboxGroupCheckboxButtonLayout\n      renderRoot={(children, className) => {\n        return (\n          <UCheckboxGroupCheckboxButtonRoot {...props} className={className}>\n            {children}\n          </UCheckboxGroupCheckboxButtonRoot>\n        );\n      }}\n      styleProps={{ className: props.className, checkboxGroupProps }}\n      indicatorSlot={<UCheckboxGroupCheckboxButtonIndicator />}\n    />\n  );\n};\n",
        "target": "underatom/components/react-aria/checkbox-group/CheckboxGroup.atoms.tsx"
      },
      {
        "type": "registry:ui",
        "path": "ui/react-aria/checkbox-group/CheckboxGroup.underatoms.tsx",
        "content": "import { CheckboxGroup, Checkbox, Label, CheckboxProps, CheckboxRenderProps, LabelProps } from \"react-aria-components\";\nimport {\n  checkboxGroupAsteriskClass,\n  checkboxGroupCheckboxButtonClass,\n  checkboxGroupCheckboxButtonIndicatorClass,\n  checkboxGroupCheckboxClass,\n  checkboxGroupCheckboxDescriptionClass,\n  checkboxGroupCheckboxLabelClass,\n  checkboxGroupClass,\n  checkboxGroupDescriptionClass,\n  checkboxGroupLabelClass,\n  CheckboxGroupStyleProps,\n} from \"./checkbox-group\";\nimport { ComponentPropsWithoutRef, ReactNode } from \"react\";\nimport { CheckboxGroupProps } from \"react-stately\";\nimport { getGenericContext } from \"../../../utils/utils\";\nimport { Check, Minus } from \"../../../utils/Icons\";\n\n/*\n  ====================================\n  CheckboxGroup\n  ====================================\n*/\n\nexport const { Provider: CheckboxGroupInternalProvider, useComponentContext: useCheckboxGroupInternalProvider } =\n  getGenericContext<UCheckboxGroupRootProps>(\"CheckboxGroupInternalProvider\");\n\nexport type UCheckboxGroupRootProps = CheckboxGroupProps &\n  CheckboxGroupStyleProps & {\n    children: ReactNode;\n    className?: string;\n  };\n\nexport const UCheckboxGroupRoot = (props: UCheckboxGroupRootProps) => {\n  return (\n    <CheckboxGroup {...props} className={checkboxGroupClass({ className: props.className, checkboxGroupProps: props })}>\n      <CheckboxGroupInternalProvider value={props}>{props.children}</CheckboxGroupInternalProvider>\n    </CheckboxGroup>\n  );\n};\n\nexport type UCheckboxGroupLabel = LabelProps;\nexport const UCheckboxGroupLabel = (props: UCheckboxGroupLabel) => {\n  const checkboxGroupProps = useCheckboxGroupInternalProvider();\n  return <Label {...props} className={checkboxGroupLabelClass({ className: props.className, checkboxGroupProps })} />;\n};\n\nexport type UCheckboxGroupAsteriskProps = {\n  className?: string;\n};\nexport const UCheckboxGroupAsterisk = (props: UCheckboxGroupAsteriskProps) => {\n  const checkboxGroupProps = useCheckboxGroupInternalProvider();\n  return <span className={checkboxGroupAsteriskClass({ className: props.className, checkboxGroupProps })}>*</span>;\n};\n\nexport type UCheckboxGroupDescriptionProps = {\n  /** Text content */\n  children: ReactNode;\n  className?: string;\n};\nexport const UCheckboxGroupDescription = (props: UCheckboxGroupDescriptionProps) => {\n  const checkboxGroupProps = useCheckboxGroupInternalProvider();\n  return (\n    <span {...props} className={checkboxGroupDescriptionClass({ className: props.className, checkboxGroupProps })} />\n  );\n};\n\n/*\n  ====================================\n  CheckboxGroupCheckbox\n  ====================================\n*/\n\nexport const {\n  Provider: CheckboxGroupCheckboxInternalProvider,\n  useComponentContext: useCheckboxGroupCheckboxInternalProvider,\n} = getGenericContext<CheckboxRenderProps>(\"CheckboxGroupCheckboxProps\");\n\nexport type UCheckboxGroupCheckboxRootProps = Omit<CheckboxProps, \"isInvalid\"> & {\n  className?: string;\n};\nexport const UCheckboxGroupCheckboxRoot = (props: UCheckboxGroupCheckboxRootProps) => {\n  const checkboxGroupProps = useCheckboxGroupInternalProvider();\n  return (\n    <Checkbox {...props} className={checkboxGroupCheckboxClass({ className: props.className, checkboxGroupProps })}>\n      {(renderProps) => (\n        <CheckboxGroupCheckboxInternalProvider value={renderProps}>\n          <>{props.children}</>\n        </CheckboxGroupCheckboxInternalProvider>\n      )}\n    </Checkbox>\n  );\n};\n\nexport type UCheckboxGroupCheckboxLabelProps = {\n  /** Text content */\n  children: ReactNode;\n  className?: string;\n};\nexport const UCheckboxGroupCheckboxLabel = (props: UCheckboxGroupCheckboxLabelProps) => {\n  const checkboxGroupProps = useCheckboxGroupInternalProvider();\n  return (\n    <span {...props} className={checkboxGroupCheckboxLabelClass({ className: props.className, checkboxGroupProps })} />\n  );\n};\n\nexport type UCheckboxGroupCheckboxDescriptionProps = {\n  /** Text content */\n  children: ReactNode;\n  className?: string;\n};\nexport const UCheckboxGroupCheckboxDescription = (props: UCheckboxGroupCheckboxDescriptionProps) => {\n  const checkboxGroupProps = useCheckboxGroupInternalProvider();\n  return (\n    <span\n      {...props}\n      className={checkboxGroupCheckboxDescriptionClass({ className: props.className, checkboxGroupProps })}\n    />\n  );\n};\n\n/*\n  ====================================\n  CheckboxGroupCheckboxButton\n  ====================================\n*/\n\nexport type UCheckboxGroupCheckboxButtonRootProps = ComponentPropsWithoutRef<\"div\">;\nexport const UCheckboxGroupCheckboxButtonRoot = ({ children, ...props }: UCheckboxGroupCheckboxButtonRootProps) => {\n  const checkboxGroupProps = useCheckboxGroupInternalProvider();\n  return (\n    <div\n      {...props}\n      className={checkboxGroupCheckboxButtonClass({\n        className: props.className,\n        checkboxGroupProps,\n      })}\n      aria-hidden=\"true\"\n    >\n      {children}\n    </div>\n  );\n};\n\nexport type UCheckboxGroupCheckboxButtonIndicatorProps = {\n  className?: string;\n};\nexport const UCheckboxGroupCheckboxButtonIndicator = (props: UCheckboxGroupCheckboxButtonIndicatorProps) => {\n  const { isIndeterminate, isSelected } = useCheckboxGroupCheckboxInternalProvider();\n  const checkboxGroupProps = useCheckboxGroupInternalProvider();\n\n  if (isIndeterminate) {\n    return (\n      <Minus\n        className={checkboxGroupCheckboxButtonIndicatorClass({\n          className: props.className,\n          checkboxGroupProps,\n        })}\n      />\n    );\n  }\n  if (isSelected) {\n    return (\n      <Check\n        className={checkboxGroupCheckboxButtonIndicatorClass({\n          className: props.className,\n          checkboxGroupProps,\n        })}\n      />\n    );\n  }\n  return null;\n};\n",
        "target": "underatom/components/react-aria/checkbox-group/CheckboxGroup.underatoms.tsx"
      },
      {
        "type": "registry:ui",
        "path": "ui/react-aria/checkbox-group/checkbox-group.tsx",
        "content": "import { tv } from \"../../../utils/extendedTV\";\nimport type { RenderRoot } from \"../../../utils/utils\";\n\n/*\n  ====================================\n  CheckboxGroup\n  ====================================\n*/\n\nexport type CheckboxGroupStyleProps = {\n  size?: \"sm\" | \"md\" | \"lg\";\n};\n\nexport type CheckboxGroupType = {\n  className?: string;\n  checkboxGroupProps?: CheckboxGroupStyleProps;\n};\n\nexport const checkboxGroupDefaults: Required<CheckboxGroupStyleProps> = {\n  size: \"md\",\n};\n\nexport const checkboxGroupClass = ({ className }: CheckboxGroupType) => {\n  return `group/checkboxGroup  ${className}`;\n};\n\nexport const checkboxGroupLabelClass = ({ className }: CheckboxGroupType) => {\n  return `text-base-900 text-sm font-text font-medium group-data-[disabled=true]/checkboxGroup:text-base-400 ${className}`;\n};\n\nexport const checkboxGroupDescriptionClass = ({ className }: CheckboxGroupType) => {\n  return `\n  text-base-700\n  text-sm\n  font-text\n  font-normal\n  group-data-[invalid=true]/checkboxGroup:text-danger-500\n  group-data-[disabled=true]/checkboxGroup:text-base-400\n  group-data-[invalid=true]/checkboxGroup:group-data-[disabled=true]/checkboxGroup:text-base-400\n  ${className}\n  `;\n};\n\nexport const checkboxGroupAsteriskClass = ({ className }: CheckboxGroupType) => {\n  return `\n  group-data-[required=true]/checkboxGroup:[display:unset]\n  group-data-[required=true]/checkboxGroup:text-danger-500\n  group-data-[required=true]/checkboxGroup:text-xs\n  group-data-[required=true]/checkboxGroup:font-text\n  group-data-[required=true]/checkboxGroup:font-medium\n  group-data-[required=true]/checkboxGroup:group-data-[disabled=true]/checkboxGroup:text-base-400\n  hidden\n  ${className}\n  `;\n};\n\nexport const CheckboxGroupLayout = ({\n  renderRoot,\n  styleProps: { className },\n  labelSlot,\n  asteriskSlot,\n  descriptionSlot,\n  checkboxSlots,\n}: {\n  renderRoot: RenderRoot;\n  styleProps: CheckboxGroupType;\n  labelSlot: React.ReactNode;\n  asteriskSlot: React.ReactNode;\n  descriptionSlot: React.ReactNode;\n  checkboxSlots: React.ReactNode;\n}) =>\n  renderRoot(\n    <>\n      <div className=\"h-fit w-fit flex flex-col\">\n        <div className=\"h-fit w-full flex flex-row gap-[2px]\">\n          {labelSlot}\n          {asteriskSlot}\n        </div>\n        {descriptionSlot}\n      </div>\n      <div className=\"h-fit w-full flex flex-col gap-1\">{checkboxSlots}</div>\n    </>,\n    `h-fit w-fit flex flex-col gap-3 ${className}`,\n  );\nexport type CheckboxGroupCheckboxType = {\n  className?: string;\n  checkboxGroupProps?: CheckboxGroupStyleProps;\n};\n\nexport const checkboxGroupCheckboxClass = ({ className }: CheckboxGroupCheckboxType) => {\n  return `group/checkboxGroupCheckbox  ${className}`;\n};\n\nexport const checkboxGroupCheckboxLabelClass = ({ className }: CheckboxGroupCheckboxType) => {\n  return `text-base-950 text-sm font-text font-medium group-data-[disabled=true]/checkboxGroupCheckbox:text-base-400 group-data-[disabled=true]/checkboxGroup:text-base-400 ${className}`;\n};\n\nexport const checkboxGroupCheckboxDescriptionClass = ({ className }: CheckboxGroupCheckboxType) => {\n  return `\n  text-base-700\n  text-sm\n  group-data-[disabled=true]/checkboxGroup:text-sm\n  font-text\n  group-data-[disabled=true]/checkboxGroup:font-text\n  font-normal\n  group-data-[disabled=true]/checkboxGroup:font-normal\n  group-data-[disabled=true]/checkboxGroup:text-base-400\n  group-data-[disabled=true]/checkboxGroupCheckbox:text-base-400\n  group-data-[invalid=true]/checkboxGroupCheckbox:text-danger-500\n  group-data-[invalid=true]/checkboxGroup:text-danger-500\n  group-data-[invalid=true]/checkboxGroupCheckbox:group-data-[disabled=true]/checkboxGroupCheckbox:text-danger-500\n  group-data-[invalid=true]/checkboxGroup:group-data-[disabled=true]/checkboxGroupCheckbox:text-danger-500\n  ${className}\n  `;\n};\n\nexport const CheckboxGroupCheckboxLayout = ({\n  renderRoot,\n  styleProps: { className },\n  buttonSlot,\n  labelSlot,\n  descriptionSlot,\n}: {\n  renderRoot: RenderRoot;\n  styleProps: CheckboxGroupCheckboxType;\n  buttonSlot: React.ReactNode;\n  labelSlot: React.ReactNode;\n  descriptionSlot: React.ReactNode;\n}) =>\n  renderRoot(\n    <>\n      <div className=\"h-fit w-fit flex flex-row items-center gap-[10px]\">\n        {buttonSlot}\n        {labelSlot}\n      </div>\n      <div className=\"h-fit w-fit flex flex-col pl-7\">{descriptionSlot}</div>\n    </>,\n    `h-fit w-fit flex flex-col [&>*:not(:first-child)]:[margin-top:-4px] ${className}`,\n  );\n\nexport type CheckboxGroupCheckboxButtonType = {\n  className?: string;\n  checkboxGroupProps?: CheckboxGroupStyleProps;\n};\n\nexport const checkboxGroupCheckboxButtonClass = ({ className }: CheckboxGroupCheckboxButtonType) => {\n  return `\n  group/checkboxGroupCheckboxButton\n  border-solid\n  border-primary-950\n  border-1\n  bg-base-50\n  group-data-[pressed=true]/checkboxGroupCheckbox:bg-base-50\n  group-data-[disabled=true]/checkboxGroup:bg-base-50\n  group-data-[disabled=true]/checkboxGroupCheckbox:bg-base-50\n  rounded-xs\n  transition-all\n  group-data-[disabled=true]/checkboxGroup:border-base-200\n  group-data-[disabled=true]/checkboxGroupCheckbox:border-base-200\n  group-data-[disabled=true]/checkboxGroup:group-data-[focus-visible=true]/checkboxGroupCheckbox:shadow-none\n  group-data-[invalid=true]/checkboxGroupCheckbox:border-danger-500\n  group-data-[invalid=true]/checkboxGroup:border-danger-500\n  group-data-[invalid=true]/checkboxGroupCheckbox:bg-danger-50\n  group-data-[invalid=true]/checkboxGroupCheckbox:group-data-[pressed=true]/checkboxGroupCheckbox:bg-danger-50\n  group-data-[invalid=true]/checkboxGroup:bg-danger-50\n  group-data-[invalid=true]/checkboxGroup:group-data-[pressed=true]/checkboxGroupCheckbox:bg-danger-50\n  group-hover/checkboxGroupCheckbox:bg-base-100\n  group-data-[focus-visible=true]/checkboxGroupCheckbox:bg-base-100\n  group-data-[invalid=true]/checkboxGroupCheckbox:group-hover/checkboxGroupCheckbox:bg-danger-100\n  group-data-[invalid=true]/checkboxGroupCheckbox:group-data-[focus-visible=true]/checkboxGroupCheckbox:bg-danger-100\n  group-data-[invalid=true]/checkboxGroup:group-hover/checkboxGroupCheckbox:bg-danger-100\n  group-data-[invalid=true]/checkboxGroup:group-data-[focus-visible=true]/checkboxGroupCheckbox:bg-danger-100\n  group-data-[focus-visible=true]/checkboxGroupCheckbox:shadow-focus-ring\n  group-data-[selected=true]/checkboxGroupCheckbox:bg-primary-950\n  group-data-[indeterminate=true]/checkboxGroupCheckbox:bg-primary-950\n  group-data-[pressed=true]/checkboxGroupCheckbox:group-data-[selected=true]/checkboxGroupCheckbox:bg-primary-950\n  group-data-[pressed=true]/checkboxGroupCheckbox:group-data-[indeterminate=true]/checkboxGroupCheckbox:bg-primary-950\n  group-data-[focus-visible=true]/checkboxGroupCheckbox:group-data-[selected=true]/checkboxGroupCheckbox:bg-primary-950\n  group-data-[focus-visible=true]/checkboxGroupCheckbox:group-data-[indeterminate=true]/checkboxGroupCheckbox:bg-primary-950\n  group-data-[disabled=true]/checkboxGroup:group-data-[selected=true]/checkboxGroupCheckbox:bg-base-200\n  group-data-[disabled=true]/checkboxGroup:group-data-[indeterminate=true]/checkboxGroupCheckbox:bg-base-200\n  group-data-[disabled=true]/checkboxGroupCheckbox:group-data-[selected=true]/checkboxGroupCheckbox:bg-base-200\n  group-data-[disabled=true]/checkboxGroupCheckbox:group-data-[indeterminate=true]/checkboxGroupCheckbox:bg-base-200\n  group-data-[invalid=true]/checkboxGroupCheckbox:group-data-[selected=true]/checkboxGroupCheckbox:bg-danger-500\n  group-data-[invalid=true]/checkboxGroupCheckbox:group-data-[indeterminate=true]/checkboxGroupCheckbox:bg-danger-500\n  group-data-[invalid=true]/checkboxGroupCheckbox:group-data-[pressed=true]/checkboxGroupCheckbox:group-data-[selected=true]/checkboxGroupCheckbox:bg-danger-500\n  group-data-[invalid=true]/checkboxGroupCheckbox:group-data-[pressed=true]/checkboxGroupCheckbox:group-data-[indeterminate=true]/checkboxGroupCheckbox:bg-danger-500\n  group-data-[invalid=true]/checkboxGroupCheckbox:group-data-[focus-visible=true]/checkboxGroupCheckbox:group-data-[selected=true]/checkboxGroupCheckbox:bg-danger-500\n  group-data-[invalid=true]/checkboxGroupCheckbox:group-data-[focus-visible=true]/checkboxGroupCheckbox:group-data-[indeterminate=true]/checkboxGroupCheckbox:bg-danger-500\n  group-data-[invalid=true]/checkboxGroup:group-data-[selected=true]/checkboxGroupCheckbox:bg-danger-500\n  group-data-[invalid=true]/checkboxGroup:group-data-[indeterminate=true]/checkboxGroupCheckbox:bg-danger-500\n  group-data-[invalid=true]/checkboxGroup:group-data-[pressed=true]/checkboxGroupCheckbox:group-data-[selected=true]/checkboxGroupCheckbox:bg-danger-500\n  group-data-[invalid=true]/checkboxGroup:group-data-[pressed=true]/checkboxGroupCheckbox:group-data-[indeterminate=true]/checkboxGroupCheckbox:bg-danger-500\n  group-data-[invalid=true]/checkboxGroup:group-data-[focus-visible=true]/checkboxGroupCheckbox:group-data-[selected=true]/checkboxGroupCheckbox:bg-danger-500\n  group-data-[invalid=true]/checkboxGroup:group-data-[focus-visible=true]/checkboxGroupCheckbox:group-data-[indeterminate=true]/checkboxGroupCheckbox:bg-danger-500\n  group-hover/checkboxGroupCheckbox:group-data-[selected=true]/checkboxGroupCheckbox:bg-primary-800\n  group-hover/checkboxGroupCheckbox:group-data-[indeterminate=true]/checkboxGroupCheckbox:bg-primary-800\n  group-data-[invalid=true]/checkboxGroupCheckbox:group-hover/checkboxGroupCheckbox:group-data-[selected=true]/checkboxGroupCheckbox:bg-danger-700\n  group-data-[invalid=true]/checkboxGroupCheckbox:group-hover/checkboxGroupCheckbox:group-data-[indeterminate=true]/checkboxGroupCheckbox:bg-danger-700\n  group-data-[invalid=true]/checkboxGroup:group-hover/checkboxGroupCheckbox:group-data-[selected=true]/checkboxGroupCheckbox:bg-danger-700\n  group-data-[invalid=true]/checkboxGroup:group-hover/checkboxGroupCheckbox:group-data-[indeterminate=true]/checkboxGroupCheckbox:bg-danger-700\n  group-data-[disabled=true]/checkboxGroup:group-data-[invalid=true]/checkboxGroupCheckbox:border-base-200\n  group-data-[invalid=true]/checkboxGroupCheckbox:group-data-[disabled=true]/checkboxGroupCheckbox:border-base-200\n  group-data-[invalid=true]/checkboxGroup:group-data-[disabled=true]/checkboxGroup:border-base-200\n  group-data-[invalid=true]/checkboxGroup:group-data-[disabled=true]/checkboxGroupCheckbox:border-base-200\n  group-data-[disabled=true]/checkboxGroup:group-data-[invalid=true]/checkboxGroupCheckbox:bg-base-50\n  group-data-[invalid=true]/checkboxGroupCheckbox:group-data-[disabled=true]/checkboxGroupCheckbox:bg-base-50\n  group-data-[invalid=true]/checkboxGroup:group-data-[disabled=true]/checkboxGroup:bg-base-50\n  group-data-[invalid=true]/checkboxGroup:group-data-[disabled=true]/checkboxGroupCheckbox:bg-base-50\n  group-data-[disabled=true]/checkboxGroup:group-hover/checkboxGroupCheckbox:bg-base-50\n  group-data-[disabled=true]/checkboxGroup:group-data-[focus-visible=true]/checkboxGroupCheckbox:bg-base-50\n  group-data-[disabled=true]/checkboxGroup:group-data-[invalid=true]/checkboxGroupCheckbox:group-data-[selected=true]/checkboxGroupCheckbox:bg-base-200\n  group-data-[disabled=true]/checkboxGroup:group-data-[invalid=true]/checkboxGroupCheckbox:group-data-[indeterminate=true]/checkboxGroupCheckbox:bg-base-200\n  group-data-[invalid=true]/checkboxGroupCheckbox:group-data-[disabled=true]/checkboxGroupCheckbox:group-data-[selected=true]/checkboxGroupCheckbox:bg-base-200\n  group-data-[invalid=true]/checkboxGroupCheckbox:group-data-[disabled=true]/checkboxGroupCheckbox:group-data-[indeterminate=true]/checkboxGroupCheckbox:bg-base-200\n  group-data-[invalid=true]/checkboxGroup:group-data-[disabled=true]/checkboxGroup:group-data-[selected=true]/checkboxGroupCheckbox:bg-base-200\n  group-data-[invalid=true]/checkboxGroup:group-data-[disabled=true]/checkboxGroup:group-data-[indeterminate=true]/checkboxGroupCheckbox:bg-base-200\n  group-data-[invalid=true]/checkboxGroup:group-data-[disabled=true]/checkboxGroupCheckbox:group-data-[selected=true]/checkboxGroupCheckbox:bg-base-200\n  group-data-[invalid=true]/checkboxGroup:group-data-[disabled=true]/checkboxGroupCheckbox:group-data-[indeterminate=true]/checkboxGroupCheckbox:bg-base-200\n  group-data-[disabled=true]/checkboxGroup:group-hover/checkboxGroupCheckbox:group-data-[selected=true]/checkboxGroupCheckbox:bg-base-200\n  group-data-[disabled=true]/checkboxGroup:group-hover/checkboxGroupCheckbox:group-data-[indeterminate=true]/checkboxGroupCheckbox:bg-base-200\n  group-data-[disabled=true]/checkboxGroup:group-data-[pressed=true]/checkboxGroupCheckbox:group-data-[selected=true]/checkboxGroupCheckbox:bg-base-200\n  group-data-[disabled=true]/checkboxGroup:group-data-[pressed=true]/checkboxGroupCheckbox:group-data-[indeterminate=true]/checkboxGroupCheckbox:bg-base-200\n  group-data-[disabled=true]/checkboxGroup:group-data-[focus-visible=true]/checkboxGroupCheckbox:group-data-[selected=true]/checkboxGroupCheckbox:bg-base-200\n  group-data-[disabled=true]/checkboxGroup:group-data-[focus-visible=true]/checkboxGroupCheckbox:group-data-[indeterminate=true]/checkboxGroupCheckbox:bg-base-200\n  ${className}\n  `;\n};\n\nexport const checkboxGroupCheckboxButtonIndicatorClass = ({ className }: CheckboxGroupCheckboxButtonType) => {\n  return `\n  w-[14px]\n  h-[14px]\n  group-data-[selected=true]/checkboxGroupCheckbox:text-white\n  group-data-[indeterminate=true]/checkboxGroupCheckbox:text-white\n  group-data-[disabled=true]/checkboxGroup:group-data-[selected=true]/checkboxGroupCheckbox:text-base-400\n  group-data-[disabled=true]/checkboxGroup:group-data-[indeterminate=true]/checkboxGroupCheckbox:text-base-400\n  group-data-[disabled=true]/checkboxGroupCheckbox:group-data-[selected=true]/checkboxGroupCheckbox:text-base-400\n  group-data-[disabled=true]/checkboxGroupCheckbox:group-data-[indeterminate=true]/checkboxGroupCheckbox:text-base-400\n  ${className}\n  `;\n};\n\nexport const CheckboxGroupCheckboxButtonLayout = ({\n  renderRoot,\n  styleProps: { className },\n  indicatorSlot,\n}: {\n  renderRoot: RenderRoot;\n  styleProps: CheckboxGroupCheckboxButtonType;\n  indicatorSlot: React.ReactNode;\n}) =>\n  renderRoot(<>{indicatorSlot}</>, `h-[14px] w-[14px] flex flex-row justify-center items-center gap-5 ${className}`);\n\n",
        "target": "underatom/components/react-aria/checkbox-group/checkbox-group.tsx"
      }
    ]
  },
  {
    "name": "chip",
    "type": "registry:ui",
    "relativePath": "react-aria/chip",
    "stylingName": "chip.tsx",
    "dependencies": [
      "react-aria",
      "@radix-ui/react-avatar"
    ],
    "files": [
      {
        "type": "registry:ui",
        "path": "ui/react-aria/chip/Chip.atoms.tsx",
        "content": "import { ReactNode } from \"react\";\nimport {\n  ChipAvatarLayout,\n  ChipAvatarWithIconLayout,\n  ChipDismissLayout,\n  ChipDotStyleProps,\n  ChipLayout,\n  ChipWithAvatarLayout,\n  ChipWithDotLayout,\n  ChipWithIconLayout,\n} from \"./chip\";\nimport {\n  UChipAvatarFallback,\n  UChipAvatarIcon,\n  UChipAvatarImage,\n  UChipAvatarLabel,\n  UChipAvatarRoot,\n  UChipAvatarRootProps,\n  UChipDismissIcon,\n  UChipDismissRoot,\n  UChipDismissRootProps,\n  UChipDot,\n  UChipIcon,\n  UChipLabel,\n  UChipRoot,\n  UChipRootProps,\n  useChipInternalProvider,\n} from \"./Chip.underatoms\";\nimport { AvatarImageProps } from \"@radix-ui/react-avatar\";\n\n/*\n  ====================================\n  Chip\n  ====================================\n*/\n\nexport type ChipProps = UChipRootProps & { onDismiss?: () => void };\nexport const Chip = ({ children, onDismiss, ...props }: ChipProps) => {\n  return (\n    <ChipLayout\n      renderRoot={(children, className) => (\n        <UChipRoot {...props} className={className}>\n          {children}\n        </UChipRoot>\n      )}\n      styleProps={{ className: props.className, chipProps: props }}\n      labelSlot={<UChipLabel>{children}</UChipLabel>}\n      dismissSlot={onDismiss && <ChipDismiss onPress={onDismiss} />}\n    />\n  );\n};\n\nexport type ChipWithIconProps = UChipRootProps & {\n  icon: (className: string) => ReactNode;\n  onDismiss?: () => void;\n};\nexport const ChipWithIcon = ({ icon, children, onDismiss, ...props }: ChipWithIconProps) => {\n  return (\n    <ChipWithIconLayout\n      renderRoot={(children, className) => (\n        <UChipRoot {...props} className={className}>\n          {children}\n        </UChipRoot>\n      )}\n      styleProps={{ className: props.className, chipProps: props }}\n      iconSlot={<UChipIcon>{icon}</UChipIcon>}\n      labelSlot={<UChipLabel>{children}</UChipLabel>}\n      dismissSlot={onDismiss && <ChipDismiss onPress={onDismiss} />}\n    />\n  );\n};\n\nexport type ChipWithAvatarProps = UChipRootProps & {\n  avatarSlot: ReactNode;\n  onDismiss?: () => void;\n};\nexport const ChipWithAvatar = ({ avatarSlot, children, onDismiss, ...props }: ChipWithAvatarProps) => (\n  <ChipWithAvatarLayout\n    renderRoot={(children, className) => (\n      <UChipRoot {...props} className={className}>\n        {children}\n      </UChipRoot>\n    )}\n    styleProps={{ className: props.className, chipProps: props }}\n    avatarSlot={avatarSlot}\n    labelSlot={<UChipLabel>{children}</UChipLabel>}\n    dismissSlot={onDismiss && <ChipDismiss onPress={onDismiss} />}\n  />\n);\n\nexport type ChipWithDotProps = UChipRootProps & {\n  dotColor?: ChipDotStyleProps[\"color\"];\n  onDismiss?: () => void;\n};\nexport const ChipWithDot = ({ dotColor = \"primary\", children, onDismiss, ...props }: ChipWithDotProps) => {\n  return (\n    <ChipWithDotLayout\n      renderRoot={(children, className) => (\n        <UChipRoot {...props} className={className}>\n          {children}\n        </UChipRoot>\n      )}\n      styleProps={{ className: props.className, chipProps: props }}\n      dotSlot={<UChipDot color={dotColor} />}\n      labelSlot={<UChipLabel>{children}</UChipLabel>}\n      dismissSlot={onDismiss && <ChipDismiss onPress={onDismiss} />}\n    />\n  );\n};\n\n/*\n  ====================================\n  ChipDismiss\n  ====================================\n*/\n\nexport type ChipDismissProps = UChipDismissRootProps;\nexport const ChipDismiss = (props: ChipDismissProps) => {\n  const chipProps = useChipInternalProvider();\n  return (\n    <ChipDismissLayout\n      renderRoot={(children, className) => (\n        <UChipDismissRoot {...props} className={className}>\n          {children}\n        </UChipDismissRoot>\n      )}\n      styleProps={{ className: props.className, chipProps }}\n      iconSlot={<UChipDismissIcon />}\n    />\n  );\n};\n\n/*\n  ====================================\n  ChipAvatar\n  ====================================\n*/\n\nexport type ChipAvatarProps = Omit<UChipAvatarRootProps, \"children\"> & {\n  imageProps?: AvatarImageProps;\n  fallbackText?: string;\n};\nexport const ChipAvatar = ({ fallbackText, imageProps, ...props }: ChipAvatarProps) => {\n  const chipProps = useChipInternalProvider();\n  return (\n    <ChipAvatarLayout\n      renderRoot={(children, className) => (\n        <UChipAvatarRoot {...props} className={className}>\n          {children}\n        </UChipAvatarRoot>\n      )}\n      styleProps={{ className: props.className, chipProps }}\n      imageSlot={imageProps && <UChipAvatarImage {...imageProps} />}\n      labelSlot={\n        fallbackText && (\n          <UChipAvatarFallback asChild>\n            <UChipAvatarLabel>{fallbackText}</UChipAvatarLabel>\n          </UChipAvatarFallback>\n        )\n      }\n    />\n  );\n};\n\nexport type ChipAvatarWithIconProps = Omit<UChipAvatarRootProps, \"children\"> & {\n  imageProps?: AvatarImageProps;\n  fallbackIcon?: (classname: string) => ReactNode;\n};\nexport const ChipAvatarWithIcon = ({ fallbackIcon, imageProps, ...props }: ChipAvatarWithIconProps) => {\n  const chipProps = useChipInternalProvider();\n  return (\n    <ChipAvatarWithIconLayout\n      renderRoot={(children, className) => (\n        <UChipAvatarRoot {...props} className={className}>\n          {children}\n        </UChipAvatarRoot>\n      )}\n      styleProps={{ className: props.className, chipProps }}\n      imageSlot={imageProps && <UChipAvatarImage {...imageProps} />}\n      iconSlot={\n        fallbackIcon && (\n          <UChipAvatarFallback asChild>\n            <UChipAvatarIcon>{fallbackIcon}</UChipAvatarIcon>\n          </UChipAvatarFallback>\n        )\n      }\n    />\n  );\n};\n",
        "target": "underatom/components/react-aria/chip/Chip.atoms.tsx"
      },
      {
        "type": "registry:ui",
        "path": "ui/react-aria/chip/Chip.underatoms.tsx",
        "content": "import type { ReactNode } from \"react\";\nimport { useRef } from \"react\";\nimport type { AriaButtonProps } from \"react-aria\";\nimport { mergeProps, useButton, useFocusRing } from \"react-aria\";\nimport * as RadixAvatar from \"@radix-ui/react-avatar\";\nimport { X } from \"../../../utils/Icons\";\nimport { getGenericContext } from \"../../../utils/utils\";\nimport {\n  ChipDotStyleProps,\n  ChipStyleProps,\n  chipAvatarClass,\n  chipAvatarIconClass,\n  chipAvatarImageClass,\n  chipAvatarLabelClass,\n  chipClass,\n  chipDismissClass,\n  chipDismissIconClass,\n  chipDotClass,\n  chipIconClass,\n  chipLabelClass,\n} from \"./chip\";\n\n/*\n  ====================================\n  Chip\n  ====================================\n*/\n\nexport const { Provider: ChipInternalProvider, useComponentContext: useChipInternalProvider } =\n  getGenericContext<UChipRootProps>(\"UChipRootProps\");\n\nexport type UChipRootProps = ChipStyleProps &\n  AriaButtonProps<\"button\"> & {\n    innerRef?: React.RefObject<HTMLButtonElement>;\n    className?: string;\n  };\nexport const UChipRoot = ({ className, ...props }: UChipRootProps) => {\n  const refs = useRef<HTMLButtonElement>(null);\n  const { innerRef = refs } = props;\n  const { buttonProps, isPressed } = useButton(props, refs);\n  const { isFocusVisible, focusProps } = useFocusRing();\n\n  return (\n    <button\n      ref={innerRef}\n      data-active={isPressed}\n      data-ring={isFocusVisible}\n      className={chipClass({ className, chipProps: props })}\n      {...mergeProps(buttonProps, focusProps)}\n    >\n      <ChipInternalProvider value={props}>{props.children}</ChipInternalProvider>\n    </button>\n  );\n};\n\nexport type UChipLabelProps = {\n  /** Label content */\n  children: ReactNode;\n  className?: string;\n};\nexport const UChipLabel = ({ children, className }: UChipLabelProps) => {\n  const chipProps = useChipInternalProvider();\n  return <span className={chipLabelClass({ className, chipProps })}>{children}</span>;\n};\n\nexport type UChipIconProps = {\n  /** Icon render function */\n  children: (className: string) => ReactNode;\n  className?: string;\n};\nexport const UChipIcon = ({ children, className }: UChipIconProps) => {\n  const chipProps = useChipInternalProvider();\n  return <>{children(chipIconClass({ className, chipProps }))}</>;\n};\n\nexport type UChipDotProps = ChipDotStyleProps & {\n  className?: string;\n};\nexport const UChipDot = ({ className, ...props }: UChipDotProps) => {\n  const chipProps = useChipInternalProvider();\n  return <span className={chipDotClass({ className, chipProps, chipDotProps: props })} />;\n};\n\n/*\n  ====================================\n  ChipDismiss\n  ====================================\n*/\n\nexport type UChipDismissRootProps = AriaButtonProps<\"button\"> & {\n  innerRef?: React.RefObject<HTMLButtonElement>;\n  className?: string;\n};\nexport const UChipDismissRoot = ({ className, ...props }: UChipDismissRootProps) => {\n  const refs = useRef<HTMLButtonElement>(null);\n  const { innerRef = refs } = props;\n  const { isDisabled: isDisabledParent } = useChipInternalProvider();\n  const { buttonProps, isPressed } = useButton({ ...props, isDisabled: isDisabledParent || props.isDisabled }, refs);\n  const { isFocusVisible, focusProps } = useFocusRing();\n  const chipProps = useChipInternalProvider();\n\n  return (\n    <button\n      ref={innerRef}\n      data-active={isPressed}\n      data-ring={isFocusVisible}\n      className={chipDismissClass({ className, chipProps })}\n      {...mergeProps(buttonProps, focusProps)}\n    >\n      {props.children}\n    </button>\n  );\n};\n\nexport const UChipDismissIcon = () => {\n  const chipProps = useChipInternalProvider();\n  return <X className={chipDismissIconClass({ chipProps })} />;\n};\n\n/*\n  ====================================\n  ChipAvatar\n  ====================================\n*/\n\nexport type UChipAvatarRootProps = RadixAvatar.AvatarProps & {\n  /** Avatar content */\n  children: RadixAvatar.AvatarProps[\"children\"];\n};\n\nexport const UChipAvatarRoot = (props: UChipAvatarRootProps) => {\n  const chipProps = useChipInternalProvider();\n  return (\n    <RadixAvatar.Root {...props} className={chipAvatarClass({ className: props.className, chipProps })}>\n      {props.children}\n    </RadixAvatar.Root>\n  );\n};\n\nexport type UChipAvatarFallbackProps = RadixAvatar.AvatarFallbackProps;\nexport const UChipAvatarFallback = (props: UChipAvatarFallbackProps) => {\n  return <RadixAvatar.Fallback {...props} />;\n};\n\nexport type UChipAvatarLabelProps = {\n  /** Text content */\n  children: ReactNode;\n};\nexport const UChipAvatarLabel = ({ children }: UChipAvatarLabelProps) => {\n  const chipProps = useChipInternalProvider();\n  return <span className={chipAvatarLabelClass({ chipProps })}>{children}</span>;\n};\n\nexport type UChipAvatarIconProps = {\n  /** Icon render function */\n  children: (className: string) => ReactNode;\n};\nexport const UChipAvatarIcon = ({ children }: UChipAvatarIconProps) => {\n  const chipProps = useChipInternalProvider();\n  return <>{children(chipAvatarIconClass({ chipProps }))}</>;\n};\n\nexport type UChipAvatarImageProps = RadixAvatar.AvatarImageProps;\nexport const UChipAvatarImage = (props: UChipAvatarImageProps) => {\n  const chipProps = useChipInternalProvider();\n  return <RadixAvatar.Image className={chipAvatarImageClass({ className: props.className, chipProps })} {...props} />;\n};\n",
        "target": "underatom/components/react-aria/chip/Chip.underatoms.tsx"
      },
      {
        "type": "registry:ui",
        "path": "ui/react-aria/chip/chip.tsx",
        "content": "import { tv } from \"../../../utils/extendedTV\";\nimport type { RenderRoot } from \"../../../utils/utils\";\n\n/*\n  ====================================\n  Chip\n  ====================================\n*/\n\nexport type ChipStyleProps = {\n  size?: \"sm\" | \"md\" | \"lg\";\n};\n\nexport type ChipDotStyleProps = {\n  color?: \"primary\" | \"base\" | \"green\" | \"red\";\n};\n\nexport type ChipType = {\n  className?: string;\n  chipProps?: ChipStyleProps;\n};\n\nexport type ChipDotType = {\n  className?: string;\n  chipProps?: ChipStyleProps;\n  chipDotProps?: ChipDotStyleProps;\n};\n\nexport const chipDefaults: Required<ChipStyleProps> = {\n  size: \"md\",\n};\n\nexport const chipDotDefaults: Required<ChipDotStyleProps> = {\n  color: \"primary\",\n};\n\nexport const chipClass = ({ className }: ChipType) => {\n  return `\n  group/chip\n  border-solid\n  border-base-200\n  data-[active=true]:border-base-200\n  disabled:border-base-200\n  border-1\n  bg-base-50\n  data-[active=true]:bg-base-50\n  disabled:bg-base-50\n  rounded-[16px]\n  hover:border-base-300\n  data-[ring=true]:border-base-300\n  data-[state=open]:border-base-300\n  hover:bg-base-100\n  data-[ring=true]:bg-base-100\n  data-[state=open]:bg-base-100\n  data-[ring=true]:shadow-focus-ring\n  disabled:pointer-events-none\n  ${className}\n  `;\n};\n\nexport const chipLabelClass = ({ className }: ChipType) => {\n  return `text-base-950 text-sm font-text font-medium group-disabled/chip:text-base-400 ${className}`;\n};\n\nexport const chipIconClass = ({ className }: ChipType) => {\n  return `w-5 h-5 text-primary-600 group-disabled/chip:text-base-400 ${className}`;\n};\n\nexport const chipDotClass = ({ className, chipDotProps }: ChipDotType) => {\n  const dotClass = tv({\n    base: \"w-[6px] h-[6px] rounded-xs group-disabled/chip:bg-base-400\",\n    variants: {\n      dotColor: { base: \"bg-base-950\", primary: \"bg-primary-950\", green: \"bg-success-600\", red: \"bg-danger-500\" },\n    },\n\n    defaultVariants: { dotColor: chipDotDefaults.color },\n  });\n  return dotClass({\n    class: className,\n    dotColor: chipDotProps?.color,\n  });\n};\n\nexport const ChipLayout = ({\n  renderRoot,\n  styleProps: { className, chipProps },\n  labelSlot,\n  dismissSlot,\n}: {\n  renderRoot: RenderRoot;\n  styleProps: ChipType;\n  labelSlot: React.ReactNode;\n  dismissSlot: React.ReactNode;\n}) =>\n  renderRoot(\n    <>\n      <div\n        className={tv({\n          base: \"h-fit w-fit flex flex-row justify-center items-center gap-1\",\n          variants: { size: { sm: \"pr-1\", md: \"pr-1\", lg: \"pr-[6px]\" } },\n\n          defaultVariants: { size: chipDefaults.size },\n        })({ size: chipProps?.size })}\n      >\n        {labelSlot}\n      </div>\n      {dismissSlot}\n    </>,\n    tv({\n      base: \"w-fit flex flex-row justify-center items-center\",\n      variants: { size: { sm: \"h-7 pl-2 pr-1\", md: \"h-8 pl-[10px] pr-[6px]\", lg: \"h-9 pl-3 pr-[6px]\" } },\n\n      defaultVariants: { size: chipDefaults.size },\n    })({\n      class: className,\n      size: chipProps?.size,\n    }),\n  );\nexport const ChipWithIconLayout = ({\n  renderRoot,\n  styleProps: { className, chipProps },\n  iconSlot,\n  labelSlot,\n  dismissSlot,\n}: {\n  renderRoot: RenderRoot;\n  styleProps: ChipType;\n  iconSlot: React.ReactNode;\n  labelSlot: React.ReactNode;\n  dismissSlot: React.ReactNode;\n}) =>\n  renderRoot(\n    <>\n      <div\n        className={tv({\n          base: \"h-fit w-fit flex flex-row justify-center items-center\",\n          variants: { size: { sm: \"gap-1 pr-1\", md: \"gap-1 pr-1\", lg: \"gap-[6px] pr-[6px]\" } },\n\n          defaultVariants: { size: chipDefaults.size },\n        })({ size: chipProps?.size })}\n      >\n        {iconSlot}\n        {labelSlot}\n      </div>\n      {dismissSlot}\n    </>,\n    tv({\n      base: \"w-fit flex flex-row justify-center items-center\",\n      variants: { size: { sm: \"h-7 px-1\", md: \"h-8 px-[6px]\", lg: \"h-9 pl-2 pr-[6px]\" } },\n\n      defaultVariants: { size: chipDefaults.size },\n    })({\n      class: className,\n      size: chipProps?.size,\n    }),\n  );\nexport const ChipWithAvatarLayout = ({\n  renderRoot,\n  styleProps: { className, chipProps },\n  avatarSlot,\n  labelSlot,\n  dismissSlot,\n}: {\n  renderRoot: RenderRoot;\n  styleProps: ChipType;\n  avatarSlot: React.ReactNode;\n  labelSlot: React.ReactNode;\n  dismissSlot: React.ReactNode;\n}) =>\n  renderRoot(\n    <>\n      <div\n        className={tv({\n          base: \"h-fit w-fit flex flex-row justify-center items-center pr-1\",\n          variants: { size: { sm: \"gap-1\", md: \"gap-1\", lg: \"gap-[6px]\" } },\n\n          defaultVariants: { size: chipDefaults.size },\n        })({ size: chipProps?.size })}\n      >\n        {avatarSlot}\n        {labelSlot}\n      </div>\n      {dismissSlot}\n    </>,\n    tv({\n      base: \"w-fit flex flex-row items-center\",\n      variants: {\n        size: { sm: \"h-7 justify-center px-1\", md: \"h-8 justify-center pl-1 pr-[6px]\", lg: \"h-9 pl-1 pr-[6px]\" },\n      },\n\n      defaultVariants: { size: chipDefaults.size },\n    })({\n      class: className,\n      size: chipProps?.size,\n    }),\n  );\n\nexport const ChipWithDotLayout = ({\n  renderRoot,\n  styleProps: { className, chipProps },\n  dotSlot,\n  labelSlot,\n  dismissSlot,\n}: {\n  renderRoot: RenderRoot;\n  styleProps: ChipType;\n  dotSlot: React.ReactNode;\n  labelSlot: React.ReactNode;\n  dismissSlot: React.ReactNode;\n}) =>\n  renderRoot(\n    <>\n      <div\n        className={tv({\n          base: \"h-fit w-fit flex flex-row justify-center items-center\",\n          variants: { size: { sm: \"gap-[6px] pr-1\", md: \"gap-[6px] pr-[6px]\", lg: \"gap-2 pr-[6px]\" } },\n\n          defaultVariants: { size: chipDefaults.size },\n        })({ size: chipProps?.size })}\n      >\n        {dotSlot}\n        {labelSlot}\n      </div>\n      {dismissSlot}\n    </>,\n    tv({\n      base: \"w-fit flex flex-row justify-center items-center\",\n      variants: { size: { sm: \"h-7 pl-2 pr-1\", md: \"h-8 pl-[10px] pr-[6px]\", lg: \"h-9 pl-[10px] pr-[6px]\" } },\n\n      defaultVariants: { size: chipDefaults.size },\n    })({\n      class: className,\n      size: chipProps?.size,\n    }),\n  );\nexport type ChipAvatarType = {\n  className?: string;\n  chipProps?: ChipStyleProps;\n};\n\nexport const chipAvatarClass = ({ className }: ChipAvatarType) => {\n  return `group/chipAvatar bg-base-200 group-data-[active=true]/chip:bg-base-200 group-data-[ring=true]/chip:bg-base-200 group-disabled/chip:bg-base-200 rounded-lg group-hover/chip:bg-base-300 ${className}`;\n};\n\nexport const chipAvatarImageClass = ({ className, chipProps }: ChipAvatarType) => {\n  const imageClass = tv({\n    base: \"rounded-[50px] group-disabled/chip:opacity-[0.42]\",\n    variants: { size: { sm: \"w-5 h-5\", md: \"w-6 h-6\", lg: \"w-7 h-7\" } },\n\n    defaultVariants: { size: chipDefaults.size },\n  });\n  return imageClass({\n    class: className,\n\n    size: chipProps?.size,\n  });\n};\n\nexport const chipAvatarLabelClass = ({ className }: ChipAvatarType) => {\n  return `text-base-600 text-xs font-text font-medium group-disabled/chip:text-base-400 ${className}`;\n};\n\nexport const chipAvatarIconClass = ({ className, chipProps }: ChipAvatarType) => {\n  const iconClass = tv({\n    base: \"text-base-600 group-disabled/chip:text-base-400\",\n    variants: { size: { sm: \"w-3 h-3\", lg: \"w-5 h-5\", md: \"w-[14px] h-[14px]\" } },\n\n    defaultVariants: { size: chipDefaults.size },\n  });\n  return iconClass({\n    class: className,\n\n    size: chipProps?.size,\n  });\n};\n\nexport const ChipAvatarLayout = ({\n  renderRoot,\n  styleProps: { className, chipProps },\n  imageSlot,\n  labelSlot,\n}: {\n  renderRoot: RenderRoot;\n  styleProps: ChipAvatarType;\n  imageSlot: React.ReactNode;\n  labelSlot: React.ReactNode;\n}) =>\n  renderRoot(\n    <>\n      {imageSlot}\n      {labelSlot}\n    </>,\n    tv({\n      base: \"flex flex-row justify-center items-center\",\n      variants: { size: { sm: \"h-5 w-5\", md: \"h-6 w-6\", lg: \"h-7 w-7\" } },\n\n      defaultVariants: { size: chipDefaults.size },\n    })({\n      class: className,\n      size: chipProps?.size,\n    }),\n  );\nexport const ChipAvatarWithIconLayout = ({\n  renderRoot,\n  styleProps: { className, chipProps },\n  imageSlot,\n  iconSlot,\n}: {\n  renderRoot: RenderRoot;\n  styleProps: ChipAvatarType;\n  imageSlot: React.ReactNode;\n  iconSlot: React.ReactNode;\n}) =>\n  renderRoot(\n    <>\n      {imageSlot}\n      {iconSlot}\n    </>,\n    tv({\n      base: \"flex flex-row justify-center items-center\",\n      variants: { size: { sm: \"h-5 w-5\", md: \"h-6 w-6\", lg: \"h-7 w-7\" } },\n\n      defaultVariants: { size: chipDefaults.size },\n    })({\n      class: className,\n      size: chipProps?.size,\n    }),\n  );\n\nexport type ChipDismissType = {\n  className?: string;\n  chipProps?: ChipStyleProps;\n};\n\nexport const chipDismissClass = ({ className }: ChipDismissType) => {\n  return `\n  group/chipDismiss\n  rounded-[16px]\n  transition-all\n  group-disabled/chip:disabled:transition-all\n  disabled:[background:unset]\n  data-[active=true]:[background:unset]\n  group-disabled/chip:hover:[background:unset]\n  group-disabled/chip:data-[ring=true]:[background:unset]\n  group-disabled/chip:data-[ring=true]:shadow-none\n  hover:bg-base-200\n  data-[ring=true]:bg-base-200\n  data-[ring=true]:shadow-focus-ring\n  disabled:pointer-events-none\n  ${className}\n  `;\n};\n\nexport const chipDismissIconClass = ({ className }: ChipDismissType) => {\n  return `\n  w-[14px]\n  h-[14px]\n  text-base-600\n  group-data-[active=true]/chipDismiss:text-base-600\n  group-hover/chipDismiss:text-base-950\n  group-data-[ring=true]/chipDismiss:text-base-950\n  group-disabled/chipDismiss:text-base-400\n  group-disabled/chip:text-base-400\n  group-hover/chipDismiss:group-disabled/chip:text-base-400\n  group-data-[active=true]/chipDismiss:group-disabled/chip:text-base-400\n  group-data-[ring=true]/chipDismiss:group-disabled/chip:text-base-400\n  ${className}\n  `;\n};\n\nexport const ChipDismissLayout = ({\n  renderRoot,\n  styleProps: { className, chipProps },\n  iconSlot,\n}: {\n  renderRoot: RenderRoot;\n  styleProps: ChipDismissType;\n  iconSlot: React.ReactNode;\n}) =>\n  renderRoot(\n    <>{iconSlot}</>,\n    tv({\n      base: \"flex flex-row justify-center items-center\",\n      variants: { size: { sm: \"h-5 w-5\", md: \"h-5 w-5\", lg: \"h-6 w-6\" } },\n\n      defaultVariants: { size: chipDefaults.size },\n    })({\n      class: className,\n      size: chipProps?.size,\n    }),\n  );\n",
        "target": "underatom/components/react-aria/chip/chip.tsx"
      }
    ]
  },
  {
    "name": "chip-toggle",
    "type": "registry:ui",
    "relativePath": "react-aria/chip-toggle",
    "stylingName": "chip-toggle.tsx",
    "dependencies": [
      "react-aria",
      "@radix-ui/react-avatar",
      "react-stately"
    ],
    "files": [
      {
        "type": "registry:ui",
        "path": "ui/react-aria/chip-toggle/ChipToggle.atoms.tsx",
        "content": "import { AvatarImageProps } from \"@radix-ui/react-avatar\";\nimport { ChipToggleDismissLayout, ChipToggleDotStyleProps } from \"./chip-toggle\";\nimport {\n  UChipToggleAvatarFallback,\n  UChipToggleAvatarIcon,\n  UChipToggleAvatarImage,\n  UChipToggleAvatarLabel,\n  UChipToggleAvatarRoot,\n  UChipToggleAvatarRootProps,\n  UChipToggleDismissIcon,\n  UChipToggleDismissRoot,\n  UChipToggleDismissRootProps,\n  UChipToggleDot,\n  UChipToggleIcon,\n  UChipToggleLabel,\n  UChipToggleRoot,\n  UChipToggleRootProps,\n  useChipToggleRootProps,\n} from \"./ChipToggle.underatoms\";\nimport {\n  ChipToggleAvatarLayout,\n  ChipToggleAvatarWithIconLayout,\n  ChipToggleLayout,\n  ChipToggleWithAvatarLayout,\n  ChipToggleWithDotLayout,\n  ChipToggleWithIconLayout,\n} from \"./chip-toggle\";\nimport { ReactNode } from \"react\";\n\n/*\n  ====================================\n  ChipToggle\n  ====================================\n*/\n\nexport type ChipToggleProps = UChipToggleRootProps & {\n  onDismiss?: () => void;\n};\nexport const ChipToggle = ({ children, onDismiss, ...props }: ChipToggleProps) => {\n  return (\n    <ChipToggleLayout\n      renderRoot={(children, className) => (\n        <UChipToggleRoot {...props} className={className}>\n          {children}\n        </UChipToggleRoot>\n      )}\n      styleProps={{ className: props.className, chipToggleProps: props }}\n      labelSlot={<UChipToggleLabel>{children}</UChipToggleLabel>}\n      dismissSlot={onDismiss && <ChipToggleDismiss onPress={onDismiss} />}\n    />\n  );\n};\n\nexport type ChipToggleWithIconProps = UChipToggleRootProps & {\n  icon: (className: string) => ReactNode;\n  onDismiss?: () => void;\n};\nexport const ChipToggleWithIcon = ({ icon, children, onDismiss, ...props }: ChipToggleWithIconProps) => {\n  return (\n    <ChipToggleWithIconLayout\n      renderRoot={(children, className) => (\n        <UChipToggleRoot {...props} className={className}>\n          {children}\n        </UChipToggleRoot>\n      )}\n      styleProps={{ className: props.className, chipToggleProps: props }}\n      iconSlot={<UChipToggleIcon>{icon}</UChipToggleIcon>}\n      labelSlot={<UChipToggleLabel>{children}</UChipToggleLabel>}\n      dismissSlot={onDismiss && <ChipToggleDismiss onPress={onDismiss} />}\n    />\n  );\n};\n\nexport type ChipToggleWithDotProps = UChipToggleRootProps & {\n  dotColor?: ChipToggleDotStyleProps[\"color\"];\n  onDismiss?: () => void;\n};\n\nexport const ChipToggleWithDot = ({ dotColor = \"base\", onDismiss, children, ...props }: ChipToggleWithDotProps) => {\n  return (\n    <ChipToggleWithDotLayout\n      renderRoot={(children, className) => (\n        <UChipToggleRoot {...props} className={className}>\n          {children}\n        </UChipToggleRoot>\n      )}\n      styleProps={{ className: props.className, chipToggleProps: props }}\n      dotSlot={<UChipToggleDot color={dotColor} />}\n      labelSlot={<UChipToggleLabel>{children}</UChipToggleLabel>}\n      dismissSlot={onDismiss && <ChipToggleDismiss onPress={onDismiss} />}\n    />\n  );\n};\n\nexport type ChipToggleWithAvatarProps = UChipToggleRootProps & {\n  avatarSlot?: ReactNode;\n  onDismiss?: () => void;\n};\n\nexport const ChipToggleWithAvatar = ({ avatarSlot, children, onDismiss, ...props }: ChipToggleWithAvatarProps) => {\n  return (\n    <ChipToggleWithAvatarLayout\n      renderRoot={(children, className) => (\n        <UChipToggleRoot {...props} className={className}>\n          {children}\n        </UChipToggleRoot>\n      )}\n      styleProps={{ className: props.className, chipToggleProps: props }}\n      avatarSlot={avatarSlot}\n      labelSlot={<UChipToggleLabel>{children}</UChipToggleLabel>}\n      dismissSlot={onDismiss && <ChipToggleDismiss onPress={onDismiss} />}\n    />\n  );\n};\n\n/*\n  ====================================\n  ChipToggleDismiss\n  ====================================\n*/\n\nexport type ChipToggleDismissProps = UChipToggleDismissRootProps;\nexport const ChipToggleDismiss = (props: ChipToggleDismissProps) => {\n  const chipToggleProps = useChipToggleRootProps();\n  return (\n    <ChipToggleDismissLayout\n      renderRoot={(children, className) => (\n        <UChipToggleDismissRoot {...props} className={className}>\n          {children}\n        </UChipToggleDismissRoot>\n      )}\n      styleProps={{ className: props.className, chipToggleProps }}\n      iconSlot={<UChipToggleDismissIcon />}\n    />\n  );\n};\n\n/*\n  ====================================\n  ChipToggleAvatar\n  ====================================\n*/\n\nexport type ChipToggleAvatarProps = Omit<UChipToggleAvatarRootProps, \"children\"> & {\n  imageProps?: AvatarImageProps;\n  fallbackText?: string;\n};\nexport const ChipToggleAvatar = ({ imageProps, fallbackText, ...props }: ChipToggleAvatarProps) => {\n  const chipToggleProps = useChipToggleRootProps();\n  return (\n    <ChipToggleAvatarLayout\n      renderRoot={(children, className) => (\n        <UChipToggleAvatarRoot {...props} className={className}>\n          {children}\n        </UChipToggleAvatarRoot>\n      )}\n      styleProps={{ className: props.className, chipToggleProps }}\n      imageSlot={imageProps && <UChipToggleAvatarImage {...imageProps} />}\n      labelSlot={fallbackText && <UChipToggleAvatarLabel>{fallbackText}</UChipToggleAvatarLabel>}\n    />\n  );\n};\n\nexport type ChipToggleAvatarWithIconProps = Omit<UChipToggleAvatarRootProps, \"children\"> & {\n  fallbackIcon?: (classname: string) => ReactNode;\n  imageProps?: AvatarImageProps;\n};\nexport const ChipToggleAvatarWithIcon = ({ fallbackIcon, imageProps, ...props }: ChipToggleAvatarWithIconProps) => {\n  const chipToggleProps = useChipToggleRootProps();\n  return (\n    <ChipToggleAvatarWithIconLayout\n      renderRoot={(children, className) => (\n        <UChipToggleAvatarRoot {...props} className={className}>\n          {children}\n        </UChipToggleAvatarRoot>\n      )}\n      styleProps={{ className: props.className, chipToggleProps }}\n      imageSlot={imageProps && <UChipToggleAvatarImage {...imageProps} />}\n      iconSlot={\n        fallbackIcon && (\n          <UChipToggleAvatarFallback>\n            <UChipToggleAvatarIcon>{fallbackIcon}</UChipToggleAvatarIcon>\n          </UChipToggleAvatarFallback>\n        )\n      }\n    />\n  );\n};\n",
        "target": "underatom/components/react-aria/chip-toggle/ChipToggle.atoms.tsx"
      },
      {
        "type": "registry:ui",
        "path": "ui/react-aria/chip-toggle/ChipToggle.underatoms.tsx",
        "content": "import type { ReactNode } from \"react\";\nimport { useRef } from \"react\";\nimport type { AriaButtonProps, AriaToggleButtonProps } from \"react-aria\";\nimport { mergeProps, useButton, useFocusRing, useToggleButton } from \"react-aria\";\nimport * as RadixAvatar from \"@radix-ui/react-avatar\";\nimport { X } from \"../../../utils/Icons\";\nimport { useToggleState } from \"react-stately\";\nimport { getGenericContext } from \"../../../utils/utils\";\nimport {\n  ChipToggleDotStyleProps,\n  ChipToggleStyleProps,\n  chipToggleAvatarClass,\n  chipToggleAvatarIconClass,\n  chipToggleAvatarImageClass,\n  chipToggleAvatarLabelClass,\n  chipToggleClass,\n  chipToggleDismissClass,\n  chipToggleDismissIconClass,\n  chipToggleDotClass,\n  chipToggleIconClass,\n  chipToggleLabelClass,\n} from \"./chip-toggle\";\n\n/*\n  ====================================\n  ChipToggle\n  ====================================\n*/\n\nexport const { Provider: ChipToggleInternalProvider, useComponentContext: useChipToggleRootProps } =\n  getGenericContext<UChipToggleRootProps>(\"UChipToggleRootProps\");\n\nexport type UChipToggleRootProps = ChipToggleStyleProps &\n  AriaToggleButtonProps<\"button\"> & {\n    innerRef?: React.RefObject<HTMLButtonElement>;\n    className?: string;\n  };\nexport const UChipToggleRoot = (props: UChipToggleRootProps) => {\n  const refs = useRef<HTMLButtonElement>(null);\n  const { innerRef = refs } = props;\n  let state = useToggleState(props);\n  const { buttonProps, isPressed } = useToggleButton(props, state, refs);\n  const { isFocusVisible, focusProps } = useFocusRing();\n\n  return (\n    <button\n      ref={innerRef}\n      data-active={isPressed}\n      data-ring={isFocusVisible}\n      data-toggled={state.isSelected}\n      className={chipToggleClass({ className: props.className, chipToggleProps: props })}\n      {...mergeProps(buttonProps, focusProps)}\n    >\n      <ChipToggleInternalProvider value={props}>{props.children}</ChipToggleInternalProvider>\n    </button>\n  );\n};\n\nexport type UChipToggleLabelProps = {\n  /** Label content */\n  children: ReactNode;\n  className?: string;\n};\nexport const UChipToggleLabel = ({ children, className }: UChipToggleLabelProps) => {\n  const chipToggleProps = useChipToggleRootProps();\n  return <span className={chipToggleLabelClass({ className, chipToggleProps })}>{children}</span>;\n};\n\nexport type UChipToggleIconProps = {\n  /** Icon render function */\n  children: (className: string) => ReactNode;\n  className?: string;\n};\nexport const UChipToggleIcon = ({ children, className }: UChipToggleIconProps) => {\n  const chipToggleProps = useChipToggleRootProps();\n  return <>{children(chipToggleIconClass({ className, chipToggleProps }))}</>;\n};\n\nexport type UChipToggleDotProps = ChipToggleDotStyleProps & {\n  className?: string;\n};\nexport const UChipToggleDot = ({ className }: UChipToggleDotProps) => {\n  const chipToggleProps = useChipToggleRootProps();\n  return <span className={chipToggleDotClass({ className, chipToggleProps })} />;\n};\n\n/*\n  ====================================\n  ChipToggleDismiss\n  ====================================\n*/\n\nexport type UChipToggleDismissRootProps = AriaButtonProps<\"button\"> & {\n  innerRef?: React.RefObject<HTMLButtonElement>;\n  className?: string;\n};\nexport const UChipToggleDismissRoot = ({ className, ...props }: UChipToggleDismissRootProps) => {\n  const refs = useRef<HTMLButtonElement>(null);\n  const { innerRef = refs } = props;\n  const { isDisabled: isDisabledParent } = useChipToggleRootProps();\n  const { buttonProps, isPressed } = useButton({ ...props, isDisabled: isDisabledParent || props.isDisabled }, refs);\n  const { isFocusVisible, focusProps } = useFocusRing();\n  const chipToggleProps = useChipToggleRootProps();\n\n  return (\n    <button\n      ref={innerRef}\n      data-active={isPressed}\n      data-ring={isFocusVisible}\n      className={chipToggleDismissClass({ className, chipToggleProps })}\n      {...mergeProps(buttonProps, focusProps)}\n    >\n      {props.children}\n    </button>\n  );\n};\n\nexport const UChipToggleDismissIcon = () => {\n  const chipToggleProps = useChipToggleRootProps();\n  return <X className={chipToggleDismissIconClass({ chipToggleProps })} />;\n};\n\n/*\n  ====================================\n  ChipToggleAvatar\n  ====================================\n*/\n\nexport type UChipToggleAvatarRootProps = RadixAvatar.AvatarProps & {\n  /** Avatar content */\n  children: RadixAvatar.AvatarProps[\"children\"];\n};\n\nexport const UChipToggleAvatarRoot = (props: UChipToggleAvatarRootProps) => {\n  const chipToggleProps = useChipToggleRootProps();\n  return (\n    <RadixAvatar.Root {...props} className={chipToggleAvatarClass({ className: props.className, chipToggleProps })}>\n      {props.children}\n    </RadixAvatar.Root>\n  );\n};\n\nexport type UChipToggleAvatarFallbackProps = RadixAvatar.AvatarFallbackProps;\nexport const UChipToggleAvatarFallback = (props: UChipToggleAvatarFallbackProps) => {\n  return <RadixAvatar.Fallback {...props} />;\n};\n\nexport type UChipToggleAvatarLabelProps = {\n  /** Text content */\n  children: ReactNode;\n};\nexport const UChipToggleAvatarLabel = ({ children }: UChipToggleAvatarLabelProps) => {\n  const chipToggleProps = useChipToggleRootProps();\n  return <span className={chipToggleAvatarLabelClass({ chipToggleProps })}>{children}</span>;\n};\n\nexport type UChipToggleAvatarIconProps = {\n  /** Icon render function */\n  children: (className: string) => ReactNode;\n};\nexport const UChipToggleAvatarIcon = ({ children }: UChipToggleAvatarIconProps) => {\n  const chipToggleProps = useChipToggleRootProps();\n  return <>{children(chipToggleAvatarIconClass({ chipToggleProps }))}</>;\n};\n\nexport type UChipToggleAvatarImageProps = RadixAvatar.AvatarImageProps;\nexport const UChipToggleAvatarImage = (props: UChipToggleAvatarImageProps) => {\n  const chipToggleProps = useChipToggleRootProps();\n  return <RadixAvatar.Image className={chipToggleAvatarImageClass({ chipToggleProps })} {...props} />;\n};\n",
        "target": "underatom/components/react-aria/chip-toggle/ChipToggle.underatoms.tsx"
      },
      {
        "type": "registry:ui",
        "path": "ui/react-aria/chip-toggle/chip-toggle.tsx",
        "content": "import { tv } from \"../../../utils/extendedTV\";\nimport type { RenderRoot } from \"../../../utils/utils\";\n\n/*\n  ====================================\n  ChipToggle\n  ====================================\n*/\n\nexport type ChipToggleStyleProps = {\n  size?: \"sm\" | \"md\" | \"lg\";\n};\n\nexport type ChipToggleDotStyleProps = {\n  color?: \"primary\" | \"base\" | \"green\" | \"red\";\n};\n\nexport type ChipToggleType = {\n  className?: string;\n  chipToggleProps?: ChipToggleStyleProps;\n};\n\nexport type ChipToggleDotType = {\n  className?: string;\n  chipToggleProps?: ChipToggleStyleProps;\n  chipToggleDotProps?: ChipToggleDotStyleProps;\n};\n\nexport const chipToggleDefaults: Required<ChipToggleStyleProps> = {\n  size: \"md\",\n};\n\nexport const chipToggleDotDefaults: Required<ChipToggleDotStyleProps> = {\n  color: \"primary\",\n};\n\nexport const chipToggleClass = ({ className }: ChipToggleType) => {\n  return `\n  group/chipToggle\n  border-solid\n  data-[toggled=true]:border-solid\n  border-base-200\n  data-[active=true]:border-base-200\n  disabled:border-base-200\n  border-1\n  data-[toggled=true]:border-1\n  bg-base-50\n  data-[active=true]:bg-base-50\n  disabled:bg-base-50\n  rounded-[16px]\n  transition-all\n  hover:border-base-300\n  data-[ring=true]:border-base-300\n  data-[state=open]:border-base-300\n  hover:bg-base-100\n  data-[ring=true]:bg-base-100\n  data-[state=open]:bg-base-100\n  data-[ring=true]:shadow-focus-ring\n  data-[toggled=true]:border-primary-950\n  data-[active=true]:data-[toggled=true]:border-primary-950\n  data-[toggled=true]:bg-primary-950\n  data-[active=true]:data-[toggled=true]:bg-primary-950\n  hover:data-[toggled=true]:border-primary-900\n  data-[ring=true]:data-[toggled=true]:border-primary-900\n  data-[state=open]:data-[toggled=true]:border-primary-900\n  hover:data-[toggled=true]:bg-primary-900\n  data-[ring=true]:data-[toggled=true]:bg-primary-900\n  data-[state=open]:data-[toggled=true]:bg-primary-900\n  disabled:data-[toggled=true]:[border:unset]\n  disabled:data-[toggled=true]:bg-base-300\n  ${className}\n  `;\n};\n\nexport const chipToggleLabelClass = ({ className }: ChipToggleType) => {\n  return `text-base-950 text-sm font-text font-medium group-disabled/chipToggle:text-base-400 group-data-[toggled=true]/chipToggle:text-base-50 group-disabled/chipToggle:group-data-[toggled=true]/chipToggle:text-base-200 ${className}`;\n};\n\nexport const chipToggleIconClass = ({ className }: ChipToggleType) => {\n  return `w-5 h-5 text-base-950 group-disabled/chipToggle:text-base-400 group-data-[toggled=true]/chipToggle:text-base-50 group-disabled/chipToggle:group-data-[toggled=true]/chipToggle:text-base-200 ${className}`;\n};\n\nexport const chipToggleDotClass = ({ className, chipToggleDotProps }: ChipToggleDotType) => {\n  const dotClass = tv({\n    base: \"w-[6px] h-[6px] rounded-xs group-disabled/chipToggle:bg-base-400 group-disabled/chipToggle:group-data-[toggled=true]/chipToggle:bg-base-200 group-data-[toggled=true]/chipToggle:bg-base-50\",\n    variants: {\n      dotColor: { base: \"bg-base-950\", primary: \"bg-primary-950\", green: \"bg-success-600\", red: \"bg-danger-600\" },\n    },\n\n    defaultVariants: { dotColor: chipToggleDotDefaults.color },\n  });\n  return dotClass({\n    class: className,\n    dotColor: chipToggleDotProps?.color,\n  });\n};\n\nexport const ChipToggleLayout = ({\n  renderRoot,\n  styleProps: { className, chipToggleProps },\n  labelSlot,\n  dismissSlot,\n}: {\n  renderRoot: RenderRoot;\n  styleProps: ChipToggleType;\n  labelSlot: React.ReactNode;\n  dismissSlot: React.ReactNode;\n}) =>\n  renderRoot(\n    <>\n      <div\n        className={tv({\n          base: \"h-fit w-fit flex flex-row justify-center items-center gap-1\",\n          variants: { size: { sm: \"pr-1\", md: \"pr-1\", lg: \"pr-[6px]\" } },\n\n          defaultVariants: { size: chipToggleDefaults.size },\n        })({ size: chipToggleProps?.size })}\n      >\n        {labelSlot}\n      </div>\n      {dismissSlot}\n    </>,\n    tv({\n      base: \"w-fit flex flex-row justify-center items-center\",\n      variants: { size: { sm: \"h-7 pl-2 pr-1\", md: \"h-8 pl-[10px] pr-[6px]\", lg: \"h-9 pl-3 pr-[6px]\" } },\n\n      defaultVariants: { size: chipToggleDefaults.size },\n    })({\n      class: className,\n      size: chipToggleProps?.size,\n    }),\n  );\nexport const ChipToggleWithIconLayout = ({\n  renderRoot,\n  styleProps: { className, chipToggleProps },\n  iconSlot,\n  labelSlot,\n  dismissSlot,\n}: {\n  renderRoot: RenderRoot;\n  styleProps: ChipToggleType;\n  iconSlot: React.ReactNode;\n  labelSlot: React.ReactNode;\n  dismissSlot: React.ReactNode;\n}) =>\n  renderRoot(\n    <>\n      <div\n        className={tv({\n          base: \"h-fit w-fit flex flex-row justify-center items-center\",\n          variants: { size: { sm: \"gap-1 pr-1\", md: \"gap-1 pr-1\", lg: \"gap-[6px] pr-[6px]\" } },\n\n          defaultVariants: { size: chipToggleDefaults.size },\n        })({ size: chipToggleProps?.size })}\n      >\n        {iconSlot}\n        {labelSlot}\n      </div>\n      {dismissSlot}\n    </>,\n    tv({\n      base: \"w-fit flex flex-row justify-center items-center\",\n      variants: { size: { sm: \"h-7 px-1\", md: \"h-8 px-[6px]\", lg: \"h-9 pl-2 pr-[6px]\" } },\n\n      defaultVariants: { size: chipToggleDefaults.size },\n    })({\n      class: className,\n      size: chipToggleProps?.size,\n    }),\n  );\nexport const ChipToggleWithAvatarLayout = ({\n  renderRoot,\n  styleProps: { className, chipToggleProps },\n  avatarSlot,\n  labelSlot,\n  dismissSlot,\n}: {\n  renderRoot: RenderRoot;\n  styleProps: ChipToggleType;\n  avatarSlot: React.ReactNode;\n  labelSlot: React.ReactNode;\n  dismissSlot: React.ReactNode;\n}) =>\n  renderRoot(\n    <>\n      <div\n        className={tv({\n          base: \"h-fit w-fit flex flex-row justify-center items-center pr-1\",\n          variants: { size: { sm: \"gap-1\", md: \"gap-1\", lg: \"gap-[6px]\" } },\n\n          defaultVariants: { size: chipToggleDefaults.size },\n        })({ size: chipToggleProps?.size })}\n      >\n        {avatarSlot}\n        {labelSlot}\n      </div>\n      {dismissSlot}\n    </>,\n    tv({\n      base: \"w-fit flex flex-row items-center\",\n      variants: {\n        size: { sm: \"h-7 justify-center px-1\", md: \"h-8 justify-center pl-1 pr-[6px]\", lg: \"h-9 pl-1 pr-[6px]\" },\n      },\n\n      defaultVariants: { size: chipToggleDefaults.size },\n    })({\n      class: className,\n      size: chipToggleProps?.size,\n    }),\n  );\n\nexport const ChipToggleWithDotLayout = ({\n  renderRoot,\n  styleProps: { className, chipToggleProps },\n  dotSlot,\n  labelSlot,\n  dismissSlot,\n}: {\n  renderRoot: RenderRoot;\n  styleProps: ChipToggleType;\n  dotSlot: React.ReactNode;\n  labelSlot: React.ReactNode;\n  dismissSlot: React.ReactNode;\n}) =>\n  renderRoot(\n    <>\n      <div\n        className={tv({\n          base: \"h-fit w-fit flex flex-row items-center gap-[6px]\",\n          variants: { size: { sm: \"justify-center pr-1\", md: \"justify-center pr-[6px]\", lg: \"pr-1\" } },\n\n          defaultVariants: { size: chipToggleDefaults.size },\n        })({ size: chipToggleProps?.size })}\n      >\n        {dotSlot}\n        {labelSlot}\n      </div>\n      {dismissSlot}\n    </>,\n    tv({\n      base: \"w-fit flex flex-row justify-center items-center\",\n      variants: { size: { sm: \"h-7 pl-2 pr-1\", md: \"h-8 pl-[10px] pr-[6px]\", lg: \"h-9 pl-[10px] pr-[6px]\" } },\n\n      defaultVariants: { size: chipToggleDefaults.size },\n    })({\n      class: className,\n      size: chipToggleProps?.size,\n    }),\n  );\nexport type ChipToggleAvatarType = {\n  className?: string;\n  chipToggleProps?: ChipToggleStyleProps;\n};\n\nexport const chipToggleAvatarClass = ({ className }: ChipToggleAvatarType) => {\n  return `\n  group/chipToggleAvatar\n  bg-base-200\n  group-data-[active=true]/chipToggle:bg-base-200\n  group-data-[ring=true]/chipToggle:bg-base-200\n  group-disabled/chipToggle:bg-base-200\n  group-disabled/chipToggle:group-data-[toggled=true]/chipToggle:bg-base-200\n  rounded-lg\n  group-hover/chipToggle:bg-base-300\n  group-data-[toggled=true]/chipToggle:bg-primary-700\n  group-data-[active=true]/chipToggle:group-data-[toggled=true]/chipToggle:bg-primary-700\n  group-data-[ring=true]/chipToggle:group-data-[toggled=true]/chipToggle:bg-primary-700\n  group-hover/chipToggle:group-data-[toggled=true]/chipToggle:bg-primary-500\n  ${className}\n  `;\n};\n\nexport const chipToggleAvatarImageClass = ({ className, chipToggleProps }: ChipToggleAvatarType) => {\n  const imageClass = tv({\n    base: \"rounded-[50px] group-disabled/chipToggle:opacity-[0.6]\",\n    variants: { size: { sm: \"w-5 h-5\", md: \"w-6 h-6\", lg: \"w-7 h-7\" } },\n\n    defaultVariants: { size: chipToggleDefaults.size },\n  });\n  return imageClass({\n    class: className,\n\n    size: chipToggleProps?.size,\n  });\n};\n\nexport const chipToggleAvatarLabelClass = ({ className }: ChipToggleAvatarType) => {\n  return `text-base-950 text-xs font-text font-medium group-disabled/chipToggle:text-base-400 group-data-[toggled=true]/chipToggle:text-base-50 group-disabled/chipToggle:group-data-[toggled=true]/chipToggle:text-base-200 ${className}`;\n};\n\nexport const chipToggleAvatarIconClass = ({ className, chipToggleProps }: ChipToggleAvatarType) => {\n  const iconClass = tv({\n    base: \"text-base-800 group-disabled/chipToggle:text-base-400 group-disabled/chipToggle:group-data-[toggled=true]/chipToggle:text-base-200 group-data-[toggled=true]/chipToggle:text-base-50\",\n    variants: { size: { sm: \"w-3 h-3\", lg: \"w-5 h-5\", md: \"w-[14px] h-[14px]\" } },\n\n    defaultVariants: { size: chipToggleDefaults.size },\n  });\n  return iconClass({\n    class: className,\n\n    size: chipToggleProps?.size,\n  });\n};\n\nexport const ChipToggleAvatarLayout = ({\n  renderRoot,\n  styleProps: { className, chipToggleProps },\n  imageSlot,\n  labelSlot,\n}: {\n  renderRoot: RenderRoot;\n  styleProps: ChipToggleAvatarType;\n  imageSlot: React.ReactNode;\n  labelSlot: React.ReactNode;\n}) =>\n  renderRoot(\n    <>\n      {imageSlot}\n      {labelSlot}\n    </>,\n    tv({\n      base: \"flex flex-row justify-center items-center\",\n      variants: { size: { sm: \"h-5 w-5\", md: \"h-6 w-6\", lg: \"h-7 w-7\" } },\n\n      defaultVariants: { size: chipToggleDefaults.size },\n    })({\n      class: className,\n      size: chipToggleProps?.size,\n    }),\n  );\nexport const ChipToggleAvatarWithIconLayout = ({\n  renderRoot,\n  styleProps: { className, chipToggleProps },\n  imageSlot,\n  iconSlot,\n}: {\n  renderRoot: RenderRoot;\n  styleProps: ChipToggleAvatarType;\n  imageSlot: React.ReactNode;\n  iconSlot: React.ReactNode;\n}) =>\n  renderRoot(\n    <>\n      {imageSlot}\n      {iconSlot}\n    </>,\n    tv({\n      base: \"flex flex-row justify-center items-center\",\n      variants: { size: { sm: \"h-5 w-5\", md: \"h-6 w-6\", lg: \"h-7 w-7\" } },\n\n      defaultVariants: { size: chipToggleDefaults.size },\n    })({\n      class: className,\n      size: chipToggleProps?.size,\n    }),\n  );\n\nexport type ChipToggleDismissType = {\n  className?: string;\n  chipToggleProps?: ChipToggleStyleProps;\n};\n\nexport const chipToggleDismissClass = ({ className }: ChipToggleDismissType) => {\n  return `\n  group/chipToggleDismiss\n  rounded-[16px]\n  group-disabled/chipToggle:disabled:rounded-[16px]\n  transition-all\n  disabled:[background:unset]\n  data-[active=true]:[background:unset]\n  hover:bg-base-200\n  data-[ring=true]:bg-base-200\n  data-[ring=true]:shadow-focus-ring\n  group-data-[toggled=true]/chipToggle:hover:bg-base-800\n  group-data-[toggled=true]/chipToggle:data-[ring=true]:bg-base-800\n  ${className}\n  `;\n};\n\nexport const chipToggleDismissIconClass = ({ className }: ChipToggleDismissType) => {\n  return `\n  w-[14px]\n  group-disabled/chipToggleDismiss:group-disabled/chipToggle:w-[14px]\n  h-[14px]\n  group-disabled/chipToggleDismiss:group-disabled/chipToggle:h-[14px]\n  text-base-600\n  group-data-[active=true]/chipToggleDismiss:text-base-600\n  group-disabled/chipToggleDismiss:text-base-400\n  group-hover/chipToggleDismiss:text-base-950\n  group-data-[ring=true]/chipToggleDismiss:text-base-950\n  group-data-[toggled=true]/chipToggle:text-base-200\n  group-disabled/chipToggleDismiss:group-data-[toggled=true]/chipToggle:text-base-200\n  group-disabled/chipToggleDismiss:group-disabled/chipToggle:group-data-[toggled=true]/chipToggle:text-base-200\n  group-hover/chipToggleDismiss:group-data-[toggled=true]/chipToggle:text-base-50\n  group-data-[active=true]/chipToggleDismiss:group-data-[toggled=true]/chipToggle:text-base-50\n  group-data-[ring=true]/chipToggleDismiss:group-data-[toggled=true]/chipToggle:text-base-50\n  ${className}\n  `;\n};\n\nexport const ChipToggleDismissLayout = ({\n  renderRoot,\n  styleProps: { className, chipToggleProps },\n  iconSlot,\n}: {\n  renderRoot: RenderRoot;\n  styleProps: ChipToggleDismissType;\n  iconSlot: React.ReactNode;\n}) =>\n  renderRoot(\n    <>{iconSlot}</>,\n    tv({\n      base: \"flex flex-row justify-center items-center\",\n      variants: { size: { sm: \"h-5 w-5\", md: \"h-5 w-5\", lg: \"h-6 w-6\" } },\n\n      defaultVariants: { size: chipToggleDefaults.size },\n    })({\n      class: className,\n      size: chipToggleProps?.size,\n    }),\n  );\n",
        "target": "underatom/components/react-aria/chip-toggle/chip-toggle.tsx"
      }
    ]
  },
  {
    "name": "date-panel",
    "type": "registry:ui",
    "relativePath": "react-aria/date-panel",
    "stylingName": "date-panel.tsx",
    "dependencies": [
      "react-aria-components"
    ],
    "files": [
      {
        "type": "registry:ui",
        "path": "ui/react-aria/date-panel/DatePanel.atoms.tsx",
        "content": "import { ReactNode } from \"react\";\nimport {\n  DatePanelButtonLayout,\n  DatePanelGridBodyRowCellButtonLayout,\n  DatePanelGridBodyRowCellLayout,\n  DatePanelGridLayout,\n  DatePanelLayout,\n  DatePanelMultipleMonthsLayout,\n} from \"./date-panel\";\nimport {\n  UDatePanelButtonIcon,\n  UDatePanelButtonRoot,\n  UDatePanelButtonRootProps,\n  UDatePanelGridBodyCellButtonDot,\n  UDatePanelGridBodyCellButtonRoot,\n  UDatePanelGridBodyCellButtonRootProps,\n  UDatePanelGridBodyCellButtonText,\n  UDatePanelGridBodyCellRoot,\n  UDatePanelGridBodyCellRootProps,\n  UDatePanelGridBodyRoot,\n  UDatePanelGridBodyRootProps,\n  UDatePanelGridHeaderCellRoot,\n  UDatePanelGridHeaderCellRootProps,\n  UDatePanelGridHeaderCellText,\n  UDatePanelGridRoot,\n  UDatePanelGridRootProps,\n  UDatePanelHeaderRoot,\n  UDatePanelHeaderRootProps,\n  UDatePanelRoot,\n  UDatePanelRootProps,\n  UDatePanelTitle,\n  URangeDatePanelRoot,\n  URangeDatePanelRootProps,\n} from \"./DatePanel.underatoms\";\n\n/*\n  ====================================\n  DatePanelGridBodyRowCellButton\n  ====================================\n*/\n\nexport type DatePanelGridBodyCellButtonProps = Omit<UDatePanelGridBodyCellButtonRootProps, \"children\"> & {\n  hasDot?: boolean;\n  date: UDatePanelGridBodyCellRootProps[\"date\"];\n};\nexport const DatePanelGridBodyCellButton = ({ hasDot = false, ...props }: DatePanelGridBodyCellButtonProps) => (\n  <DatePanelGridBodyRowCellButtonLayout\n    renderRoot={(children, className) => (\n      <UDatePanelGridBodyCellButtonRoot {...props} className={className}>\n        {children}\n      </UDatePanelGridBodyCellButtonRoot>\n    )}\n    styleProps={{ className: props.className }}\n    textSlot={<UDatePanelGridBodyCellButtonText>{props.date.day}</UDatePanelGridBodyCellButtonText>}\n    dotSlot={hasDot && <UDatePanelGridBodyCellButtonDot />}\n  />\n);\n\n/*\n  ====================================\n  DatePanelGridBodyRowCell\n  ====================================\n*/\n\nexport type DatePanelGridBodyCellProps = Omit<UDatePanelGridBodyCellRootProps, \"children\"> & {\n  buttonSlot: React.ReactNode;\n};\nexport const DatePanelGridBodyCell = ({ buttonSlot, ...props }: DatePanelGridBodyCellProps) => (\n  <DatePanelGridBodyRowCellLayout\n    renderRoot={(children, className) => (\n      <UDatePanelGridBodyCellRoot {...props} className={className}>\n        {children}\n      </UDatePanelGridBodyCellRoot>\n    )}\n    styleProps={{ className: props.className }}\n    buttonSlot={buttonSlot}\n  />\n);\n\n/*\n  ====================================\n  DatePanelGridHeaderCell\n  ====================================\n*/\n\nexport type DatePanelGridHeaderCellProps = Omit<UDatePanelGridHeaderCellRootProps, \"children\"> & {\n  text: string;\n};\nexport const DatePanelGridHeaderCell = ({ text, ...props }: DatePanelGridHeaderCellProps) => {\n  return (\n    <UDatePanelGridHeaderCellRoot {...props} className={props.className}>\n      <UDatePanelGridHeaderCellText>{text}</UDatePanelGridHeaderCellText>\n    </UDatePanelGridHeaderCellRoot>\n  );\n};\n\n/*\n  ====================================\n  DatePanelGridHeader\n  ====================================\n*/\n\nexport type DatePanelGridHeaderProps = UDatePanelHeaderRootProps;\nexport const DatePanelGridHeader = (props: DatePanelGridHeaderProps) => <UDatePanelHeaderRoot {...props} />;\n\n/*\n  ====================================\n  DatePanelGridBody\n  ====================================\n*/\n\nexport type DatePanelGridBodyProps = UDatePanelGridBodyRootProps;\nexport const DatePanelGridBody = (props: UDatePanelGridBodyRootProps) => <UDatePanelGridBodyRoot {...props} />;\n\n/*\n  ====================================\n  DatePanelButton\n  ====================================\n*/\n\nexport type DatePanelButtonProps = UDatePanelButtonRootProps & {\n  icon?: (className: string) => ReactNode;\n};\nexport const DatePanelButton = ({ icon, ...props }: DatePanelButtonProps) => (\n  <DatePanelButtonLayout\n    renderRoot={(children, className) => (\n      <UDatePanelButtonRoot {...props} className={className}>\n        {children}\n      </UDatePanelButtonRoot>\n    )}\n    styleProps={{ className: props.className }}\n    iconSlot={icon && <UDatePanelButtonIcon>{icon}</UDatePanelButtonIcon>}\n  />\n);\n\n/*\n  ====================================\n  DatePanelGrid\n  ====================================\n*/\n\nexport type DatePanelGridProps = Omit<UDatePanelGridRootProps, \"children\"> & {\n  headerSlot: React.ReactNode;\n  bodySlot: React.ReactNode;\n};\nexport const DatePanelGrid = ({ headerSlot, bodySlot, ...props }: DatePanelGridProps) => (\n  <DatePanelGridLayout\n    renderRoot={(children) => (\n      <UDatePanelGridRoot {...props} className={props.className}>\n        <>{children}</>\n      </UDatePanelGridRoot>\n    )}\n    styleProps={{ className: props.className }}\n    headerSlot={headerSlot}\n    bodySlot={bodySlot}\n  />\n);\n\n/*\n  ====================================\n  DatePanel\n  ====================================\n*/\n\nexport type DatePanelProps = Omit<UDatePanelRootProps, \"children\"> & {\n  buttonSlot1: React.ReactNode;\n  buttonSlot2: React.ReactNode;\n  gridSlot: React.ReactNode;\n};\nexport const DatePanel = ({ buttonSlot1, buttonSlot2, gridSlot, ...props }: DatePanelProps) => (\n  <DatePanelLayout\n    renderRoot={(children, className) => (\n      <UDatePanelRoot {...props} className={className}>\n        {children}\n      </UDatePanelRoot>\n    )}\n    styleProps={{ className: props.className }}\n    titleSlot={<UDatePanelTitle />}\n    buttonSlot1={buttonSlot1}\n    buttonSlot2={buttonSlot2}\n    gridSlot={gridSlot}\n  />\n);\n\n/*\n  ====================================\n  DatePanelMultipleMonths\n  ====================================\n*/\n\nexport type DatePanelMultipleMonthsProps = Omit<UDatePanelRootProps, \"children\"> & {\n  buttonSlot1: React.ReactNode;\n  buttonSlot2: React.ReactNode;\n  gridsSlot: React.ReactNode;\n};\nexport const DatePanelMultipleMonths = ({\n  buttonSlot1,\n  buttonSlot2,\n  gridsSlot,\n  ...props\n}: DatePanelMultipleMonthsProps) => (\n  <DatePanelMultipleMonthsLayout\n    renderRoot={(children, className) => (\n      <UDatePanelRoot {...props} className={className}>\n        {children}\n      </UDatePanelRoot>\n    )}\n    styleProps={{ className: props.className }}\n    titleSlot={<UDatePanelTitle />}\n    buttonSlot1={buttonSlot1}\n    buttonSlot2={buttonSlot2}\n    gridSlots={gridsSlot}\n  />\n);\n\n/*\n  ====================================\n  RangeDatePanel\n  ====================================\n*/\n\nexport type RangeDatePanelProps = Omit<URangeDatePanelRootProps, \"children\"> & {\n  buttonSlot1: React.ReactNode;\n  buttonSlot2: React.ReactNode;\n  gridSlot: React.ReactNode;\n};\nexport const RangeDatePanel = ({ buttonSlot1, buttonSlot2, gridSlot, ...props }: RangeDatePanelProps) => (\n  <DatePanelLayout\n    renderRoot={(children, className) => (\n      <URangeDatePanelRoot {...props} className={className}>\n        {children}\n      </URangeDatePanelRoot>\n    )}\n    styleProps={{ className: props.className }}\n    titleSlot={<UDatePanelTitle />}\n    buttonSlot1={buttonSlot1}\n    buttonSlot2={buttonSlot2}\n    gridSlot={gridSlot}\n  />\n);\n\n/*\n  ====================================\n  RangeDatePanelMultipleMonths\n  ====================================\n*/\n\nexport type RangeDatePanelMultipleMonthsProps = Omit<URangeDatePanelRootProps, \"children\"> & {\n  buttonSlot1: React.ReactNode;\n  buttonSlot2: React.ReactNode;\n  gridsSlot: React.ReactNode;\n};\nexport const RangeDatePanelMultipleMonths = ({\n  buttonSlot1,\n  buttonSlot2,\n  gridsSlot,\n  ...props\n}: RangeDatePanelMultipleMonthsProps) => (\n  <DatePanelMultipleMonthsLayout\n    renderRoot={(children, className) => (\n      <URangeDatePanelRoot {...props} className={className}>\n        {children}\n      </URangeDatePanelRoot>\n    )}\n    styleProps={{ className: props.className }}\n    titleSlot={<UDatePanelTitle />}\n    buttonSlot1={buttonSlot1}\n    buttonSlot2={buttonSlot2}\n    gridSlots={gridsSlot}\n  />\n);\n",
        "target": "underatom/components/react-aria/date-panel/DatePanel.atoms.tsx"
      },
      {
        "type": "registry:ui",
        "path": "ui/react-aria/date-panel/DatePanel.underatoms.tsx",
        "content": "import {\n  Button,\n  Calendar,\n  CalendarCell,\n  Heading,\n  HeadingProps,\n  CalendarGridProps,\n  CalendarGrid,\n  CalendarCellProps,\n  CalendarGridBodyProps,\n  CalendarGridBody,\n  ButtonProps,\n  CalendarGridHeaderProps,\n  CalendarGridHeader,\n  CalendarHeaderCellProps,\n  CalendarHeaderCell,\n  RangeCalendar,\n} from \"react-aria-components\";\nimport { getGenericContext } from \"../../../utils/utils\";\nimport {\n  datePanelButtonClass,\n  datePanelButtonIconClass,\n  datePanelClass,\n  datePanelGridBodyClass,\n  datePanelGridBodyRowCellButtonClass,\n  datePanelGridBodyRowCellButtonDotClass,\n  datePanelGridBodyRowCellButtonTextClass,\n  datePanelGridBodyRowCellClass,\n  datePanelGridClass,\n  datePanelGridHeaderCellClass,\n  datePanelGridHeaderCellTextClass,\n  datePanelGridHeaderClass,\n  datePanelTitleClass,\n} from \"./date-panel\";\n\n/*\n    ====================================\n    DatePanel\n    ====================================\n*/\n\nexport const { Provider: DatePanelRootInternalProvider, useComponentContext: useDatePanelRootParentProps } =\n  getGenericContext<UDatePanelRootProps | URangeDatePanelRootProps>(\"DatePanelRootInternalProvider\");\n\nexport type UDatePanelRootProps = React.ComponentPropsWithoutRef<typeof Calendar> & {\n  className?: string;\n  children: React.ReactNode;\n};\nexport const UDatePanelRoot = (props: UDatePanelRootProps) => {\n  return (\n    <Calendar {...props} className={datePanelClass({ className: props.className })}>\n      <DatePanelRootInternalProvider value={props}>{props.children}</DatePanelRootInternalProvider>\n    </Calendar>\n  );\n};\n\nexport type URangeDatePanelRootProps = React.ComponentPropsWithoutRef<typeof RangeCalendar> & {\n  className?: string;\n  children: React.ReactNode;\n};\nexport const URangeDatePanelRoot = (props: URangeDatePanelRootProps) => {\n  return (\n    <RangeCalendar {...props} className={datePanelClass({ className: props.className })}>\n      <DatePanelRootInternalProvider value={props}>{props.children}</DatePanelRootInternalProvider>\n    </RangeCalendar>\n  );\n};\n\nexport type UDatePanelTitleProps = HeadingProps;\nexport const UDatePanelTitle = (props: UDatePanelTitleProps) => {\n  return <Heading {...props} className={datePanelTitleClass({ className: props.className })} />;\n};\n\n/*\n    ====================================\n    DatePanelButton\n    ====================================\n*/\n\nexport type UDatePanelButtonRootProps = ButtonProps & {\n  className?: string;\n};\nexport const UDatePanelButtonRoot = (props: UDatePanelButtonRootProps) => {\n  const { isDisabled: parentDisabled } = useDatePanelRootParentProps();\n  return (\n    <Button\n      {...props}\n      className={datePanelButtonClass({ className: props.className })}\n      isDisabled={props.isDisabled || parentDisabled}\n    />\n  );\n};\n\nexport type UDatePanelButtonIconProps = {\n  children: (className: string) => React.ReactNode;\n};\nexport const UDatePanelButtonIcon = ({ children }: UDatePanelButtonIconProps) => {\n  return <>{children(datePanelButtonIconClass({}))}</>;\n};\n\nexport type UDatePanelButtonTextProps = {\n  children: React.ReactNode;\n};\n\n/*\n    ====================================\n    DatePanelGrid\n    ====================================\n*/\n\nexport type UDatePanelGridRootProps = Omit<CalendarGridProps, \"children\"> & {\n  children: React.ReactElement;\n};\nexport const UDatePanelGridRoot = (props: UDatePanelGridRootProps) => {\n  return (\n    <CalendarGrid\n      style={{ width: \"100%\", minWidth: \"240px\" }}\n      {...props}\n      className={datePanelGridClass({ className: props.className })}\n    />\n  );\n};\n\n/*\n    ====================================\n    DatePanelGridHeader\n    ====================================\n*/\n\nexport type UDatePanelHeaderRootProps = CalendarGridHeaderProps;\nexport const UDatePanelHeaderRoot = (props: UDatePanelHeaderRootProps) => {\n  return <CalendarGridHeader {...props} className={datePanelGridHeaderClass({ className: props.className })} />;\n};\n\n/*\n    ====================================\n    DatePanelGridHeaderCell\n    ====================================\n*/\n\nexport type UDatePanelGridHeaderCellRootProps = CalendarHeaderCellProps & {\n  className?: string;\n  children: React.ReactNode;\n};\nexport const UDatePanelGridHeaderCellRoot = (props: UDatePanelGridHeaderCellRootProps) => {\n  return <CalendarHeaderCell {...props} className={datePanelGridHeaderCellClass({ className: props.className })} />;\n};\n\nexport type UDatePanelGridHeaderCellTextProps = {\n  children: React.ReactNode;\n};\nexport const UDatePanelGridHeaderCellText = (props: UDatePanelGridHeaderCellTextProps) => {\n  return <span className={datePanelGridHeaderCellTextClass({})}>{props.children}</span>;\n};\n\n/*\n    ====================================\n    DatePanelGridBody\n    ====================================\n*/\n\nexport type UDatePanelGridBodyRootProps = CalendarGridBodyProps;\nexport const UDatePanelGridBodyRoot = (props: UDatePanelGridBodyRootProps) => {\n  return <CalendarGridBody {...props} className={datePanelGridBodyClass({ className: props.className })} />;\n};\n\n/*\n    ====================================\n    DatePanelGridBodyRowCell\n    ====================================\n*/\n\nexport type UDatePanelGridBodyCellRootProps = CalendarCellProps & {\n  className?: string;\n  children: React.ReactNode;\n};\nexport const UDatePanelGridBodyCellRoot = (props: UDatePanelGridBodyCellRootProps) => {\n  return <CalendarCell {...props} className={datePanelGridBodyRowCellClass({ className: props.className })} />;\n};\n\n/*\n    ====================================\n    DatePanelGridBodyRowCellButton\n    ====================================\n*/\n\nexport type UDatePanelGridBodyCellButtonRootProps = {\n  className?: string;\n  children: React.ReactNode;\n};\nexport const UDatePanelGridBodyCellButtonRoot = (props: UDatePanelGridBodyCellButtonRootProps) => {\n  return <div {...props} className={datePanelGridBodyRowCellButtonClass({ className: props.className })} />;\n};\n\nexport type UDatePanelGridBodyCellButtonTextProps = {\n  children: React.ReactNode;\n};\nexport const UDatePanelGridBodyCellButtonText = (props: UDatePanelGridBodyCellButtonTextProps) => {\n  return <span className={datePanelGridBodyRowCellButtonTextClass({})}>{props.children}</span>;\n};\n\nexport const UDatePanelGridBodyCellButtonDot = () => {\n  return <span className={datePanelGridBodyRowCellButtonDotClass({})} />;\n};\n",
        "target": "underatom/components/react-aria/date-panel/DatePanel.underatoms.tsx"
      },
      {
        "type": "registry:ui",
        "path": "ui/react-aria/date-panel/date-panel.tsx",
        "content": "import { tv } from \"../../../utils/extendedTV\";\nimport type { RenderRoot } from \"../../../utils/utils\";\n\n/*\n  ====================================\n  DatePanel\n  ====================================\n*/\n\nexport type DatePanelType = {\n  className?: string;\n};\n\nexport const datePanelClass = ({ className }: DatePanelType) => {\n  return `group/datePanel border-solid border-primary-200 border-1 bg-primary-50 shadow-lg rounded-md ${className}`;\n};\n\nexport const datePanelTitleClass = ({ className }: DatePanelType) => {\n  return `text-primary-600 text-sm font-text font-medium text-nowrap ${className}`;\n};\n\nexport const DatePanelLayout = ({\n  renderRoot,\n  styleProps: { className },\n  buttonSlot1,\n  titleSlot,\n  buttonSlot2,\n  gridSlot,\n}: {\n  renderRoot: RenderRoot;\n  styleProps: DatePanelType;\n  buttonSlot1: React.ReactNode;\n  buttonSlot2: React.ReactNode;\n  titleSlot: React.ReactNode;\n  gridSlot: React.ReactNode;\n}) =>\n  renderRoot(\n    <>\n      <div className=\"h-fit w-fit flex flex-col gap-[6px]\">\n        <div className=\"h-fit w-full flex flex-row justify-between items-center gap-[6px]\">\n          {buttonSlot1}\n          {titleSlot}\n          {buttonSlot2}\n        </div>\n        {gridSlot}\n      </div>\n    </>,\n    `h-fit w-fit flex flex-col gap-2 p-5 ${className}`,\n  );\nexport const DatePanelMultipleMonthsLayout = ({\n  renderRoot,\n  styleProps: { className },\n  buttonSlot1,\n  titleSlot,\n  buttonSlot2,\n  gridSlots,\n}: {\n  renderRoot: RenderRoot;\n  styleProps: DatePanelType;\n  buttonSlot1: React.ReactNode;\n  buttonSlot2: React.ReactNode;\n  titleSlot: React.ReactNode;\n  gridSlots: React.ReactNode;\n}) =>\n  renderRoot(\n    <>\n      <div className=\"h-fit w-full flex flex-col gap-[6px]\">\n        <div className=\"h-fit w-full flex flex-row justify-between items-center gap-[6px]\">\n          {buttonSlot1}\n          {titleSlot}\n          {buttonSlot2}\n        </div>\n        <div className=\"h-fit w-full flex flex-row gap-7 overflow-auto\">{gridSlots}</div>\n      </div>\n    </>,\n    `h-fit w-full flex flex-col gap-2 p-5 ${className}`,\n  );\nexport type DatePanelGridType = {\n  className?: string;\n};\n\nexport const datePanelGridClass = ({ className }: DatePanelGridType) => {\n  return `group/datePanelGrid  ${className}`;\n};\n\nexport const DatePanelGridLayout = ({\n  renderRoot,\n  styleProps: { className },\n  headerSlot,\n  bodySlot,\n}: {\n  renderRoot: RenderRoot;\n  styleProps: DatePanelGridType;\n  headerSlot: React.ReactNode;\n  bodySlot: React.ReactNode;\n}) =>\n  renderRoot(\n    <>\n      {headerSlot}\n      {bodySlot}\n    </>,\n    `h-fit w-[240px] flex flex-col gap-1 ${className}`,\n  );\n\nexport type DatePanelButtonType = {\n  className?: string;\n};\n\nexport const datePanelButtonClass = ({ className }: DatePanelButtonType) => {\n  return `group/datePanelButton border-solid border-primary-200 border-1 bg-base-50 rounded-sm transition-all data-[focus-visible]:shadow-focus-ring ${className}`;\n};\n\nexport const datePanelButtonIconClass = ({ className }: DatePanelButtonType) => {\n  return `w-5 h-5 text-primary-600 ${className}`;\n};\n\nexport const DatePanelButtonLayout = ({\n  renderRoot,\n  styleProps: { className },\n  iconSlot,\n}: {\n  renderRoot: RenderRoot;\n  styleProps: DatePanelButtonType;\n  iconSlot: React.ReactNode;\n}) => renderRoot(<>{iconSlot}</>, `h-8 w-8 flex flex-row justify-center items-center ${className}`);\n\nexport type DatePanelGridBodyType = {\n  className?: string;\n};\n\nexport const datePanelGridBodyClass = ({ className }: DatePanelGridBodyType) => {\n  return `group/datePanelGridBody  ${className}`;\n};\n\nexport const DatePanelGridBodyLayout = ({\n  renderRoot,\n  styleProps: { className },\n  rowSlots,\n}: {\n  renderRoot: RenderRoot;\n  styleProps: DatePanelGridBodyType;\n  rowSlots: React.ReactNode;\n}) => renderRoot(<>{rowSlots}</>, `h-fit w-full flex flex-col gap-2 ${className}`);\n\nexport type DatePanelGridHeaderType = {\n  className?: string;\n};\n\nexport const datePanelGridHeaderClass = ({ className }: DatePanelGridHeaderType) => {\n  return `group/datePanelGridHeader  ${className}`;\n};\n\nexport const DatePanelGridHeaderLayout = ({\n  renderRoot,\n  styleProps: { className },\n  cellSlots,\n}: {\n  renderRoot: RenderRoot;\n  styleProps: DatePanelGridHeaderType;\n  cellSlots: React.ReactNode;\n}) => renderRoot(<>{cellSlots}</>, `h-fit w-full flex flex-row justify-center items-center ${className}`);\n\nexport type DatePanelGridBodyRowType = {\n  className?: string;\n};\n\nexport const datePanelGridBodyRowClass = ({ className }: DatePanelGridBodyRowType) => {\n  return `group/datePanelGridBodyRow  ${className}`;\n};\n\nexport const DatePanelGridBodyRowLayout = ({\n  renderRoot,\n  styleProps: { className },\n  cellSlots,\n}: {\n  renderRoot: RenderRoot;\n  styleProps: DatePanelGridBodyRowType;\n  cellSlots: React.ReactNode;\n}) => renderRoot(<>{cellSlots}</>, `h-fit w-full flex flex-row justify-center items-center ${className}`);\n\nexport type DatePanelGridHeaderCellType = {\n  className?: string;\n};\n\nexport const datePanelGridHeaderCellClass = ({ className }: DatePanelGridHeaderCellType) => {\n  return `group/datePanelGridHeaderCell  ${className}`;\n};\n\nexport const datePanelGridHeaderCellTextClass = ({ className }: DatePanelGridHeaderCellType) => {\n  return `text-primary-400 text-sm font-text font-medium ${className}`;\n};\n\nexport const DatePanelGridHeaderCellLayout = ({\n  renderRoot,\n  styleProps: { className },\n  textSlot,\n}: {\n  renderRoot: RenderRoot;\n  styleProps: DatePanelGridHeaderCellType;\n  textSlot: React.ReactNode;\n}) => renderRoot(<>{textSlot}</>, `h-9 w-full flex flex-row justify-center items-center gap-5 ${className}`);\n\nexport type DatePanelGridBodyRowCellType = {\n  className?: string;\n};\n\nexport const datePanelGridBodyRowCellClass = ({ className }: DatePanelGridBodyRowCellType) => {\n  return `group/datePanelGridBodyRowCell group-data-[disabled]/datePanel:pointer-events-none data-[unavailable]:pointer-events-none data-[outside-month]:pointer-events-none data-[disabled]:pointer-events-none ${className}`;\n};\n\nexport const DatePanelGridBodyRowCellLayout = ({\n  renderRoot,\n  styleProps: { className },\n  buttonSlot,\n}: {\n  renderRoot: RenderRoot;\n  styleProps: DatePanelGridBodyRowCellType;\n  buttonSlot: React.ReactNode;\n}) => renderRoot(<>{buttonSlot}</>, `h-9 w-full flex flex-row justify-center items-center gap-5 ${className}`);\n\nexport type DatePanelGridBodyRowCellButtonType = {\n  className?: string;\n};\n\nexport const datePanelGridBodyRowCellButtonClass = ({ className }: DatePanelGridBodyRowCellButtonType) => {\n  return `\n  group/datePanelGridBodyRowCellButton\n  rounded-sm\n  transition-all\n  group-data-[disabled]/datePanelGridBodyRowCell:[background:unset]\n  group-data-[selected]/datePanelGridBodyRowCell:group-data-[outside-month]/datePanelGridBodyRowCell:[background:unset]\n  group-hover/datePanelGridBodyRowCell:group-data-[outside-month]/datePanelGridBodyRowCell:[background:unset]\n  group-data-[pressed]/datePanelGridBodyRowCell:group-data-[outside-month]/datePanelGridBodyRowCell:[background:unset]\n  group-data-[focus-visible]/datePanelGridBodyRowCell:group-data-[outside-month]/datePanelGridBodyRowCell:[background:unset]\n  group-data-[selected]/datePanelGridBodyRowCell:group-data-[unavailable]/datePanelGridBodyRowCell:[background:unset]\n  group-hover/datePanelGridBodyRowCell:group-data-[unavailable]/datePanelGridBodyRowCell:[background:unset]\n  group-data-[pressed]/datePanelGridBodyRowCell:group-data-[unavailable]/datePanelGridBodyRowCell:[background:unset]\n  group-data-[focus-visible]/datePanelGridBodyRowCell:group-data-[unavailable]/datePanelGridBodyRowCell:[background:unset]\n  group-hover/datePanelGridBodyRowCell:bg-base-100\n  group-data-[pressed]/datePanelGridBodyRowCell:bg-base-100\n  group-data-[focus-visible]/datePanelGridBodyRowCell:bg-base-100\n  group-data-[invalid]/datePanel:group-hover/datePanelGridBodyRowCell:bg-danger-100\n  group-data-[invalid]/datePanel:group-data-[pressed]/datePanelGridBodyRowCell:bg-danger-100\n  group-data-[invalid]/datePanel:group-data-[focus-visible]/datePanelGridBodyRowCell:bg-danger-100\n  group-data-[focus-visible]/datePanelGridBodyRowCell:shadow-focus-ring\n  group-data-[focus-visible]/datePanelGridBodyRowCell:group-data-[outside-month]/datePanelGridBodyRowCell:shadow-none\n  group-data-[focus-visible]/datePanelGridBodyRowCell:group-data-[unavailable]/datePanelGridBodyRowCell:shadow-none\n  group-data-[selected]/datePanelGridBodyRowCell:bg-primary-950\n  group-data-[focus-visible]/datePanelGridBodyRowCell:group-data-[selected]/datePanelGridBodyRowCell:bg-primary-950\n  group-hover/datePanelGridBodyRowCell:group-data-[selected]/datePanelGridBodyRowCell:bg-primary-800\n  group-data-[pressed]/datePanelGridBodyRowCell:group-data-[selected]/datePanelGridBodyRowCell:bg-primary-800\n  group-data-[invalid]/datePanel:group-data-[selected]/datePanelGridBodyRowCell:bg-danger-500\n  group-data-[invalid]/datePanel:group-data-[focus-visible]/datePanelGridBodyRowCell:group-data-[selected]/datePanelGridBodyRowCell:bg-danger-500\n  group-data-[invalid]/datePanel:group-hover/datePanelGridBodyRowCell:group-data-[selected]/datePanelGridBodyRowCell:bg-danger-700\n  group-data-[invalid]/datePanel:group-data-[pressed]/datePanelGridBodyRowCell:group-data-[selected]/datePanelGridBodyRowCell:bg-danger-700\n  group-data-[disabled]/datePanelGridBodyRowCell:group-data-[selected]/datePanelGridBodyRowCell:[background:unset]\n  group-data-[invalid]/datePanel:group-data-[selected]/datePanelGridBodyRowCell:group-data-[outside-month]/datePanelGridBodyRowCell:[background:unset]\n  group-data-[invalid]/datePanel:group-hover/datePanelGridBodyRowCell:group-data-[outside-month]/datePanelGridBodyRowCell:[background:unset]\n  group-data-[invalid]/datePanel:group-data-[pressed]/datePanelGridBodyRowCell:group-data-[outside-month]/datePanelGridBodyRowCell:[background:unset]\n  group-data-[invalid]/datePanel:group-data-[focus-visible]/datePanelGridBodyRowCell:group-data-[outside-month]/datePanelGridBodyRowCell:[background:unset]\n  group-hover/datePanelGridBodyRowCell:group-data-[selected]/datePanelGridBodyRowCell:group-data-[outside-month]/datePanelGridBodyRowCell:[background:unset]\n  group-data-[pressed]/datePanelGridBodyRowCell:group-data-[selected]/datePanelGridBodyRowCell:group-data-[outside-month]/datePanelGridBodyRowCell:[background:unset]\n  group-data-[focus-visible]/datePanelGridBodyRowCell:group-data-[selected]/datePanelGridBodyRowCell:group-data-[outside-month]/datePanelGridBodyRowCell:[background:unset]\n  group-data-[invalid]/datePanel:group-data-[selected]/datePanelGridBodyRowCell:group-data-[unavailable]/datePanelGridBodyRowCell:[background:unset]\n  group-data-[invalid]/datePanel:group-hover/datePanelGridBodyRowCell:group-data-[unavailable]/datePanelGridBodyRowCell:[background:unset]\n  group-data-[invalid]/datePanel:group-data-[pressed]/datePanelGridBodyRowCell:group-data-[unavailable]/datePanelGridBodyRowCell:[background:unset]\n  group-data-[invalid]/datePanel:group-data-[focus-visible]/datePanelGridBodyRowCell:group-data-[unavailable]/datePanelGridBodyRowCell:[background:unset]\n  group-hover/datePanelGridBodyRowCell:group-data-[selected]/datePanelGridBodyRowCell:group-data-[unavailable]/datePanelGridBodyRowCell:[background:unset]\n  group-data-[pressed]/datePanelGridBodyRowCell:group-data-[selected]/datePanelGridBodyRowCell:group-data-[unavailable]/datePanelGridBodyRowCell:[background:unset]\n  group-data-[focus-visible]/datePanelGridBodyRowCell:group-data-[selected]/datePanelGridBodyRowCell:group-data-[unavailable]/datePanelGridBodyRowCell:[background:unset]\n  ${className}\n  `;\n};\n\nexport const datePanelGridBodyRowCellButtonTextClass = ({ className }: DatePanelGridBodyRowCellButtonType) => {\n  return `\n  text-base-950\n  text-sm\n  group-data-[outside-month]/datePanelGridBodyRowCell:group-data-[unavailable]/datePanelGridBodyRowCell:text-sm\n  group-data-[disabled]/datePanelGridBodyRowCell:group-data-[unavailable]/datePanelGridBodyRowCell:text-sm\n  font-text\n  group-data-[outside-month]/datePanelGridBodyRowCell:group-data-[unavailable]/datePanelGridBodyRowCell:font-text\n  group-data-[disabled]/datePanelGridBodyRowCell:group-data-[unavailable]/datePanelGridBodyRowCell:font-text\n  font-medium\n  group-data-[invalid]/datePanel:text-danger-500\n  group-data-[outside-month]/datePanelGridBodyRowCell:text-base-400\n  group-data-[disabled]/datePanelGridBodyRowCell:text-base-400\n  group-data-[outside-month]/datePanelGridBodyRowCell:group-data-[unavailable]/datePanelGridBodyRowCell:[text-decoration-line:unset]\n  group-data-[disabled]/datePanelGridBodyRowCell:group-data-[unavailable]/datePanelGridBodyRowCell:[text-decoration-line:unset]\n  group-data-[unavailable]/datePanelGridBodyRowCell:text-base-600\n  group-data-[unavailable]/datePanelGridBodyRowCell:text-[14px]\n  group-data-[unavailable]/datePanelGridBodyRowCell:font-['GeistVariable']\n  group-data-[unavailable]/datePanelGridBodyRowCell:leading-[24px]\n  group-data-[unavailable]/datePanelGridBodyRowCell:line-through\n  group-data-[selected]/datePanelGridBodyRowCell:text-white\n  group-data-[outside-month]/datePanelGridBodyRowCell:group-data-[unavailable]/datePanelGridBodyRowCell:text-base-400\n  group-data-[selected]/datePanelGridBodyRowCell:group-data-[outside-month]/datePanelGridBodyRowCell:text-base-400\n  group-data-[disabled]/datePanelGridBodyRowCell:group-data-[unavailable]/datePanelGridBodyRowCell:text-base-400\n  group-data-[disabled]/datePanelGridBodyRowCell:group-data-[selected]/datePanelGridBodyRowCell:text-base-400\n  group-data-[invalid]/datePanel:group-data-[outside-month]/datePanelGridBodyRowCell:text-base-400\n  group-data-[invalid]/datePanel:group-data-[disabled]/datePanelGridBodyRowCell:text-base-400\n  group-data-[outside-month]/datePanelGridBodyRowCell:group-data-[unavailable]/datePanelGridBodyRowCell:text-base-600\n  group-data-[selected]/datePanelGridBodyRowCell:group-data-[unavailable]/datePanelGridBodyRowCell:text-base-600\n  group-data-[invalid]/datePanel:group-data-[unavailable]/datePanelGridBodyRowCell:text-base-600\n  group-data-[invalid]/datePanel:group-data-[selected]/datePanelGridBodyRowCell:text-white\n  ${className}\n  `;\n};\n\nexport const datePanelGridBodyRowCellButtonDotClass = ({ className }: DatePanelGridBodyRowCellButtonType) => {\n  return `\n  w-[7px]\n  h-1\n  [background:#000000]\n  rounded-[50px]\n  transition-all\n  group-data-[invalid]/datePanel:bg-danger-500\n  group-data-[outside-month]/datePanelGridBodyRowCell:bg-base-400\n  group-data-[disabled]/datePanelGridBodyRowCell:bg-base-400\n  group-data-[unavailable]/datePanelGridBodyRowCell:bg-base-800\n  group-data-[selected]/datePanelGridBodyRowCell:[background:#ffffff]\n  group-data-[invalid]/datePanel:group-data-[disabled]/datePanelGridBodyRowCell:bg-danger-500\n  group-data-[outside-month]/datePanelGridBodyRowCell:group-data-[unavailable]/datePanelGridBodyRowCell:bg-base-400\n  group-data-[selected]/datePanelGridBodyRowCell:group-data-[outside-month]/datePanelGridBodyRowCell:bg-base-400\n  group-data-[disabled]/datePanelGridBodyRowCell:group-data-[unavailable]/datePanelGridBodyRowCell:bg-base-400\n  group-data-[disabled]/datePanelGridBodyRowCell:group-data-[selected]/datePanelGridBodyRowCell:bg-base-400\n  group-data-[invalid]/datePanel:group-data-[outside-month]/datePanelGridBodyRowCell:bg-base-400\n  group-data-[invalid]/datePanel:group-data-[disabled]/datePanelGridBodyRowCell:bg-base-400\n  group-data-[outside-month]/datePanelGridBodyRowCell:group-data-[unavailable]/datePanelGridBodyRowCell:bg-base-800\n  group-data-[selected]/datePanelGridBodyRowCell:group-data-[unavailable]/datePanelGridBodyRowCell:bg-base-800\n  group-data-[invalid]/datePanel:group-data-[unavailable]/datePanelGridBodyRowCell:bg-base-800\n  group-data-[invalid]/datePanel:group-data-[selected]/datePanelGridBodyRowCell:[background:#ffffff]\n  ${className}\n  `;\n};\n\nexport const DatePanelGridBodyRowCellButtonLayout = ({\n  renderRoot,\n  styleProps: { className },\n  textSlot,\n  dotSlot,\n}: {\n  renderRoot: RenderRoot;\n  styleProps: DatePanelGridBodyRowCellButtonType;\n  textSlot: React.ReactNode;\n  dotSlot: React.ReactNode;\n}) =>\n  renderRoot(\n    <>\n      {textSlot}\n      {dotSlot}\n    </>,\n    `h-9 w-full flex flex-col justify-center items-center [&>*:not(:first-child)]:[margin-top:-4px] ${className}`,\n  );\n\n",
        "target": "underatom/components/react-aria/date-panel/date-panel.tsx"
      }
    ]
  },
  {
    "name": "input",
    "type": "registry:ui",
    "relativePath": "react-aria/input",
    "stylingName": "input.tsx",
    "dependencies": [
      "react-aria",
      "@radix-ui/react-avatar",
      "react-aria-components"
    ],
    "files": [
      {
        "type": "registry:ui",
        "path": "ui/react-aria/input/Input.atoms.tsx",
        "content": "import { AvatarImageProps } from \"@radix-ui/react-avatar\";\nimport {\n  InputBoxClearLayout,\n  InputBoxLayout,\n  InputBoxTagAvatarLayout,\n  InputBoxTagDismissLayout,\n  InputBoxTagLayout,\n  InputBoxTagWithAvatarLayout,\n  InputBoxTagWithDotLayout,\n  InputBoxTagWithIconLayout,\n  InputBoxWithSegmentsLayout,\n  InputBoxWithTagsLayout,\n  InputLayout,\n} from \"./input\";\nimport {\n  UInputAsterisk,\n  UInputBoxClearIcon,\n  UInputBoxClearRoot,\n  UInputBoxClearRootProps,\n  UInputBoxLeadingIcon,\n  UInputBoxRoot,\n  UInputBoxRootProps,\n  UInputBoxTagAvatarFallback,\n  UInputBoxTagAvatarIcon,\n  UInputBoxTagAvatarImage,\n  UInputBoxTagAvatarLabel,\n  UInputBoxTagAvatarRoot,\n  UInputBoxTagAvatarRootProps,\n  UInputBoxTagDismissIcon,\n  UInputBoxTagDismissRoot,\n  UInputBoxTagDismissRootProps,\n  UInputBoxTagDot,\n  UInputBoxTagIcon,\n  UInputBoxTagLabel,\n  UInputBoxTagRoot,\n  UInputBoxTagRootProps,\n  UInputBoxText,\n  UInputBoxTrailingIcon,\n  UInputDescription,\n  UInputLabel,\n  UInputRoot,\n  UInputRootProps,\n  useInputRootParentProps,\n} from \"./Input.underatoms\";\nimport React from \"react\";\n\n/*\n  ====================================\n  Input\n  ====================================\n*/\n\nexport type InputProps = UInputRootProps & {\n  label?: string;\n  description?: string;\n  boxSlot: React.ReactNode;\n};\n\nexport const Input = ({ label, description, boxSlot, ...props }: InputProps) => (\n  <InputLayout\n    renderRoot={(children, className) => (\n      <UInputRoot {...props} className={className}>\n        {children}\n      </UInputRoot>\n    )}\n    styleProps={{ className: props.className, inputProps: props }}\n    labelSlot={<UInputLabel>{label}</UInputLabel>}\n    descriptionSlot={<UInputDescription>{description}</UInputDescription>}\n    asteriskSlot={<UInputAsterisk />}\n    boxSlot={boxSlot}\n  />\n);\n\n/*\n  ====================================\n  InputBox\n  ====================================\n*/\n\nexport type InputBoxProps = UInputBoxRootProps & {\n  trailingIcon?: (className: string) => React.ReactNode;\n  leadingIcon?: (className: string) => React.ReactNode;\n  onClear?: () => void;\n};\nexport const InputBox = ({ trailingIcon, leadingIcon, onClear, ...props }: InputBoxProps) => {\n  const inputProps = useInputRootParentProps();\n  return (\n    <InputBoxLayout\n      renderRoot={(children, className) => (\n        <UInputBoxRoot {...props} className={className}>\n          {children}\n        </UInputBoxRoot>\n      )}\n      styleProps={{ className: props.className, inputProps }}\n      textSlot={<UInputBoxText />}\n      trailingIconSlot={trailingIcon && <UInputBoxTrailingIcon>{trailingIcon}</UInputBoxTrailingIcon>}\n      leadingIconSlot={leadingIcon && <UInputBoxLeadingIcon>{leadingIcon}</UInputBoxLeadingIcon>}\n      clearSlot={onClear && <InputBoxClear onPress={onClear} />}\n    />\n  );\n};\n\nexport type InputBoxWithSegmentsProps = UInputBoxRootProps & {\n  trailingIcon?: (className: string) => React.ReactNode;\n  segmentSlots: React.ReactNode[];\n  onClear?: () => void;\n};\nexport const InputBoxWithSegments = ({ trailingIcon, segmentSlots, onClear, ...props }: InputBoxWithSegmentsProps) => {\n  const inputProps = useInputRootParentProps();\n  return (\n    <InputBoxWithSegmentsLayout\n      renderRoot={(children, className) => (\n        <UInputBoxRoot {...props} className={className}>\n          {children}\n        </UInputBoxRoot>\n      )}\n      styleProps={{ className: props.className, inputProps }}\n      trailingIconSlot={trailingIcon && <UInputBoxTrailingIcon>{trailingIcon}</UInputBoxTrailingIcon>}\n      segmentSlots={segmentSlots}\n      clearSlot={onClear && <InputBoxClear onPress={onClear} />}\n    />\n  );\n};\n\nexport type InputBoxWithTagsProps = UInputBoxRootProps & {\n  trailingIcon?: (className: string) => React.ReactNode;\n  tagSlots?: React.ReactNode[];\n  onClear?: () => void;\n};\nexport const InputBoxWithTags = ({ trailingIcon, tagSlots, onClear, ...props }: InputBoxWithTagsProps) => {\n  const inputProps = useInputRootParentProps();\n  return (\n    <InputBoxWithTagsLayout\n      renderRoot={(children, className) => (\n        <UInputBoxRoot {...props} className={className}>\n          {children}\n        </UInputBoxRoot>\n      )}\n      styleProps={{ className: props.className, inputProps }}\n      textSlot={<UInputBoxText />}\n      trailingIconSlot={trailingIcon && <UInputBoxTrailingIcon>{trailingIcon}</UInputBoxTrailingIcon>}\n      tagSlots={tagSlots}\n      clearSlot={onClear && <InputBoxClear onPress={onClear} />}\n    />\n  );\n};\n\n/*\n  ====================================\n  InputBoxSegment\n  ====================================\n*/\n\n// not implemented\n\n/*\n  ====================================\n  InputBoxClear\n  ====================================\n*/\n\nexport type InputBoxClearProps = UInputBoxClearRootProps;\n\nexport const InputBoxClear = (props: InputBoxClearProps) => {\n  const inputProps = useInputRootParentProps();\n  return (\n    <InputBoxClearLayout\n      renderRoot={(children, className) => (\n        <UInputBoxClearRoot {...props} className={className}>\n          {children}\n        </UInputBoxClearRoot>\n      )}\n      styleProps={{ className: props.className, inputProps }}\n      iconSlot={<UInputBoxClearIcon />}\n    />\n  );\n};\n\n/*\n  ====================================\n  InputBoxTag\n  ====================================\n*/\n\nexport type InputBoxTagProps = UInputBoxTagRootProps & {\n  label?: string;\n  onDismiss?: () => void;\n};\nexport const InputBoxTag = ({ label, onDismiss, ...props }: InputBoxTagProps) => {\n  const inputProps = useInputRootParentProps();\n  return (\n    <InputBoxTagLayout\n      renderRoot={(children, className) => (\n        <UInputBoxTagRoot {...props} className={className}>\n          {children}\n        </UInputBoxTagRoot>\n      )}\n      styleProps={{ className: props.className, inputProps }}\n      labelSlot={label && <UInputBoxTagLabel>{label}</UInputBoxTagLabel>}\n      dismissSlot={onDismiss && <InputBoxTagDismiss onPress={onDismiss} />}\n    />\n  );\n};\n\nexport type InputBoxTagWithIconProps = UInputBoxTagRootProps & {\n  label?: string;\n  icon?: (className: string) => React.ReactNode;\n  onDismiss?: () => void;\n};\nexport const InputBoxTagWithIcon = ({ label, icon, onDismiss, ...props }: InputBoxTagWithIconProps) => {\n  const inputProps = useInputRootParentProps();\n  return (\n    <InputBoxTagWithIconLayout\n      renderRoot={(children, className) => (\n        <UInputBoxTagRoot {...props} className={className}>\n          {children}\n        </UInputBoxTagRoot>\n      )}\n      styleProps={{ className: props.className, inputProps }}\n      labelSlot={label && <UInputBoxTagLabel>{label}</UInputBoxTagLabel>}\n      iconSlot={icon && <UInputBoxTagIcon>{icon}</UInputBoxTagIcon>}\n      dismissSlot={onDismiss && <InputBoxTagDismiss onPress={onDismiss} />}\n    />\n  );\n};\n\nexport type InputBoxTagWithDotProps = UInputBoxTagRootProps & {\n  label?: string;\n  onDismiss?: () => void;\n};\nexport const InputBoxTagWithDot = ({ label, onDismiss, ...props }: InputBoxTagWithDotProps) => {\n  const inputProps = useInputRootParentProps();\n  return (\n    <InputBoxTagWithDotLayout\n      renderRoot={(children, className) => (\n        <UInputBoxTagRoot {...props} className={className}>\n          {children}\n        </UInputBoxTagRoot>\n      )}\n      styleProps={{ className: props.className, inputProps }}\n      labelSlot={label && <UInputBoxTagLabel>{label}</UInputBoxTagLabel>}\n      dotSlot={<UInputBoxTagDot />}\n      dismissSlot={onDismiss && <InputBoxTagDismiss onPress={onDismiss} />}\n    />\n  );\n};\n\nexport type InputBoxTagWithAvatarProps = UInputBoxTagRootProps & {\n  label?: string;\n  avatarSlot: React.ReactNode;\n  onDismiss?: () => void;\n};\nexport const InputBoxTagWithAvatar = ({ label, avatarSlot, onDismiss, ...props }: InputBoxTagWithAvatarProps) => {\n  const inputProps = useInputRootParentProps();\n  return (\n    <InputBoxTagWithAvatarLayout\n      renderRoot={(children, className) => (\n        <UInputBoxTagRoot {...props} className={className}>\n          {children}\n        </UInputBoxTagRoot>\n      )}\n      styleProps={{ className: props.className, inputProps }}\n      labelSlot={label && <UInputBoxTagLabel>{label}</UInputBoxTagLabel>}\n      avatarSlot={avatarSlot}\n      dismissSlot={onDismiss && <InputBoxTagDismiss onPress={onDismiss} />}\n    />\n  );\n};\n\n/*\n  ====================================\n  InputBoxTagDismiss\n  ====================================\n*/\n\nexport type InputBoxTagDismissProps = UInputBoxTagDismissRootProps;\n\nexport const InputBoxTagDismiss = (props: InputBoxTagDismissProps) => {\n  const inputProps = useInputRootParentProps();\n  return (\n    <InputBoxTagDismissLayout\n      renderRoot={(children, className) => (\n        <UInputBoxTagDismissRoot {...props} className={className}>\n          {children}\n        </UInputBoxTagDismissRoot>\n      )}\n      styleProps={{ className: props.className, inputProps }}\n      iconSlot={<UInputBoxTagDismissIcon />}\n    />\n  );\n};\n\n/*\n  ====================================\n  InputBoxTagAvatar\n  ====================================\n*/\n\nexport type InputBoxAvatarProps = Omit<UInputBoxTagAvatarRootProps, \"children\"> & {\n  imageProps?: AvatarImageProps;\n  fallbackText?: string;\n};\n\nexport const InputBoxAvatar = ({ imageProps, fallbackText, ...props }: InputBoxAvatarProps) => {\n  const inputProps = useInputRootParentProps();\n  return (\n    <InputBoxTagAvatarLayout\n      renderRoot={(children, className) => (\n        <UInputBoxTagAvatarRoot {...props} className={className}>\n          {children}\n        </UInputBoxTagAvatarRoot>\n      )}\n      styleProps={{ className: props.className, inputProps }}\n      imageSlot={imageProps && <UInputBoxTagAvatarImage {...imageProps} />}\n      labelSlot={\n        fallbackText && (\n          <UInputBoxTagAvatarFallback>\n            <UInputBoxTagAvatarLabel>{fallbackText}</UInputBoxTagAvatarLabel>\n          </UInputBoxTagAvatarFallback>\n        )\n      }\n    />\n  );\n};\n\nexport type InputBoxAvatarWithIconProps = Omit<UInputBoxTagAvatarRootProps, \"children\"> & {\n  imageProps?: AvatarImageProps;\n  fallbackIcon?: (className: string) => React.ReactNode;\n};\n\nexport const InputBoxAvatarWithIconProps = ({ imageProps, fallbackIcon, ...props }: InputBoxAvatarWithIconProps) => {\n  const inputProps = useInputRootParentProps();\n  return (\n    <InputBoxTagAvatarLayout\n      renderRoot={(children, className) => (\n        <UInputBoxTagAvatarRoot {...props} className={className}>\n          {children}\n        </UInputBoxTagAvatarRoot>\n      )}\n      styleProps={{ className: props.className, inputProps }}\n      imageSlot={imageProps && <UInputBoxTagAvatarImage {...imageProps} />}\n      labelSlot={\n        fallbackIcon && (\n          <UInputBoxTagAvatarFallback>\n            <UInputBoxTagAvatarIcon>{fallbackIcon}</UInputBoxTagAvatarIcon>\n          </UInputBoxTagAvatarFallback>\n        )\n      }\n    />\n  );\n};\n",
        "target": "underatom/components/react-aria/input/Input.atoms.tsx"
      },
      {
        "type": "registry:ui",
        "path": "ui/react-aria/input/Input.underatoms.tsx",
        "content": "import {\n  TextField,\n  Label,\n  Input,\n  TextFieldProps,\n  Text,\n  TextProps,\n  InputProps,\n  Button,\n  ButtonProps,\n} from \"react-aria-components\";\nimport { ReactNode, useRef, useState } from \"react\";\n\nimport * as RadixAvatar from \"@radix-ui/react-avatar\";\nimport { getGenericContext } from \"../../../utils/utils\";\nimport { X } from \"../../../utils/Icons\";\nimport { mergeProps } from \"react-aria\";\nimport {\n  InputStyleProps,\n  inputAsteriskClass,\n  inputBoxClass,\n  inputBoxClearClass,\n  inputBoxClearIconClass,\n  inputBoxLeadingIconClass,\n  inputBoxTagAvatarClass,\n  inputBoxTagAvatarIconClass,\n  inputBoxTagAvatarImageClass,\n  inputBoxTagAvatarLabelClass,\n  inputBoxTagClass,\n  inputBoxTagDismissClass,\n  inputBoxTagDismissIconClass,\n  inputBoxTagDotClass,\n  inputBoxTagIconClass,\n  inputBoxTagLabelClass,\n  inputBoxTextClass,\n  inputBoxTrailingIconClass,\n  inputClass,\n  inputDescriptionClass,\n  inputLabelClass,\n} from \"./input\";\n\n/*\n    ====================================\n    Input\n    ====================================\n*/\n\nexport const { Provider: InputInternalProvider, useComponentContext: useInputRootParentProps } = getGenericContext<\n  UInputRootProps & {\n    inputRef: React.RefObject<HTMLInputElement>;\n    isFocused: boolean;\n  }\n>(\"UInputRootProps\");\n\nexport type UInputRootProps = InputStyleProps &\n  TextFieldProps & {\n    className?: string;\n    children?: ReactNode;\n    placeholder?: string;\n  };\nexport const UInputRoot = (props: UInputRootProps) => {\n  const inputRef = useRef<HTMLInputElement>(null);\n  const [isFocused, setIsFocused] = useState(false);\n  return (\n    <TextField\n      {...mergeProps(props, {\n        onFocusChange: (isFocused: boolean) => setIsFocused(isFocused),\n      })}\n      className={inputClass({ className: props.className, inputProps: props })}\n    >\n      <InputInternalProvider value={{ ...props, inputRef, isFocused }}>{props.children}</InputInternalProvider>\n    </TextField>\n  );\n};\n\nexport type UInputLabel = React.ComponentPropsWithoutRef<typeof Label>;\nexport const UInputLabel = (props: UInputLabel) => {\n  const inputProps = useInputRootParentProps();\n  return <Label {...props} className={inputLabelClass({ className: props.className, inputProps })} />;\n};\n\nexport type UInputDescriptionProps = TextProps;\nexport const UInputDescription = (props: UInputDescriptionProps) => {\n  const inputProps = useInputRootParentProps();\n  return (\n    <Text {...props} className={inputDescriptionClass({ className: props.className, inputProps })} slot=\"description\" />\n  );\n};\n\nexport const UInputAsterisk = () => {\n  const inputProps = useInputRootParentProps();\n  return <span className={inputAsteriskClass({ inputProps })}> *</span>;\n};\n\n/*\n    ====================================\n    InputBox\n    ====================================\n*/\n\nexport type UInputBoxRootProps = React.ComponentPropsWithoutRef<\"div\">;\nexport const UInputBoxRoot = (props: UInputBoxRootProps) => {\n  const inputProps = useInputRootParentProps();\n  const { inputRef, isFocused, isDisabled } = useInputRootParentProps();\n  return (\n    <div\n      {...mergeProps(props, {\n        onClick: () => inputRef.current?.focus(),\n      })}\n      data-disabled={isDisabled}\n      data-ring={isFocused}\n      className={inputBoxClass({ className: props.className, inputProps })}\n    />\n  );\n};\n\nexport type UInputBoxTextProps = Omit<InputProps, \"placeholder\">;\nexport const UInputBoxText = (props: UInputBoxTextProps) => {\n  const inputProps = useInputRootParentProps();\n  const { inputRef, placeholder } = useInputRootParentProps();\n  return (\n    <Input\n      ref={inputRef}\n      placeholder={placeholder}\n      style={{ outline: \"none\", background: \"transparent\", width: \"100%\", height: \"100%\" }}\n      {...props}\n      className={inputBoxTextClass({ inputProps })}\n    />\n  );\n};\n\nexport type UInputBoxLeadingIconProps = {\n  children: (className: string) => ReactNode;\n  className?: string;\n};\nexport const UInputBoxLeadingIcon = ({ children, className }: UInputBoxLeadingIconProps) => {\n  const inputProps = useInputRootParentProps();\n  return <>{children(inputBoxLeadingIconClass({ className, inputProps }))}</>;\n};\n\nexport type UInputBoxTrailingIconProps = {\n  children: (className: string) => ReactNode;\n  className?: string;\n};\nexport const UInputBoxTrailingIcon = ({ children, className }: UInputBoxTrailingIconProps) => {\n  const inputProps = useInputRootParentProps();\n  return <>{children(inputBoxTrailingIconClass({ className, inputProps }))}</>;\n};\n\n/*\n    ====================================\n    InputBoxClear\n    ====================================\n*/\n\nexport type UInputBoxClearRootProps = ButtonProps & {\n  className?: string;\n};\nexport const UInputBoxClearRoot = ({ children, className, ...props }: UInputBoxClearRootProps) => {\n  const inputProps = useInputRootParentProps();\n  const { isDisabled: parentDisabled } = useInputRootParentProps();\n  return (\n    <Button\n      {...props}\n      isDisabled={parentDisabled || props.isDisabled}\n      className={inputBoxClearClass({ className, inputProps })}\n    >\n      {children}\n    </Button>\n  );\n};\n\nexport const UInputBoxClearIcon = () => {\n  const inputProps = useInputRootParentProps();\n  return <X className={inputBoxClearIconClass({ inputProps })} />;\n};\n\n/*\n    ====================================\n    InputBoxTag\n    ====================================\n*/\n\nexport type UInputBoxTagRootProps = React.ComponentPropsWithoutRef<\"div\">;\nexport const UInputBoxTagRoot = (props: UInputBoxTagRootProps) => {\n  const inputProps = useInputRootParentProps();\n  return <div {...props} className={inputBoxTagClass({ className: props.className, inputProps })} />;\n};\n\nexport type UInputBoxTagLabelProps = React.ComponentPropsWithoutRef<\"span\">;\nexport const UInputBoxTagLabel = ({ children, ...props }: UInputBoxTagLabelProps) => {\n  const inputProps = useInputRootParentProps();\n  return (\n    <span {...props} className={inputBoxTagLabelClass({ className: props.className, inputProps })}>\n      {children}\n    </span>\n  );\n};\n\nexport type UInputBoxTagIconProps = {\n  children: (className: string) => ReactNode;\n};\nexport const UInputBoxTagIcon = ({ children }: UInputBoxTagIconProps) => {\n  const inputProps = useInputRootParentProps();\n  return <>{children(inputBoxTagIconClass({ inputProps }))}</>;\n};\n\nexport type UInputBoxTagDotProps = React.ComponentPropsWithoutRef<\"span\">;\nexport const UInputBoxTagDot = (props: UInputBoxTagDotProps) => {\n  const inputProps = useInputRootParentProps();\n  return <span {...props} className={inputBoxTagDotClass({ inputProps })} />;\n};\n\n/*\n    ====================================\n    InputBoxTagDismiss\n    ====================================\n*/\n\nexport type UInputBoxTagDismissRootProps = ButtonProps & {\n  className?: string;\n};\nexport const UInputBoxTagDismissRoot = ({ children, className, ...props }: UInputBoxTagDismissRootProps) => {\n  const inputProps = useInputRootParentProps();\n  const { isDisabled: parentDisabled } = useInputRootParentProps();\n\n  return (\n    <Button\n      {...props}\n      isDisabled={parentDisabled || props.isDisabled}\n      className={inputBoxTagDismissClass({ className, inputProps })}\n    >\n      {children}\n    </Button>\n  );\n};\n\nexport const UInputBoxTagDismissIcon = () => {\n  const inputProps = useInputRootParentProps();\n  return <X className={inputBoxTagDismissIconClass({ inputProps })} />;\n};\n\n/*\n    ====================================\n    InputBoxTagAvatar\n    ====================================\n*/\n\nexport type UInputBoxTagAvatarRootProps = RadixAvatar.AvatarProps & {\n  /** Avatar content */\n  children: RadixAvatar.AvatarProps[\"children\"];\n};\n\nexport const UInputBoxTagAvatarRoot = (props: UInputBoxTagAvatarRootProps) => {\n  const inputProps = useInputRootParentProps();\n  return (\n    <RadixAvatar.Root {...props} className={inputBoxTagAvatarClass({ className: props.className, inputProps })}>\n      {props.children}\n    </RadixAvatar.Root>\n  );\n};\n\nexport type UInputBoxTagAvatarFallbackProps = RadixAvatar.AvatarFallbackProps;\nexport const UInputBoxTagAvatarFallback = (props: UInputBoxTagAvatarFallbackProps) => {\n  return <RadixAvatar.Fallback style={{ display: \"flex\" }} {...props} />;\n};\n\nexport type UInputBoxTagAvatarLabelProps = {\n  /** Text content */\n  children: ReactNode;\n};\nexport const UInputBoxTagAvatarLabel = ({ children }: UInputBoxTagAvatarLabelProps) => {\n  const inputProps = useInputRootParentProps();\n  return <span className={inputBoxTagAvatarLabelClass({ inputProps })}>{children}</span>;\n};\n\nexport type UInputBoxTagAvatarIconProps = {\n  /** Icon render function */\n  children: (className: string) => ReactNode;\n};\nexport const UInputBoxTagAvatarIcon = ({ children }: UInputBoxTagAvatarIconProps) => {\n  const inputProps = useInputRootParentProps();\n  return <>{children(inputBoxTagAvatarIconClass({ inputProps }))}</>;\n};\n\nexport type UInputBoxTagAvatarImageProps = RadixAvatar.AvatarImageProps;\nexport const UInputBoxTagAvatarImage = (props: UInputBoxTagAvatarImageProps) => {\n  const inputProps = useInputRootParentProps();\n  return <RadixAvatar.Image className={inputBoxTagAvatarImageClass({ inputProps })} {...props} />;\n};\n\n/*\n    ====================================\n    InputBoxSegment\n    ====================================\n*/\n\n// not implemented\n",
        "target": "underatom/components/react-aria/input/Input.underatoms.tsx"
      },
      {
        "type": "registry:ui",
        "path": "ui/react-aria/input/input.tsx",
        "content": "import { tv } from \"../../../utils/extendedTV\";\nimport type { RenderRoot } from \"../../../utils/utils\";\n\n/*\n  ====================================\n  Input\n  ====================================\n*/\n\nexport type InputStyleProps = {\n  size?: \"sm\" | \"md\" | \"lg\";\n  attachment?: \"none\" | \"start\" | \"center\" | \"end\";\n};\n\nexport type InputType = {\n  className?: string;\n  inputProps?: InputStyleProps;\n};\n\nexport const inputDefaults: Required<InputStyleProps> = {\n  size: \"md\",\n  attachment: \"none\",\n};\n\nexport const inputClass = ({ className }: InputType) => {\n  return `group/input  ${className}`;\n};\n\nexport const inputLabelClass = ({ className }: InputType) => {\n  return `text-base-900 text-sm font-text font-medium group-data-[disabled]/input:text-base-400 ${className}`;\n};\n\nexport const inputDescriptionClass = ({ className }: InputType) => {\n  return `text-base-700 text-sm font-text font-normal group-data-[disabled]/input:text-base-400 group-data-[invalid]/input:text-danger-500 group-data-[invalid]/input:group-data-[disabled]/input:text-base-400 ${className}`;\n};\n\nexport const inputAsteriskClass = ({ className }: InputType) => {\n  return `\n  group-data-[required]/input:[display:unset]\n  group-data-[required]/input:text-danger-500\n  group-data-[required]/input:text-[14px]\n  group-data-[required]/input:font-['Inter']\n  group-data-[required]/input:leading-[16.94318199157715px]\n  group-data-[required]/input:font-normal\n  group-data-[required]/input:group-data-[disabled]/input:text-base-400\n  hidden\n  ${className}\n  `;\n};\n\nexport const InputLayout = ({\n  renderRoot,\n  styleProps: { className },\n  labelSlot,\n  asteriskSlot,\n  boxSlot,\n  descriptionSlot,\n}: {\n  renderRoot: RenderRoot;\n  styleProps: InputType;\n  labelSlot: React.ReactNode;\n  asteriskSlot: React.ReactNode;\n  boxSlot: React.ReactNode;\n  descriptionSlot: React.ReactNode;\n}) =>\n  renderRoot(\n    <>\n      <div className=\"h-fit w-full flex flex-row items-baseline gap-1\">\n        {labelSlot}\n        {asteriskSlot}\n      </div>\n      {boxSlot}\n      {descriptionSlot}\n    </>,\n    `h-fit w-full flex flex-col gap-1 ${className}`,\n  );\nexport type InputBoxType = {\n  className?: string;\n  inputProps?: InputStyleProps;\n};\n\nexport const inputBoxClass = ({ className, inputProps }: InputBoxType) => {\n  const rootClass = tv({\n    base: `\ngroup/inputBox\n  border-solid\n  border-base-200\n  group-data-[disabled]/input:border-base-200\n  border-1\n  bg-base-50\n  shadow-sm\n  transition-all\n  group-data-[disabled]/input:bg-base-100\n  group-data-[disabled]/input:shadow-none\n  group-data-[invalid]/input:border-danger-400\n  hover:border-base-300\n  group-data-[invalid]/input:hover:border-danger-600\n  active:border-base-950\n  data-[ring=true]:border-base-950\n  group-data-[invalid]/input:active:border-danger-500\n  group-data-[invalid]/input:data-[ring=true]:border-danger-500\n  group-data-[disabled]/input:hover:border-base-200\n  group-data-[disabled]/input:active:border-base-200\n  group-data-[disabled]/input:data-[ring=true]:border-base-200\n  group-data-[invalid]/input:group-data-[disabled]/input:border-base-200\n  cursor-text\n  disabled:cursor-default\n  disabled:pointer-events-none\n`,\n    variants: {\n      attachment: {\n        none: \"rounded-md\",\n        start: \"rounded-l-md rounded-r-[0px]\",\n        center: \"\",\n        end: \"rounded-l-[0px] rounded-r-md\",\n      },\n    },\n\n    defaultVariants: { attachment: inputDefaults.attachment },\n  });\n  return rootClass({\n    class: className,\n    attachment: inputProps?.attachment,\n  });\n};\n\nexport const inputBoxTextClass = ({ className }: InputBoxType) => {\n  return `placeholder:text-base-800 text-sm font-text font-normal text-base-950 group-data-[disabled]/input:text-base-400 group-data-[disabled]/input:placeholder:text-base-400 ${className}`;\n};\n\nexport const inputBoxTrailingIconClass = ({ className }: InputBoxType) => {\n  return `w-5 h-5 text-base-600 group-data-[disabled]/input:text-base-400 group-data-[invalid]/input:text-danger-500 group-data-[invalid]/input:group-data-[disabled]/input:text-base-400 ${className}`;\n};\n\nexport const inputBoxLeadingIconClass = ({ className }: InputBoxType) => {\n  return `w-5 h-5 text-base-600 group-data-[disabled]/input:text-base-400 ${className}`;\n};\n\nexport const InputBoxLayout = ({\n  renderRoot,\n  styleProps: { className, inputProps },\n  leadingIconSlot,\n  textSlot,\n  clearSlot,\n  trailingIconSlot,\n}: {\n  renderRoot: RenderRoot;\n  styleProps: InputBoxType;\n  leadingIconSlot: React.ReactNode;\n  textSlot: React.ReactNode;\n  clearSlot: React.ReactNode;\n  trailingIconSlot: React.ReactNode;\n}) =>\n  renderRoot(\n    <>\n      <div\n        className={tv({\n          base: \"h-fit w-full flex flex-row items-center\",\n          variants: { size: { sm: \"gap-1\", md: \"gap-1\", lg: \"gap-[6px]\" } },\n\n          defaultVariants: { size: inputDefaults.size },\n        })({ size: inputProps?.size })}\n      >\n        {leadingIconSlot}\n        <div\n          className={tv({\n            base: \"h-fit w-fit flex flex-row\",\n            variants: { size: { sm: \"pl-[2px]\", md: \"pl-[2px]\", lg: \"pl-1\" } },\n\n            defaultVariants: { size: inputDefaults.size },\n          })({ size: inputProps?.size })}\n        >\n          {textSlot}\n        </div>\n      </div>\n      <div className=\"h-fit w-fit flex flex-row items-center gap-1\">\n        {clearSlot}\n        {trailingIconSlot}\n      </div>\n    </>,\n    tv({\n      base: \"w-full flex flex-row items-center gap-2\",\n      variants: { size: { sm: \"h-9 px-2\", md: \"h-11 px-2\", lg: \"h-[48px] pl-3 pr-5\" } },\n\n      defaultVariants: { size: inputDefaults.size },\n    })({\n      class: className,\n      size: inputProps?.size,\n    }),\n  );\nexport const InputBoxWithSegmentsLayout = ({\n  renderRoot,\n  styleProps: { className, inputProps },\n  segmentSlots,\n  clearSlot,\n  trailingIconSlot,\n}: {\n  renderRoot: RenderRoot;\n  styleProps: InputBoxType;\n  segmentSlots: React.ReactNode;\n  clearSlot: React.ReactNode;\n  trailingIconSlot: React.ReactNode;\n}) =>\n  renderRoot(\n    <>\n      <div className=\"h-fit w-full flex flex-row items-center gap-[6px]\">{segmentSlots}</div>\n      <div className=\"h-fit w-fit flex flex-row items-center gap-1\">\n        {clearSlot}\n        {trailingIconSlot}\n      </div>\n    </>,\n    tv({\n      base: \"w-full flex flex-row items-center\",\n      variants: {\n        size: {\n          sm: \"h-9 gap-1 pl-1 pr-[6px]\",\n          md: \"h-11 gap-2 pl-[6px] pr-[10px]\",\n          lg: \"h-[48px] gap-[6px] pl-2 pr-[14px]\",\n        },\n      },\n\n      defaultVariants: { size: inputDefaults.size },\n    })({\n      class: className,\n      size: inputProps?.size,\n    }),\n  );\nexport const InputBoxWithTagsLayout = ({\n  renderRoot,\n  styleProps: { className, inputProps },\n  tagSlots,\n  textSlot,\n  clearSlot,\n  trailingIconSlot,\n}: {\n  renderRoot: RenderRoot;\n  styleProps: InputBoxType;\n  tagSlots: React.ReactNode;\n  textSlot: React.ReactNode;\n  clearSlot: React.ReactNode;\n  trailingIconSlot: React.ReactNode;\n}) =>\n  renderRoot(\n    <>\n      {tagSlots}\n\n      <div\n        className={tv({\n          base: \"h-fit w-full flex flex-row\",\n          variants: { size: { sm: \"pl-1\", md: \"pl-[6px]\", lg: \"pl-2\" } },\n\n          defaultVariants: { size: inputDefaults.size },\n        })({ size: inputProps?.size })}\n      >\n        {textSlot}\n      </div>\n      <div className=\"h-fit w-fit flex flex-row items-center gap-1\">\n        {clearSlot}\n        {trailingIconSlot}\n      </div>\n    </>,\n    tv({\n      base: \"w-full flex flex-row items-center\",\n      variants: {\n        size: {\n          sm: \"h-9 gap-[2px] pl-1 pr-[6px]\",\n          md: \"h-11 gap-1 pl-[6px] pr-[10px]\",\n          lg: \"h-[48px] gap-[6px] pl-2 pr-[14px]\",\n        },\n      },\n\n      defaultVariants: { size: inputDefaults.size },\n    })({\n      class: className,\n      size: inputProps?.size,\n    }),\n  );\n\nexport type InputBoxTagType = {\n  className?: string;\n  inputProps?: InputStyleProps;\n};\n\nexport const inputBoxTagClass = ({ className }: InputBoxTagType) => {\n  return `group/inputBoxTag border-solid border-base-200 border-1 bg-base-50 rounded-sm group-data-[disabled]/input:bg-base-100 ${className}`;\n};\n\nexport const inputBoxTagLabelClass = ({ className }: InputBoxTagType) => {\n  return `text-base-950 text-sm font-text font-medium group-data-[disabled]/input:text-base-400 ${className}`;\n};\n\nexport const inputBoxTagIconClass = ({ className }: InputBoxTagType) => {\n  return `w-[14px] h-[14px] text-base-600 group-data-[disabled]/input:text-base-400 ${className}`;\n};\n\nexport const inputBoxTagDotClass = ({ className }: InputBoxTagType) => {\n  return `w-[6px] h-[6px] bg-primary-950 rounded-[50px] group-data-[disabled]/input:bg-base-400 ${className}`;\n};\n\nexport const InputBoxTagLayout = ({\n  renderRoot,\n  styleProps: { className, inputProps },\n  labelSlot,\n  dismissSlot,\n}: {\n  renderRoot: RenderRoot;\n  styleProps: InputBoxTagType;\n  labelSlot: React.ReactNode;\n  dismissSlot: React.ReactNode;\n}) =>\n  renderRoot(\n    <>\n      <div className=\"h-fit w-fit flex flex-row justify-center items-center gap-1\">{labelSlot}</div>\n      {dismissSlot}\n    </>,\n    tv({\n      base: \"w-fit flex flex-row justify-center items-center\",\n      variants: { size: { sm: \"h-7 gap-[10px] px-[6px]\", md: \"h-8 gap-[10px] px-2\", lg: \"h-9 gap-3 px-[10px]\" } },\n\n      defaultVariants: { size: inputDefaults.size },\n    })({\n      class: className,\n      size: inputProps?.size,\n    }),\n  );\nexport const InputBoxTagWithIconLayout = ({\n  renderRoot,\n  styleProps: { className, inputProps },\n  iconSlot,\n  labelSlot,\n  dismissSlot,\n}: {\n  renderRoot: RenderRoot;\n  styleProps: InputBoxTagType;\n  iconSlot: React.ReactNode;\n  labelSlot: React.ReactNode;\n  dismissSlot: React.ReactNode;\n}) =>\n  renderRoot(\n    <>\n      <div className=\"h-fit w-fit flex flex-row justify-center items-center gap-1\">\n        {iconSlot}\n        {labelSlot}\n      </div>\n      {dismissSlot}\n    </>,\n    tv({\n      base: \"w-fit flex flex-row justify-center items-center gap-[10px]\",\n      variants: { size: { sm: \"h-7 pl-1 pr-[6px]\", md: \"h-8 pl-[6px] pr-2\", lg: \"h-9 pl-2 pr-[10px]\" } },\n\n      defaultVariants: { size: inputDefaults.size },\n    })({\n      class: className,\n      size: inputProps?.size,\n    }),\n  );\nexport const InputBoxTagWithDotLayout = ({\n  renderRoot,\n  styleProps: { className, inputProps },\n  dotSlot,\n  labelSlot,\n  dismissSlot,\n}: {\n  renderRoot: RenderRoot;\n  styleProps: InputBoxTagType;\n  dotSlot: React.ReactNode;\n  labelSlot: React.ReactNode;\n  dismissSlot: React.ReactNode;\n}) =>\n  renderRoot(\n    <>\n      <div\n        className={tv({\n          base: \"h-fit w-fit flex flex-row justify-center items-center\",\n          variants: { size: { sm: \"gap-1\", md: \"gap-[6px]\", lg: \"gap-[6px]\" } },\n\n          defaultVariants: { size: inputDefaults.size },\n        })({ size: inputProps?.size })}\n      >\n        {dotSlot}\n        {labelSlot}\n      </div>\n      {dismissSlot}\n    </>,\n    tv({\n      base: \"w-fit flex flex-row justify-center items-center gap-[10px]\",\n      variants: { size: { sm: \"h-7 pl-2 pr-[6px]\", md: \"h-8 px-2\", lg: \"h-9 pl-2 pr-[10px]\" } },\n\n      defaultVariants: { size: inputDefaults.size },\n    })({\n      class: className,\n      size: inputProps?.size,\n    }),\n  );\nexport const InputBoxTagWithAvatarLayout = ({\n  renderRoot,\n  styleProps: { className, inputProps },\n  avatarSlot,\n  labelSlot,\n  dismissSlot,\n}: {\n  renderRoot: RenderRoot;\n  styleProps: InputBoxTagType;\n  avatarSlot: React.ReactNode;\n  labelSlot: React.ReactNode;\n  dismissSlot: React.ReactNode;\n}) =>\n  renderRoot(\n    <>\n      <div className=\"h-fit w-fit flex flex-row justify-center items-center gap-1\">\n        {avatarSlot}\n        {labelSlot}\n      </div>\n      {dismissSlot}\n    </>,\n    tv({\n      base: \"w-fit flex flex-row justify-center items-center gap-[10px]\",\n      variants: { size: { sm: \"h-7 pl-1 pr-[6px]\", md: \"h-8 pl-1 pr-2\", lg: \"h-9 pl-1 pr-[10px]\" } },\n\n      defaultVariants: { size: inputDefaults.size },\n    })({\n      class: className,\n      size: inputProps?.size,\n    }),\n  );\n\nexport type InputBoxClearType = {\n  className?: string;\n  inputProps?: InputStyleProps;\n};\n\nexport const inputBoxClearClass = ({ className }: InputBoxClearType) => {\n  return `group/inputBoxClear bg-base-100 data-[pressed]:bg-base-100 data-[disabled]:bg-base-100 rounded-[50px] hover:bg-base-200 data-[focus-visible]:bg-base-200 data-[focus-visible]:shadow-focus-ring ${className}`;\n};\n\nexport const inputBoxClearIconClass = ({ className }: InputBoxClearType) => {\n  return `\n  w-[14px]\n  h-[14px]\n  text-base-600\n  group-data-[pressed]/inputBoxClear:text-base-600\n  group-data-[focus-visible]/inputBoxClear:text-base-600\n  group-data-[disabled]/input:text-base-400\n  group-data-[disabled]/inputBoxClear:text-base-400\n  group-hover/inputBoxClear:text-base-950\n  group-data-[disabled]/input:group-hover/inputBoxClear:text-base-400\n  group-data-[disabled]/input:group-data-[pressed]/inputBoxClear:text-base-400\n  group-data-[disabled]/input:group-data-[focus-visible]/inputBoxClear:text-base-400\n  ${className}\n  `;\n};\n\nexport const InputBoxClearLayout = ({\n  renderRoot,\n  styleProps: { className },\n  iconSlot,\n}: {\n  renderRoot: RenderRoot;\n  styleProps: InputBoxClearType;\n  iconSlot: React.ReactNode;\n}) => renderRoot(<>{iconSlot}</>, `h-6 w-6 flex flex-row justify-center items-center gap-5 ${className}`);\n\nexport type InputBoxSegmentType = {\n  className?: string;\n  inputProps?: InputStyleProps;\n};\n\nexport const inputBoxSegmentClass = ({ className }: InputBoxSegmentType) => {\n  return `group/inputBoxSegment rounded-xs transition-all hover:bg-base-100 active:bg-base-100 data-[focus-visible]:bg-primary-950 ${className}`;\n};\n\nexport const inputBoxSegmentLabelClass = ({ className }: InputBoxSegmentType) => {\n  return `\n  text-base-950\n  group-placeholder/inputBoxSegment:text-sm\n  text-sm\n  group-placeholder/inputBoxSegment:font-text\n  font-text\n  group-placeholder/inputBoxSegment:font-medium\n  font-medium\n  group-placeholder/inputBoxSegment:text-base-600\n  group-data-[disabled]/input:group-placeholder/inputBoxSegment:text-base-400\n  group-active/inputBoxSegment:text-primary-500\n  group-data-[focus-visible]/inputBoxSegment:text-white\n  group-active/inputBoxSegment:group-placeholder/inputBoxSegment:text-base-600\n  group-data-[focus-visible]/inputBoxSegment:group-placeholder/inputBoxSegment:text-base-600\n  group-active/inputBoxSegment:group-placeholder/inputBoxSegment:text-primary-500\n  group-data-[focus-visible]/inputBoxSegment:group-placeholder/inputBoxSegment:text-white\n  ${className}\n  `;\n};\n\nexport const InputBoxSegmentLayout = ({\n  renderRoot,\n  styleProps: { className, inputProps },\n  labelSlot,\n}: {\n  renderRoot: RenderRoot;\n  styleProps: InputBoxSegmentType;\n  labelSlot: React.ReactNode;\n}) =>\n  renderRoot(\n    <>{labelSlot}</>,\n    tv({\n      base: \"w-fit flex flex-row justify-center items-center\",\n      variants: { size: { sm: \"h-7 px-[6px]\", md: \"h-8 px-2\", lg: \"h-9 px-3\" } },\n\n      defaultVariants: { size: inputDefaults.size },\n    })({\n      class: className,\n      size: inputProps?.size,\n    }),\n  );\n\nexport type InputBoxTagAvatarType = {\n  className?: string;\n  inputProps?: InputStyleProps;\n};\n\nexport const inputBoxTagAvatarClass = ({ className }: InputBoxTagAvatarType) => {\n  return `group/inputBoxTagAvatar bg-base-200 rounded-xs ${className}`;\n};\n\nexport const inputBoxTagAvatarImageClass = ({ className, inputProps }: InputBoxTagAvatarType) => {\n  const imageClass = tv({\n    base: \"rounded-xs group-data-[disabled]/input:opacity-[0.6]\",\n    variants: { size: { sm: \"w-5 h-5\", md: \"w-6 h-6\", lg: \"w-7 h-7\" } },\n\n    defaultVariants: { size: inputDefaults.size },\n  });\n  return imageClass({\n    class: className,\n\n    size: inputProps?.size,\n  });\n};\n\nexport const inputBoxTagAvatarLabelClass = ({ className }: InputBoxTagAvatarType) => {\n  return `text-base-600 text-xs font-text font-medium ${className}`;\n};\n\nexport const inputBoxTagAvatarIconClass = ({ className, inputProps }: InputBoxTagAvatarType) => {\n  const iconClass = tv({\n    base: \"text-base-600\",\n    variants: { size: { sm: \"w-3 h-3\", md: \"w-[14px] h-[14px]\", lg: \"w-5 h-5\" } },\n\n    defaultVariants: { size: inputDefaults.size },\n  });\n  return iconClass({\n    class: className,\n\n    size: inputProps?.size,\n  });\n};\n\nexport const InputBoxTagAvatarLayout = ({\n  renderRoot,\n  styleProps: { className, inputProps },\n  imageSlot,\n  labelSlot,\n}: {\n  renderRoot: RenderRoot;\n  styleProps: InputBoxTagAvatarType;\n  imageSlot: React.ReactNode;\n  labelSlot: React.ReactNode;\n}) =>\n  renderRoot(\n    <>\n      {imageSlot}\n      {labelSlot}\n    </>,\n    tv({\n      base: \"flex flex-row justify-center items-center\",\n      variants: { size: { sm: \"h-5 w-5\", md: \"h-6 w-6\", lg: \"h-7 w-7\" } },\n\n      defaultVariants: { size: inputDefaults.size },\n    })({\n      class: className,\n      size: inputProps?.size,\n    }),\n  );\nexport const InputBoxTagAvatarWithIconLayout = ({\n  renderRoot,\n  styleProps: { className, inputProps },\n  imageSlot,\n  iconSlot,\n}: {\n  renderRoot: RenderRoot;\n  styleProps: InputBoxTagAvatarType;\n  imageSlot: React.ReactNode;\n  iconSlot: React.ReactNode;\n}) =>\n  renderRoot(\n    <>\n      {imageSlot}\n      {iconSlot}\n    </>,\n    tv({\n      base: \"flex flex-row justify-center items-center\",\n      variants: { size: { sm: \"h-5 w-5\", md: \"h-6 w-6\", lg: \"h-7 w-7\" } },\n\n      defaultVariants: { size: inputDefaults.size },\n    })({\n      class: className,\n      size: inputProps?.size,\n    }),\n  );\n\nexport type InputBoxTagDismissType = {\n  className?: string;\n  inputProps?: InputStyleProps;\n};\n\nexport const inputBoxTagDismissClass = ({ className }: InputBoxTagDismissType) => {\n  return `\n  group/inputBoxTagDismiss\n  rounded-xs\n  hover:bg-base-100\n  data-[focus-visible]:bg-base-100\n  group-data-[disabled]/input:data-[pressed]:[background:unset]\n  group-data-[disabled]/input:hover:[background:unset]\n  group-data-[disabled]/input:data-[focus-visible]:[background:unset]\n  group-data-[disabled]/input:data-[disabled]:[background:unset]\n  data-[pressed]:[background:unset]\n  data-[disabled]:[background:unset]\n  data-[focus-visible]:shadow-focus-ring\n  group-data-[disabled]/input:data-[focus-visible]:shadow-none\n  ${className}\n  `;\n};\n\nexport const inputBoxTagDismissIconClass = ({ className }: InputBoxTagDismissType) => {\n  return `\n  w-[14px]\n  h-[14px]\n  text-base-600\n  group-data-[focus-visible]/inputBoxTagDismiss:text-base-600\n  group-data-[pressed]/inputBoxTagDismiss:text-base-900\n  group-data-[disabled]/input:text-base-400\n  group-data-[disabled]/inputBoxTagDismiss:text-base-400\n  group-data-[disabled]/input:group-data-[pressed]/inputBoxTagDismiss:text-base-400\n  group-data-[disabled]/input:group-data-[focus-visible]/inputBoxTagDismiss:text-base-400\n  ${className}\n  `;\n};\n\nexport const InputBoxTagDismissLayout = ({\n  renderRoot,\n  styleProps: { className, inputProps },\n  iconSlot,\n}: {\n  renderRoot: RenderRoot;\n  styleProps: InputBoxTagDismissType;\n  iconSlot: React.ReactNode;\n}) =>\n  renderRoot(\n    <>{iconSlot}</>,\n    tv({\n      base: \"flex flex-row justify-center items-center\",\n      variants: { size: { sm: \"h-5 w-5\", md: \"h-6 w-6\", lg: \"h-6 w-6\" } },\n\n      defaultVariants: { size: inputDefaults.size },\n    })({\n      class: className,\n      size: inputProps?.size,\n    }),\n  );\n\n",
        "target": "underatom/components/react-aria/input/input.tsx"
      }
    ]
  },
  {
    "name": "tag",
    "type": "registry:ui",
    "relativePath": "react-aria/tag",
    "stylingName": "tag.tsx",
    "dependencies": [
      "react-aria",
      "@radix-ui/react-avatar"
    ],
    "files": [
      {
        "type": "registry:ui",
        "path": "ui/react-aria/tag/Tag.atoms.tsx",
        "content": "import type { ReactNode } from \"react\";\nimport {\n  TagAvatarLayout,\n  TagAvatarWithIconLayout,\n  TagDismissLayout,\n  TagDotStyleProps,\n  TagLayout,\n  TagWithAvatarLayout,\n  TagWithDotLayout,\n  TagWithIconLayout,\n} from \"./tag\";\nimport {\n  UTagAvatarFallback,\n  UTagAvatarIcon,\n  UTagAvatarImage,\n  UTagAvatarLabel,\n  UTagAvatarRoot,\n  UTagAvatarRootProps,\n  UTagDismissIcon,\n  UTagDismissRoot,\n  UTagDismissRootProps,\n  UTagDot,\n  UTagIcon,\n  UTagLabel,\n  UTagRoot,\n  UTagRootProps,\n  useTagInternalProvider,\n} from \"./Tag.underatoms\";\nimport { AvatarImageProps } from \"@radix-ui/react-avatar\";\n\n/*\n  ====================================\n  Tag\n  ====================================\n*/\n\nexport type TagProps = UTagRootProps & { onDismiss?: () => void };\nexport const Tag = ({ children, onDismiss, ...props }: TagProps) => {\n  return (\n    <TagLayout\n      renderRoot={(children, className) => (\n        <UTagRoot {...props} className={className}>\n          {children}\n        </UTagRoot>\n      )}\n      styleProps={{ className: props.className, tagProps: props }}\n      labelSlot={<UTagLabel>{children}</UTagLabel>}\n      dismissSlot={onDismiss && <TagDismiss onPress={onDismiss} />}\n    />\n  );\n};\n\nexport type TagWithIconProps = UTagRootProps & {\n  icon: (className: string) => ReactNode;\n  onDismiss?: () => void;\n};\nexport const TagWithIcon = ({ icon, children, onDismiss, ...props }: TagWithIconProps) => {\n  return (\n    <TagWithIconLayout\n      renderRoot={(children, className) => (\n        <UTagRoot {...props} className={className}>\n          {children}\n        </UTagRoot>\n      )}\n      styleProps={{ className: props.className, tagProps: props }}\n      iconSlot={<UTagIcon>{icon}</UTagIcon>}\n      labelSlot={<UTagLabel>{children}</UTagLabel>}\n      dismissSlot={onDismiss && <TagDismiss onPress={onDismiss} />}\n    />\n  );\n};\n\nexport type TagWithDotProps = UTagRootProps & {\n  dotColor?: TagDotStyleProps[\"color\"];\n  onDismiss?: () => void;\n};\n\nexport const TagWithDot = ({ dotColor, children, onDismiss, ...props }: TagWithDotProps) => {\n  return (\n    <TagWithDotLayout\n      renderRoot={(children, className) => (\n        <UTagRoot {...props} className={className}>\n          {children}\n        </UTagRoot>\n      )}\n      styleProps={{ className: props.className, tagProps: props }}\n      dotSlot={<UTagDot color={dotColor} />}\n      labelSlot={<UTagLabel>{children}</UTagLabel>}\n      dismissSlot={onDismiss && <TagDismiss onPress={onDismiss} />}\n    />\n  );\n};\n\nexport type TagWithAvatarProps = UTagRootProps & {\n  avatarSlot: ReactNode;\n  onDismiss?: () => void;\n};\n\nexport const TagWithAvatar = ({ avatarSlot, children, onDismiss, ...props }: TagWithAvatarProps) => {\n  return (\n    <TagWithAvatarLayout\n      renderRoot={(children, className) => (\n        <UTagRoot {...props} className={className}>\n          {children}\n        </UTagRoot>\n      )}\n      styleProps={{ className: props.className, tagProps: props }}\n      avatarSlot={avatarSlot}\n      labelSlot={<UTagLabel>{children}</UTagLabel>}\n      dismissSlot={onDismiss && <TagDismiss onPress={onDismiss} />}\n    />\n  );\n};\n\n/*\n  ====================================\n  TagAvatar\n  ====================================\n*/\n\nexport type TagAvatarProps = Omit<UTagAvatarRootProps, \"children\"> & {\n  imageProps?: AvatarImageProps;\n  fallbackText?: string;\n};\nexport const TagAvatar = ({ imageProps, fallbackText, ...props }: TagAvatarProps) => {\n  const tagProps = useTagInternalProvider();\n  return (\n    <TagAvatarLayout\n      renderRoot={(children, className) => (\n        <UTagAvatarRoot {...props} className={className}>\n          {children}\n        </UTagAvatarRoot>\n      )}\n      styleProps={{ className: props.className, tagProps }}\n      imageSlot={imageProps && <UTagAvatarImage {...imageProps} />}\n      labelSlot={\n        fallbackText && (\n          <UTagAvatarFallback>\n            <UTagAvatarLabel>{fallbackText}</UTagAvatarLabel>\n          </UTagAvatarFallback>\n        )\n      }\n    />\n  );\n};\n\nexport type TagAvatarWithIconProps = Omit<UTagAvatarRootProps, \"children\"> & {\n  imageProps?: AvatarImageProps;\n  fallbackIcon?: (className: string) => ReactNode;\n};\nexport const TagAvatarWithIcon = ({ imageProps, fallbackIcon, ...props }: TagAvatarWithIconProps) => {\n  const tagProps = useTagInternalProvider();\n  return (\n    <TagAvatarWithIconLayout\n      renderRoot={(children, className) => (\n        <UTagAvatarRoot {...props} className={className}>\n          {children}\n        </UTagAvatarRoot>\n      )}\n      styleProps={{ className: props.className, tagProps }}\n      imageSlot={imageProps && <UTagAvatarImage {...imageProps} />}\n      iconSlot={\n        fallbackIcon && (\n          <UTagAvatarFallback>\n            <UTagAvatarIcon>{fallbackIcon}</UTagAvatarIcon>\n          </UTagAvatarFallback>\n        )\n      }\n    />\n  );\n};\n\n/*\n  ====================================\n  TagDismiss\n  ====================================\n*/\n\nexport type TagDismissProps = UTagDismissRootProps;\nexport const TagDismiss = (props: TagDismissProps) => {\n  const tagProps = useTagInternalProvider();\n  return (\n    <TagDismissLayout\n      renderRoot={(children, className) => (\n        <UTagDismissRoot {...props} className={className}>\n          {children}\n        </UTagDismissRoot>\n      )}\n      styleProps={{ className: props.className, tagProps }}\n      iconSlot={<UTagDismissIcon />}\n    />\n  );\n};\n",
        "target": "underatom/components/react-aria/tag/Tag.atoms.tsx"
      },
      {
        "type": "registry:ui",
        "path": "ui/react-aria/tag/Tag.underatoms.tsx",
        "content": "import type { ComponentPropsWithoutRef, ReactNode } from \"react\";\nimport { useRef } from \"react\";\nimport type { AriaButtonProps } from \"react-aria\";\nimport { mergeProps, useButton, useFocusRing } from \"react-aria\";\nimport * as RadixAvatar from \"@radix-ui/react-avatar\";\nimport { X } from \"../../../utils/Icons\";\nimport {\n  TagDotStyleProps,\n  TagStyleProps,\n  tagAvatarClass,\n  tagAvatarIconClass,\n  tagAvatarImageClass,\n  tagAvatarLabelClass,\n  tagClass,\n  tagDismissClass,\n  tagDismissIconClass,\n  tagDotClass,\n  tagIconClass,\n  tagLabelClass,\n} from \"./tag\";\nimport { getGenericContext } from \"../../../utils/utils\";\n\n/*\n  ====================================\n  Tag\n  ====================================\n*/\n\nexport const { Provider: TagInternalProvider, useComponentContext: useTagInternalProvider } =\n  getGenericContext<UTagRootProps>(\"UTagRootProps\");\n\nexport type UTagRootProps = TagStyleProps &\n  ComponentPropsWithoutRef<\"div\"> & {\n    className?: string;\n  };\nexport const UTagRoot = (props: UTagRootProps) => {\n  return (\n    <div {...props} className={tagClass({ className: props.className, tagProps: props })}>\n      <TagInternalProvider value={props}>{props.children}</TagInternalProvider>\n    </div>\n  );\n};\n\nexport type UTagLabelProps = {\n  /** Label content */\n  children: ReactNode;\n  className?: string;\n};\nexport const UTagLabel = ({ children, className }: UTagLabelProps) => {\n  const tagProps = useTagInternalProvider();\n  return <span className={tagLabelClass({ className, tagProps })}>{children}</span>;\n};\n\nexport type UTagIconProps = {\n  /** Icon render function */\n  children: (className: string) => ReactNode;\n  className?: string;\n};\nexport const UTagIcon = ({ children, className }: UTagIconProps) => {\n  const tagProps = useTagInternalProvider();\n  return <>{children(tagIconClass({ className, tagProps }))}</>;\n};\n\nexport type UTagDotProps = TagDotStyleProps & {\n  className?: string;\n};\nexport const UTagDot = ({ className, ...props }: UTagDotProps) => {\n  const tagProps = useTagInternalProvider();\n  return <span className={tagDotClass({ className, tagProps, tagDotProps: props })} />;\n};\n\n/*\n  ====================================\n  TagDismiss\n  ====================================\n*/\n\nexport type UTagDismissRootProps = AriaButtonProps<\"button\"> & {\n  innerRef?: React.RefObject<HTMLButtonElement>;\n  className?: string;\n};\nexport const UTagDismissRoot = ({ className, ...props }: UTagDismissRootProps) => {\n  const refs = useRef<HTMLButtonElement>(null);\n  const { innerRef = refs } = props;\n  const { buttonProps, isPressed } = useButton(props, refs);\n  const { isFocusVisible, focusProps } = useFocusRing();\n  const tagProps = useTagInternalProvider();\n\n  return (\n    <button\n      ref={innerRef}\n      data-active={isPressed}\n      data-ring={isFocusVisible}\n      className={tagDismissClass({ className, tagProps })}\n      {...mergeProps(buttonProps, focusProps)}\n    >\n      {props.children}\n    </button>\n  );\n};\n\nexport const UTagDismissIcon = () => {\n  const tagProps = useTagInternalProvider();\n  return <X className={tagDismissIconClass({ tagProps })} />;\n};\n\n/*\n  ====================================\n  TagAvatar\n  ====================================\n*/\n\nexport type UTagAvatarRootProps = RadixAvatar.AvatarProps & {\n  /** Avatar content */\n  children: RadixAvatar.AvatarProps[\"children\"];\n};\n\nexport const UTagAvatarRoot = (props: UTagAvatarRootProps) => {\n  const tagProps = useTagInternalProvider();\n  return (\n    <RadixAvatar.Root {...props} className={tagAvatarClass({ className: props.className, tagProps })}>\n      {props.children}\n    </RadixAvatar.Root>\n  );\n};\n\nexport type UTagAvatarFallbackProps = RadixAvatar.AvatarFallbackProps;\nexport const UTagAvatarFallback = (props: UTagAvatarFallbackProps) => {\n  return <RadixAvatar.Fallback style={{ display: \"flex\" }} {...props} />;\n};\n\nexport type UTagAvatarLabelProps = {\n  /** Text content */\n  children: ReactNode;\n};\nexport const UTagAvatarLabel = ({ children }: UTagAvatarLabelProps) => {\n  const tagProps = useTagInternalProvider();\n  return <span className={tagAvatarLabelClass({ tagProps })}>{children}</span>;\n};\n\nexport type UTagAvatarIconProps = {\n  /** Icon render function */\n  children: (className: string) => ReactNode;\n};\nexport const UTagAvatarIcon = ({ children }: UTagAvatarIconProps) => {\n  const tagProps = useTagInternalProvider();\n  return <>{children(tagAvatarIconClass({ tagProps }))}</>;\n};\n\nexport type UTagAvatarImageProps = RadixAvatar.AvatarImageProps;\nexport const UTagAvatarImage = (props: UTagAvatarImageProps) => {\n  const tagProps = useTagInternalProvider();\n  return <RadixAvatar.Image className={tagAvatarImageClass({ tagProps })} {...props} />;\n};\n",
        "target": "underatom/components/react-aria/tag/Tag.underatoms.tsx"
      },
      {
        "type": "registry:ui",
        "path": "ui/react-aria/tag/tag.tsx",
        "content": "import { tv } from \"../../../utils/extendedTV\";\nimport type { RenderRoot } from \"../../../utils/utils\";\n\n/*\n  ====================================\n  Tag\n  ====================================\n*/\n\nexport type TagStyleProps = {\n  size?: \"sm\" | \"md\" | \"lg\";\n};\n\nexport type TagDotStyleProps = {\n  color?: \"primary\" | \"base\" | \"green\" | \"red\";\n};\n\nexport type TagType = {\n  className?: string;\n  tagProps?: TagStyleProps;\n};\n\nexport type TagDotType = {\n  className?: string;\n  tagProps?: TagStyleProps;\n  tagDotProps?: TagDotStyleProps;\n};\n\nexport const tagDefaults: Required<TagStyleProps> = {\n  size: \"md\",\n};\n\nexport const tagDotDefaults: Required<TagDotStyleProps> = {\n  color: \"primary\",\n};\n\nexport const tagClass = ({ className }: TagType) => {\n  return `group/tag border-solid border-primary-200 border-1 bg-base-50 rounded-[16px] ${className}`;\n};\n\nexport const tagLabelClass = ({ className }: TagType) => {\n  return `text-base-950 text-sm font-text font-medium ${className}`;\n};\n\nexport const tagIconClass = ({ className }: TagType) => {\n  return `w-5 h-5 text-base-600 ${className}`;\n};\n\nexport const tagDotClass = ({ className, tagDotProps }: TagDotType) => {\n  const dotClass = tv({\n    base: \"w-[6px] h-[6px] rounded-xs\",\n    variants: {\n      dotColor: { base: \"bg-base-950\", primary: \"bg-primary-950\", green: \"bg-success-600\", red: \"bg-danger-500\" },\n    },\n\n    defaultVariants: { dotColor: tagDotDefaults.color },\n  });\n  return dotClass({\n    class: className,\n    dotColor: tagDotProps?.color,\n  });\n};\n\nexport const TagLayout = ({\n  renderRoot,\n  styleProps: { className, tagProps },\n  labelSlot,\n  dismissSlot,\n}: {\n  renderRoot: RenderRoot;\n  styleProps: TagType;\n  labelSlot: React.ReactNode;\n  dismissSlot: React.ReactNode;\n}) =>\n  renderRoot(\n    <>\n      <div\n        className={tv({\n          base: \"h-fit w-fit flex flex-row justify-center items-center gap-1\",\n          variants: { size: { sm: \"pr-1\", md: \"pr-1\", lg: \"pr-[6px]\" } },\n\n          defaultVariants: { size: tagDefaults.size },\n        })({ size: tagProps?.size })}\n      >\n        {labelSlot}\n      </div>\n      {dismissSlot}\n    </>,\n    tv({\n      base: \"w-fit flex flex-row justify-center items-center\",\n      variants: { size: { sm: \"h-7 pl-2 pr-1\", md: \"h-8 pl-[10px] pr-[6px]\", lg: \"h-9 pl-3 pr-[6px]\" } },\n\n      defaultVariants: { size: tagDefaults.size },\n    })({\n      class: className,\n      size: tagProps?.size,\n    }),\n  );\nexport const TagWithIconLayout = ({\n  renderRoot,\n  styleProps: { className, tagProps },\n  iconSlot,\n  labelSlot,\n  dismissSlot,\n}: {\n  renderRoot: RenderRoot;\n  styleProps: TagType;\n  iconSlot: React.ReactNode;\n  labelSlot: React.ReactNode;\n  dismissSlot: React.ReactNode;\n}) =>\n  renderRoot(\n    <>\n      <div\n        className={tv({\n          base: \"h-fit w-fit flex flex-row justify-center items-center\",\n          variants: { size: { sm: \"gap-1 pr-1\", md: \"gap-1 pr-1\", lg: \"gap-[6px] pr-[6px]\" } },\n\n          defaultVariants: { size: tagDefaults.size },\n        })({ size: tagProps?.size })}\n      >\n        {iconSlot}\n        {labelSlot}\n      </div>\n      {dismissSlot}\n    </>,\n    tv({\n      base: \"w-fit flex flex-row justify-center items-center\",\n      variants: { size: { sm: \"h-7 px-1\", md: \"h-8 px-[6px]\", lg: \"h-9 pl-2 pr-[6px]\" } },\n\n      defaultVariants: { size: tagDefaults.size },\n    })({\n      class: className,\n      size: tagProps?.size,\n    }),\n  );\nexport const TagWithDotLayout = ({\n  renderRoot,\n  styleProps: { className, tagProps },\n  dotSlot,\n  labelSlot,\n  dismissSlot,\n}: {\n  renderRoot: RenderRoot;\n  styleProps: TagType;\n  dotSlot: React.ReactNode;\n  labelSlot: React.ReactNode;\n  dismissSlot: React.ReactNode;\n}) =>\n  renderRoot(\n    <>\n      <div\n        className={tv({\n          base: \"h-fit w-fit flex flex-row justify-center items-center\",\n          variants: { size: { sm: \"gap-[6px] pr-1\", md: \"gap-[6px] pr-[6px]\", lg: \"gap-2 pr-[6px]\" } },\n\n          defaultVariants: { size: tagDefaults.size },\n        })({ size: tagProps?.size })}\n      >\n        {dotSlot}\n        {labelSlot}\n      </div>\n      {dismissSlot}\n    </>,\n    tv({\n      base: \"w-fit flex flex-row justify-center items-center\",\n      variants: { size: { sm: \"h-7 pl-2 pr-1\", md: \"h-8 pl-[10px] pr-[6px]\", lg: \"h-9 pl-[10px] pr-[6px]\" } },\n\n      defaultVariants: { size: tagDefaults.size },\n    })({\n      class: className,\n      size: tagProps?.size,\n    }),\n  );\nexport const TagWithAvatarLayout = ({\n  renderRoot,\n  styleProps: { className, tagProps },\n  avatarSlot,\n  labelSlot,\n  dismissSlot,\n}: {\n  renderRoot: RenderRoot;\n  styleProps: TagType;\n  avatarSlot: React.ReactNode;\n  labelSlot: React.ReactNode;\n  dismissSlot: React.ReactNode;\n}) =>\n  renderRoot(\n    <>\n      <div\n        className={tv({\n          base: \"h-fit w-fit flex flex-row justify-center items-center pr-1\",\n          variants: { size: { sm: \"gap-1\", md: \"gap-1\", lg: \"gap-[6px]\" } },\n\n          defaultVariants: { size: tagDefaults.size },\n        })({ size: tagProps?.size })}\n      >\n        {avatarSlot}\n        {labelSlot}\n      </div>\n      {dismissSlot}\n    </>,\n    tv({\n      base: \"w-fit flex flex-row items-center\",\n      variants: {\n        size: { sm: \"h-7 justify-center px-1\", md: \"h-8 justify-center pl-1 pr-[6px]\", lg: \"h-9 pl-1 pr-[6px]\" },\n      },\n\n      defaultVariants: { size: tagDefaults.size },\n    })({\n      class: className,\n      size: tagProps?.size,\n    }),\n  );\n\nexport type TagAvatarType = {\n  className?: string;\n  tagProps?: TagStyleProps;\n};\n\nexport const tagAvatarClass = ({ className }: TagAvatarType) => {\n  return `group/tagAvatar bg-base-200 rounded-lg ${className}`;\n};\n\nexport const tagAvatarImageClass = ({ className, tagProps }: TagAvatarType) => {\n  const imageClass = tv({\n    base: \"rounded-[50px]\",\n    variants: { size: { sm: \"w-5 h-5\", md: \"w-6 h-6\", lg: \"w-7 h-7\" } },\n\n    defaultVariants: { size: tagDefaults.size },\n  });\n  return imageClass({\n    class: className,\n\n    size: tagProps?.size,\n  });\n};\n\nexport const tagAvatarLabelClass = ({ className }: TagAvatarType) => {\n  return `text-primary-600 text-xs font-text font-medium ${className}`;\n};\n\nexport const tagAvatarIconClass = ({ className, tagProps }: TagAvatarType) => {\n  const iconClass = tv({\n    base: \"text-primary-600\",\n    variants: { size: { sm: \"w-3 h-3\", lg: \"w-5 h-5\", md: \"w-[14px] h-[14px]\" } },\n\n    defaultVariants: { size: tagDefaults.size },\n  });\n  return iconClass({\n    class: className,\n\n    size: tagProps?.size,\n  });\n};\n\nexport const TagAvatarLayout = ({\n  renderRoot,\n  styleProps: { className, tagProps },\n  imageSlot,\n  labelSlot,\n}: {\n  renderRoot: RenderRoot;\n  styleProps: TagAvatarType;\n  imageSlot: React.ReactNode;\n  labelSlot: React.ReactNode;\n}) =>\n  renderRoot(\n    <>\n      {imageSlot}\n      {labelSlot}\n    </>,\n    tv({\n      base: \"flex flex-row justify-center items-center\",\n      variants: { size: { sm: \"h-5 w-5\", md: \"h-6 w-6\", lg: \"h-7 w-7\" } },\n\n      defaultVariants: { size: tagDefaults.size },\n    })({\n      class: className,\n      size: tagProps?.size,\n    }),\n  );\nexport const TagAvatarWithIconLayout = ({\n  renderRoot,\n  styleProps: { className, tagProps },\n  imageSlot,\n  iconSlot,\n}: {\n  renderRoot: RenderRoot;\n  styleProps: TagAvatarType;\n  imageSlot: React.ReactNode;\n  iconSlot: React.ReactNode;\n}) =>\n  renderRoot(\n    <>\n      {imageSlot}\n      {iconSlot}\n    </>,\n    tv({\n      base: \"flex flex-row justify-center items-center\",\n      variants: { size: { sm: \"h-5 w-5\", md: \"h-6 w-6\", lg: \"h-7 w-7\" } },\n\n      defaultVariants: { size: tagDefaults.size },\n    })({\n      class: className,\n      size: tagProps?.size,\n    }),\n  );\n\nexport type TagDismissType = {\n  className?: string;\n  tagProps?: TagStyleProps;\n};\n\nexport const tagDismissClass = ({ className }: TagDismissType) => {\n  return `group/tagDismiss rounded-[16px] transition-all disabled:[background:unset] data-[active=true]:[background:unset] hover:bg-base-200 data-[ring=true]:bg-base-200 data-[ring=true]:shadow-focus-ring disabled:pointer-events-none ${className}`;\n};\n\nexport const tagDismissIconClass = ({ className }: TagDismissType) => {\n  return `w-[14px] h-[14px] text-base-600 group-data-[active=true]/tagDismiss:text-base-600 group-disabled/tagDismiss:text-base-400 group-hover/tagDismiss:text-base-950 group-data-[ring=true]/tagDismiss:text-base-950 ${className}`;\n};\n\nexport const TagDismissLayout = ({\n  renderRoot,\n  styleProps: { className, tagProps },\n  iconSlot,\n}: {\n  renderRoot: RenderRoot;\n  styleProps: TagDismissType;\n  iconSlot: React.ReactNode;\n}) =>\n  renderRoot(\n    <>{iconSlot}</>,\n    tv({\n      base: \"flex flex-row justify-center items-center\",\n      variants: { size: { sm: \"h-5 w-5\", md: \"h-5 w-5\", lg: \"h-6 w-6\" } },\n\n      defaultVariants: { size: tagDefaults.size },\n    })({\n      class: className,\n      size: tagProps?.size,\n    }),\n  );\n",
        "target": "underatom/components/react-aria/tag/tag.tsx"
      }
    ]
  },
  {
    "name": "textarea",
    "type": "registry:ui",
    "relativePath": "react-aria/textarea",
    "stylingName": "textarea.tsx",
    "dependencies": [
      "react-aria-components",
      "react-aria",
      "@radix-ui/react-avatar",
      "@radix-ui/react-radio-group"
    ],
    "files": [
      {
        "type": "registry:ui",
        "path": "ui/react-aria/textarea/Textarea.atoms.tsx",
        "content": "import { AvatarImageProps } from \"@radix-ui/react-avatar\";\nimport {\n  TextareaBoxLayout,\n  TextareaBoxTagAvatarLayout,\n  TextareaBoxTagAvatarWithIconLayout,\n  TextareaBoxTagDismissLayout,\n  TextareaBoxTagLayout,\n  TextareaBoxTagWithAvatarLayout,\n  TextareaBoxTagWithDotLayout,\n  TextareaBoxTagWithIconLayout,\n  TextareaBoxWithTagsLayout,\n  TextareaLayout,\n} from \"./textarea\";\nimport {\n  UTextareaAsterisk,\n  UTextareaBoxRoot,\n  UTextareaBoxRootProps,\n  UTextareaBoxTagAvatarFallback,\n  UTextareaBoxTagAvatarIcon,\n  UTextareaBoxTagAvatarImage,\n  UTextareaBoxTagAvatarLabel,\n  UTextareaBoxTagAvatarRoot,\n  UTextareaBoxTagAvatarRootProps,\n  UTextareaBoxTagDismissIcon,\n  UTextareaBoxTagDismissRoot,\n  UTextareaBoxTagDismissRootProps,\n  UTextareaBoxTagDot,\n  UTextareaBoxTagIcon,\n  UTextareaBoxTagLabel,\n  UTextareaBoxTagRoot,\n  UTextareaBoxTagRootProps,\n  UTextareaBoxText,\n  UTextareaDescription,\n  UTextareaLabel,\n  UTextareaRoot,\n  UTextareaRootProps,\n  useTextareaRootParentProps,\n} from \"./Textarea.underatoms\";\nimport React from \"react\";\n\n/*\n  ====================================\n  Textarea\n  ====================================\n*/\n\nexport type TextareaProps = UTextareaRootProps & {\n  label?: string;\n  description?: string;\n  boxSlot: React.ReactNode;\n};\n\nexport const Textarea = ({ label, description, boxSlot, ...props }: TextareaProps) => (\n  <TextareaLayout\n    renderRoot={(children, className) => (\n      <UTextareaRoot {...props} className={className}>\n        {children}\n      </UTextareaRoot>\n    )}\n    styleProps={{ className: props.className, textareaProps: props }}\n    labelSlot={<UTextareaLabel>{label}</UTextareaLabel>}\n    descriptionSlot={<UTextareaDescription>{description}</UTextareaDescription>}\n    asteriskSlot={<UTextareaAsterisk />}\n    boxSlot={boxSlot}\n  />\n);\n\n/*\n  ====================================\n  TextareaBox\n  ====================================\n*/\n\nexport type TextareaBoxProps = UTextareaBoxRootProps;\nexport const TextareaBox = (props: TextareaBoxProps) => {\n  const textareaProps = useTextareaRootParentProps();\n  return (\n    <TextareaBoxLayout\n      renderRoot={(children, className) => (\n        <UTextareaBoxRoot {...props} className={className}>\n          {children}\n        </UTextareaBoxRoot>\n      )}\n      styleProps={{ className: props.className, textareaProps }}\n      textSlot={<UTextareaBoxText />}\n    />\n  );\n};\n\nexport type TextareaBoxWithTagsProps = UTextareaBoxRootProps & {\n  tagSlots?: React.ReactNode[];\n};\nexport const TextareaBoxWithTags = ({ tagSlots, ...props }: TextareaBoxWithTagsProps) => {\n  const textareaProps = useTextareaRootParentProps();\n  return (\n    <TextareaBoxWithTagsLayout\n      renderRoot={(children, className) => (\n        <UTextareaBoxRoot {...props} className={className}>\n          {children}\n        </UTextareaBoxRoot>\n      )}\n      styleProps={{ className: props.className, textareaProps }}\n      textSlot={<UTextareaBoxText />}\n      tagSlots={tagSlots}\n    />\n  );\n};\n\n/*\n  ====================================\n  TextareaBoxTag\n  ====================================\n*/\n\nexport type TextareaBoxTagProps = UTextareaBoxTagRootProps & {\n  label?: string;\n  onDismiss?: () => void;\n};\nexport const TextareaBoxTag = ({ label, onDismiss, ...props }: TextareaBoxTagProps) => {\n  const textareaProps = useTextareaRootParentProps();\n  return (\n    <TextareaBoxTagLayout\n      renderRoot={(children, className) => (\n        <UTextareaBoxTagRoot {...props} className={className}>\n          {children}\n        </UTextareaBoxTagRoot>\n      )}\n      styleProps={{ className: props.className, textareaProps }}\n      labelSlot={label && <UTextareaBoxTagLabel>{label}</UTextareaBoxTagLabel>}\n      dismissSlot={onDismiss && <TextareaBoxTagDismiss onPress={onDismiss} />}\n    />\n  );\n};\n\nexport type TextareaBoxTagWithIconProps = UTextareaBoxTagRootProps & {\n  label?: string;\n  icon?: (className: string) => React.ReactNode;\n  onDismiss?: () => void;\n};\nexport const TextareaBoxTagWithIcon = ({ label, icon, onDismiss, ...props }: TextareaBoxTagWithIconProps) => {\n  const textareaProps = useTextareaRootParentProps();\n  return (\n    <TextareaBoxTagWithIconLayout\n      renderRoot={(children, className) => (\n        <UTextareaBoxTagRoot {...props} className={className}>\n          {children}\n        </UTextareaBoxTagRoot>\n      )}\n      styleProps={{ className: props.className, textareaProps }}\n      labelSlot={label && <UTextareaBoxTagLabel>{label}</UTextareaBoxTagLabel>}\n      iconSlot={icon && <UTextareaBoxTagIcon>{icon}</UTextareaBoxTagIcon>}\n      dismissSlot={onDismiss && <TextareaBoxTagDismiss onPress={onDismiss} />}\n    />\n  );\n};\n\nexport type TextareaBoxTagWithDotProps = UTextareaBoxTagRootProps & {\n  label?: string;\n  onDismiss?: () => void;\n};\nexport const TextareaBoxTagWithDot = ({ label, onDismiss, ...props }: TextareaBoxTagWithDotProps) => {\n  const textareaProps = useTextareaRootParentProps();\n  return (\n    <TextareaBoxTagWithDotLayout\n      renderRoot={(children, className) => (\n        <UTextareaBoxTagRoot {...props} className={className}>\n          {children}\n        </UTextareaBoxTagRoot>\n      )}\n      styleProps={{ className: props.className, textareaProps }}\n      labelSlot={label && <UTextareaBoxTagLabel>{label}</UTextareaBoxTagLabel>}\n      dotSlot={<UTextareaBoxTagDot />}\n      dismissSlot={onDismiss && <TextareaBoxTagDismiss onPress={onDismiss} />}\n    />\n  );\n};\n\nexport type TextareaBoxTagWithAvatarProps = UTextareaBoxTagRootProps & {\n  label?: string;\n  avatarSlot: React.ReactNode;\n  onDismiss?: () => void;\n};\nexport const TextareaBoxTagWithAvatar = ({ label, avatarSlot, onDismiss, ...props }: TextareaBoxTagWithAvatarProps) => {\n  const textareaProps = useTextareaRootParentProps();\n  return (\n    <TextareaBoxTagWithAvatarLayout\n      renderRoot={(children, className) => (\n        <UTextareaBoxTagRoot {...props} className={className}>\n          {children}\n        </UTextareaBoxTagRoot>\n      )}\n      styleProps={{ className: props.className, textareaProps }}\n      labelSlot={label && <UTextareaBoxTagLabel>{label}</UTextareaBoxTagLabel>}\n      avatarSlot={avatarSlot}\n      dismissSlot={onDismiss && <TextareaBoxTagDismiss onPress={onDismiss} />}\n    />\n  );\n};\n\n/*\n  ====================================\n  TextareaBoxTagDismiss\n  ====================================\n*/\n\nexport type TextareaBoxTagDismissProps = UTextareaBoxTagDismissRootProps;\nexport const TextareaBoxTagDismiss = (props: TextareaBoxTagDismissProps) => {\n  const textareaProps = useTextareaRootParentProps();\n  return (\n    <TextareaBoxTagDismissLayout\n      renderRoot={(children, className) => (\n        <UTextareaBoxTagDismissRoot {...props} className={className}>\n          {children}\n        </UTextareaBoxTagDismissRoot>\n      )}\n      styleProps={{ className: props.className, textareaProps }}\n      iconSlot={<UTextareaBoxTagDismissIcon />}\n    />\n  );\n};\n\n/*\n  ====================================\n  TextareaBoxTagAvatar\n  ====================================\n*/\n\nexport type TextareaBoxAvatarProps = Omit<UTextareaBoxTagAvatarRootProps, \"children\"> & {\n  imageProps?: AvatarImageProps;\n  fallbackText?: string;\n};\nexport const TextareaBoxAvatar = ({ imageProps, fallbackText, ...props }: TextareaBoxAvatarProps) => {\n  const textareaProps = useTextareaRootParentProps();\n  return (\n    <TextareaBoxTagAvatarLayout\n      renderRoot={(children, className) => (\n        <UTextareaBoxTagAvatarRoot {...props} className={className}>\n          {children}\n        </UTextareaBoxTagAvatarRoot>\n      )}\n      styleProps={{ className: props.className, textareaProps }}\n      imageSlot={imageProps && <UTextareaBoxTagAvatarImage {...imageProps} />}\n      labelSlot={\n        <UTextareaBoxTagAvatarFallback>\n          <UTextareaBoxTagAvatarLabel>{fallbackText}</UTextareaBoxTagAvatarLabel>\n        </UTextareaBoxTagAvatarFallback>\n      }\n    />\n  );\n};\n\nexport type TextareaBoxAvatarWithIconProps = Omit<UTextareaBoxTagAvatarRootProps, \"children\"> & {\n  imageProps?: AvatarImageProps;\n  fallbackIcon?: (className: string) => React.ReactNode;\n};\nexport const TextareaBoxAvatarWithIconProps = ({\n  imageProps,\n  fallbackIcon,\n  ...props\n}: TextareaBoxAvatarWithIconProps) => {\n  const textareaProps = useTextareaRootParentProps();\n  return (\n    <TextareaBoxTagAvatarWithIconLayout\n      renderRoot={(children, className) => (\n        <UTextareaBoxTagAvatarRoot {...props} className={className}>\n          {children}\n        </UTextareaBoxTagAvatarRoot>\n      )}\n      styleProps={{ className: props.className, textareaProps }}\n      iconSlot={\n        fallbackIcon && (\n          <UTextareaBoxTagAvatarFallback>\n            <UTextareaBoxTagAvatarIcon>{fallbackIcon}</UTextareaBoxTagAvatarIcon>\n          </UTextareaBoxTagAvatarFallback>\n        )\n      }\n      imageSlot={imageProps && <UTextareaBoxTagAvatarImage {...imageProps} />}\n    />\n  );\n};\n",
        "target": "underatom/components/react-aria/textarea/Textarea.atoms.tsx"
      },
      {
        "type": "registry:ui",
        "path": "ui/react-aria/textarea/Textarea.underatoms.tsx",
        "content": "import {\n  TextField,\n  Label,\n  TextArea,\n  TextFieldProps,\n  Text,\n  TextProps,\n  TextAreaProps,\n  Button,\n  ButtonProps,\n} from \"react-aria-components\";\nimport { ReactNode, useRef, useState } from \"react\";\nimport * as RadixAvatar from \"@radix-ui/react-avatar\";\nimport { getGenericContext } from \"../../../utils/utils\";\nimport { X } from \"../../../utils/Icons\";\nimport { mergeProps } from \"react-aria\";\nimport {\n  TextareaStyleProps,\n  textareaAsteriskClass,\n  textareaBoxClass,\n  textareaBoxTagAvatarClass,\n  textareaBoxTagAvatarIconClass,\n  textareaBoxTagAvatarImageClass,\n  textareaBoxTagAvatarLabelClass,\n  textareaBoxTagClass,\n  textareaBoxTagDismissClass,\n  textareaBoxTagDismissIconClass,\n  textareaBoxTagDotClass,\n  textareaBoxTagIconClass,\n  textareaBoxTagLabelClass,\n  textareaBoxTextClass,\n  textareaClass,\n  textareaDescriptionClass,\n  textareaLabelClass,\n} from \"./textarea\";\n\n/*\n  ====================================\n  Textarea\n  ====================================\n*/\n\nexport const { Provider: TextareaInternalProvider, useComponentContext: useTextareaRootParentProps } =\n  getGenericContext<\n    UTextareaRootProps & {\n      textareaRef: React.RefObject<HTMLTextAreaElement>;\n      isFocused: boolean;\n    }\n  >(\"UTextareaRootProps\");\n\nexport type UTextareaRootProps = TextareaStyleProps &\n  TextFieldProps & {\n    className?: string;\n    children?: ReactNode;\n    textareaProps?: TextAreaProps;\n  };\nexport const UTextareaRoot = (props: UTextareaRootProps) => {\n  const textareaRef = useRef<HTMLTextAreaElement>(null);\n  const [isFocused, setIsFocused] = useState(false);\n\n  return (\n    <TextField\n      {...mergeProps(props, {\n        onFocusChange: (isFocused: boolean) => setIsFocused(isFocused),\n      })}\n      className={textareaClass({ className: props.className, textareaProps: props })}\n    >\n      <TextareaInternalProvider value={{ ...props, textareaRef, isFocused }}>{props.children}</TextareaInternalProvider>\n    </TextField>\n  );\n};\n\nexport type UTextareaLabel = React.ComponentPropsWithoutRef<typeof Label>;\nexport const UTextareaLabel = (props: UTextareaLabel) => {\n  const textareaProps = useTextareaRootParentProps();\n  return <Label {...props} className={textareaLabelClass({ className: props.className, textareaProps })} />;\n};\n\nexport type UTextareaDescriptionProps = TextProps;\nexport const UTextareaDescription = (props: UTextareaDescriptionProps) => {\n  const textareaProps = useTextareaRootParentProps();\n  return (\n    <Text\n      {...props}\n      className={textareaDescriptionClass({ className: props.className, textareaProps })}\n      slot=\"description\"\n    />\n  );\n};\n\nexport const UTextareaAsterisk = () => {\n  const textareaProps = useTextareaRootParentProps();\n  return <span className={textareaAsteriskClass({ textareaProps })}> *</span>;\n};\n\n/*\n  ====================================\n  TextareaBox\n  ====================================\n*/\nexport type UTextareaBoxRootProps = React.ComponentPropsWithoutRef<\"div\">;\nexport const UTextareaBoxRoot = (props: UTextareaBoxRootProps) => {\n  const textareaProps = useTextareaRootParentProps();\n  const { textareaRef, isFocused } = useTextareaRootParentProps();\n\n  return (\n    <div\n      {...mergeProps(props, {\n        onClick: () => textareaRef.current?.focus(),\n      })}\n      data-ring={isFocused}\n      className={textareaBoxClass({ className: props.className, textareaProps })}\n    />\n  );\n};\n\nexport const UTextareaBoxText = () => {\n  const textareaRootProps = useTextareaRootParentProps();\n  const { textareaProps, textareaRef } = useTextareaRootParentProps();\n  return (\n    <TextArea\n      ref={textareaRef}\n      style={{ outline: \"none\", background: \"transparent\", width: \"100%\", height: \"100%\", resize: \"none\" }}\n      {...textareaProps}\n      className={textareaBoxTextClass({ textareaProps: textareaRootProps })}\n    />\n  );\n};\n\n// export type UTextareaBoxLeadingIconProps = {\n//   children: (className: string) => ReactNode;\n//   className?: string;\n// };\n// export const UTextareaBoxLeadingIcon = ({ children, className }: UTextareaBoxLeadingIconProps) => {\n//   const { leadingIconClass } = useTextareaBoxClasses();\n//   return <>{children(leadingIconClass(className))}</>;\n// };\n\n// export type UTextareaBoxTrailingIconProps = {\n//   children: (className: string) => ReactNode;\n//   className?: string;\n// };\n// export const UTextareaBoxTrailingIcon = ({ children, className }: UTextareaBoxTrailingIconProps) => {\n//   const { trailingIconClass } = useTextareaBoxClasses();\n//   return <>{children(trailingIconClass(className))}</>;\n// };\n\n/*\n  ====================================\n  TextareaBoxTag\n  ====================================\n*/\n\nexport type UTextareaBoxTagRootProps = React.ComponentPropsWithoutRef<\"div\">;\nexport const UTextareaBoxTagRoot = (props: UTextareaBoxTagRootProps) => {\n  const textareaProps = useTextareaRootParentProps();\n  return <div {...props} className={textareaBoxTagClass({ className: props.className, textareaProps })} />;\n};\n\nexport type UTextareaBoxTagLabelProps = React.ComponentPropsWithoutRef<\"span\">;\nexport const UTextareaBoxTagLabel = ({ children, ...props }: UTextareaBoxTagLabelProps) => {\n  const textareaProps = useTextareaRootParentProps();\n  return (\n    <span {...props} className={textareaBoxTagLabelClass({ className: props.className, textareaProps })}>\n      {children}\n    </span>\n  );\n};\n\nexport type UTextareaBoxTagIconProps = {\n  children: (className: string) => ReactNode;\n};\nexport const UTextareaBoxTagIcon = ({ children }: UTextareaBoxTagIconProps) => {\n  const textareaProps = useTextareaRootParentProps();\n  return <>{children(textareaBoxTagIconClass({ textareaProps }))}</>;\n};\n\nexport type UTextareaBoxTagDotProps = React.ComponentPropsWithoutRef<\"span\">;\nexport const UTextareaBoxTagDot = (props: UTextareaBoxTagDotProps) => {\n  const textareaProps = useTextareaRootParentProps();\n  return <span {...props} className={textareaBoxTagDotClass({ className: props.className, textareaProps })} />;\n};\n\n/*\n  ====================================\n  TextareaBoxTagDismiss\n  ====================================\n*/\n\nexport type UTextareaBoxTagDismissRootProps = ButtonProps & {\n  className?: string;\n};\nexport const UTextareaBoxTagDismissRoot = ({ children, className, ...props }: UTextareaBoxTagDismissRootProps) => {\n  const textareaProps = useTextareaRootParentProps();\n  const { isDisabled: parentDisabled } = useTextareaRootParentProps();\n  const fullProps = { ...props, isDisabled: parentDisabled || props.isDisabled };\n\n  return (\n    <Button {...fullProps} className={textareaBoxTagDismissClass({ className, textareaProps })}>\n      {children}\n    </Button>\n  );\n};\n\nexport const UTextareaBoxTagDismissIcon = () => {\n  const textareaProps = useTextareaRootParentProps();\n  return <X className={textareaBoxTagDismissIconClass({ textareaProps })} />;\n};\n\n/*\n  ====================================\n  TextareaBoxTagAvatar\n  ====================================\n*/\n\nexport type UTextareaBoxTagAvatarRootProps = RadixAvatar.AvatarProps & {\n  /** Avatar content */\n  children: RadixAvatar.AvatarProps[\"children\"];\n};\n\nexport const UTextareaBoxTagAvatarRoot = (props: UTextareaBoxTagAvatarRootProps) => {\n  const textareaProps = useTextareaRootParentProps();\n  return (\n    <RadixAvatar.Root {...props} className={textareaBoxTagAvatarClass({ className: props.className, textareaProps })}>\n      {props.children}\n    </RadixAvatar.Root>\n  );\n};\n\nexport type UTextareaBoxTagAvatarFallbackProps = RadixAvatar.AvatarFallbackProps;\nexport const UTextareaBoxTagAvatarFallback = (props: UTextareaBoxTagAvatarFallbackProps) => {\n  return <RadixAvatar.Fallback {...props} />;\n};\n\nexport type UTextareaBoxTagAvatarLabelProps = {\n  /** Text content */\n  children: ReactNode;\n};\nexport const UTextareaBoxTagAvatarLabel = ({ children }: UTextareaBoxTagAvatarLabelProps) => {\n  const textareaProps = useTextareaRootParentProps();\n  return <span className={textareaBoxTagAvatarLabelClass({ textareaProps })}>{children}</span>;\n};\n\nexport type UTextareaBoxTagAvatarIconProps = {\n  /** Icon render function */\n  children: (className: string) => ReactNode;\n};\nexport const UTextareaBoxTagAvatarIcon = ({ children }: UTextareaBoxTagAvatarIconProps) => {\n  const textareaProps = useTextareaRootParentProps();\n  return <>{children(textareaBoxTagAvatarIconClass({ textareaProps }))}</>;\n};\n\nexport type UTextareaBoxTagAvatarImageProps = RadixAvatar.AvatarImageProps;\nexport const UTextareaBoxTagAvatarImage = (props: UTextareaBoxTagAvatarImageProps) => {\n  const textareaProps = useTextareaRootParentProps();\n  return (\n    <RadixAvatar.Image\n      className={textareaBoxTagAvatarImageClass({ className: props.className, textareaProps })}\n      {...props}\n    />\n  );\n};\n",
        "target": "underatom/components/react-aria/textarea/Textarea.underatoms.tsx"
      },
      {
        "type": "registry:ui",
        "path": "ui/react-aria/textarea/textarea.tsx",
        "content": "import { tv } from \"../../../utils/extendedTV\";\nimport type { RenderRoot } from \"../../../utils/utils\";\n\n/*\n  ====================================\n  Textarea\n  ====================================\n*/\n\nexport type TextareaStyleProps = {\n  size?: \"sm\" | \"md\" | \"lg\";\n};\n\nexport type TextareaType = {\n  className?: string;\n  textareaProps?: TextareaStyleProps;\n};\n\nexport const textareaDefaults: Required<TextareaStyleProps> = {\n  size: \"md\",\n};\n\nexport const textareaClass = ({ className }: TextareaType) => {\n  return `group/textarea  ${className}`;\n};\n\nexport const textareaLabelClass = ({ className }: TextareaType) => {\n  return `text-base-900 text-sm font-text font-medium group-data-[disabled]/textarea:text-base-400 ${className}`;\n};\n\nexport const textareaDescriptionClass = ({ className }: TextareaType) => {\n  return `text-base-700 text-sm font-text font-normal group-data-[invalid]/textarea:text-danger-500 group-data-[disabled]/textarea:text-base-400 group-data-[invalid]/textarea:group-data-[disabled]/textarea:text-base-400 ${className}`;\n};\n\nexport const textareaAsteriskClass = ({ className }: TextareaType) => {\n  return `\n  group-data-[required]/textarea:[display:unset]\n  group-data-[required]/textarea:text-danger-500\n  group-data-[required]/textarea:text-[14px]\n  group-data-[required]/textarea:font-['Inter']\n  group-data-[required]/textarea:leading-[16.94318199157715px]\n  group-data-[required]/textarea:font-normal\n  group-data-[required]/textarea:group-data-[disabled]/textarea:text-base-400\n  hidden\n  ${className}\n  `;\n};\n\nexport const TextareaLayout = ({\n  renderRoot,\n  styleProps: { className },\n  labelSlot,\n  asteriskSlot,\n  boxSlot,\n  descriptionSlot,\n}: {\n  renderRoot: RenderRoot;\n  styleProps: TextareaType;\n  labelSlot: React.ReactNode;\n  asteriskSlot: React.ReactNode;\n  boxSlot: React.ReactNode;\n  descriptionSlot: React.ReactNode;\n}) =>\n  renderRoot(\n    <>\n      <div className=\"h-fit w-full flex flex-row items-baseline gap-1\">\n        {labelSlot}\n        {asteriskSlot}\n      </div>\n      {boxSlot}\n      {descriptionSlot}\n    </>,\n    `h-full w-full flex flex-col gap-[2px] ${className}`,\n  );\nexport type TextareaBoxType = {\n  className?: string;\n  textareaProps?: TextareaStyleProps;\n};\n\nexport const textareaBoxClass = ({ className }: TextareaBoxType) => {\n  return `\n  group/textareaBox\n  border-solid\n  border-base-200\n  group-data-[disabled]/textarea:border-base-200\n  border-1\n  bg-base-50\n  shadow-sm\n  rounded-md\n  cursor-text\n  transition-all\n  group-data-[invalid]/textarea:border-danger-400\n  hover:border-base-300\n  group-data-[invalid]/textarea:hover:border-danger-600\n  &:not(:has(button:active)):active:border-base-950\n  data-[ring=true]:border-base-950\n  group-data-[invalid]/textarea:&:not(:has(button:active)):active:border-danger-500\n  group-data-[invalid]/textarea:data-[ring=true]:border-danger-500\n  group-data-[disabled]/textarea:bg-base-100\n  group-data-[disabled]/textarea:shadow-none\n  group-data-[disabled]/textarea:pointer-events-none\n  group-data-[disabled]/textarea:hover:border-base-200\n  group-data-[disabled]/textarea:&:not(:has(button:active)):active:border-base-200\n  group-data-[disabled]/textarea:data-[ring=true]:border-base-200\n  group-data-[invalid]/textarea:group-data-[disabled]/textarea:border-base-200\n  ${className}\n  `;\n};\n\nexport const textareaBoxTextClass = ({ className }: TextareaBoxType) => {\n  return `placeholder:text-base-800 text-sm font-text font-normal group-data-[disabled]/textarea:text-base-400 text-base-950 group-data-[disabled]/textarea:placeholder:text-base-400 ${className}`;\n};\n\nexport const TextareaBoxLayout = ({\n  renderRoot,\n  styleProps: { className, textareaProps },\n  textSlot,\n}: {\n  renderRoot: RenderRoot;\n  styleProps: TextareaBoxType;\n  textSlot: React.ReactNode;\n}) =>\n  renderRoot(\n    <>\n      <div className=\"h-fit w-full flex flex-row gap-[6px]\">{textSlot}</div>\n    </>,\n    tv({\n      base: \"h-full w-full flex flex-row gap-2\",\n      variants: { size: { sm: \"pt-1 px-2\", md: \"pt-[6px] px-2\", lg: \"pt-2 pl-3 pr-5\" } },\n\n      defaultVariants: { size: textareaDefaults.size },\n    })({\n      class: className,\n      size: textareaProps?.size,\n    }),\n  );\nexport const TextareaBoxWithTagsLayout = ({\n  renderRoot,\n  styleProps: { className, textareaProps },\n  tagSlots,\n  textSlot,\n}: {\n  renderRoot: RenderRoot;\n  styleProps: TextareaBoxType;\n  tagSlots: React.ReactNode;\n  textSlot: React.ReactNode;\n}) =>\n  renderRoot(\n    <>\n      <div className=\"h-fit w-full flex flex-row gap-[6px]\">\n        <div className=\"h-fit w-full flex flex-col gap-[6px]\">\n          <div className=\"h-fit w-full flex flex-row gap-[6px]\">{tagSlots}</div>\n          {textSlot}\n        </div>\n      </div>\n    </>,\n    tv({\n      base: \"h-full w-full flex flex-row gap-2\",\n      variants: { size: { sm: \"pt-2 px-2\", md: \"pt-2 px-2\", lg: \"pt-3 px-3\" } },\n\n      defaultVariants: { size: textareaDefaults.size },\n    })({\n      class: className,\n      size: textareaProps?.size,\n    }),\n  );\n\nexport type TextareaBoxTagType = {\n  className?: string;\n  textareaProps?: TextareaStyleProps;\n};\n\nexport const textareaBoxTagClass = ({ className }: TextareaBoxTagType) => {\n  return `group/textareaBoxTag border-solid border-base-200 border-1 bg-base-50 rounded-sm group-data-[disabled]/textarea:bg-base-100 ${className}`;\n};\n\nexport const textareaBoxTagLabelClass = ({ className }: TextareaBoxTagType) => {\n  return `text-base-950 text-sm font-text font-medium group-data-[disabled]/textarea:text-base-400 ${className}`;\n};\n\nexport const textareaBoxTagIconClass = ({ className }: TextareaBoxTagType) => {\n  return `w-[14px] h-[14px] text-base-950 group-data-[disabled]/textarea:text-base-400 ${className}`;\n};\n\nexport const textareaBoxTagDotClass = ({ className }: TextareaBoxTagType) => {\n  return `w-[6px] h-[6px] bg-primary-950 rounded-[50px] group-data-[disabled]/textarea:bg-base-400 ${className}`;\n};\n\nexport const TextareaBoxTagLayout = ({\n  renderRoot,\n  styleProps: { className, textareaProps },\n  labelSlot,\n  dismissSlot,\n}: {\n  renderRoot: RenderRoot;\n  styleProps: TextareaBoxTagType;\n  labelSlot: React.ReactNode;\n  dismissSlot: React.ReactNode;\n}) =>\n  renderRoot(\n    <>\n      {labelSlot}\n      {dismissSlot}\n    </>,\n    tv({\n      base: \"w-fit flex flex-row justify-center items-center gap-[10px]\",\n      variants: { size: { sm: \"h-7 px-[6px]\", md: \"h-8 px-2\", lg: \"h-8 px-2\" } },\n\n      defaultVariants: { size: textareaDefaults.size },\n    })({\n      class: className,\n      size: textareaProps?.size,\n    }),\n  );\nexport const TextareaBoxTagWithIconLayout = ({\n  renderRoot,\n  styleProps: { className, textareaProps },\n  iconSlot,\n  labelSlot,\n  dismissSlot,\n}: {\n  renderRoot: RenderRoot;\n  styleProps: TextareaBoxTagType;\n  iconSlot: React.ReactNode;\n  labelSlot: React.ReactNode;\n  dismissSlot: React.ReactNode;\n}) =>\n  renderRoot(\n    <>\n      <div\n        className={tv({\n          base: \"h-fit w-fit flex flex-row justify-center items-center\",\n          variants: { size: { sm: \"gap-1\", md: \"gap-[6px]\", lg: \"gap-[6px]\" } },\n\n          defaultVariants: { size: textareaDefaults.size },\n        })({ size: textareaProps?.size })}\n      >\n        {iconSlot}\n        {labelSlot}\n      </div>\n      {dismissSlot}\n    </>,\n    tv({\n      base: \"w-fit flex flex-row justify-center items-center gap-[10px]\",\n      variants: { size: { sm: \"h-7 pl-1 pr-[6px]\", md: \"h-8 pl-[6px] pr-2\", lg: \"h-8 pl-[6px] pr-2\" } },\n\n      defaultVariants: { size: textareaDefaults.size },\n    })({\n      class: className,\n      size: textareaProps?.size,\n    }),\n  );\nexport const TextareaBoxTagWithDotLayout = ({\n  renderRoot,\n  styleProps: { className, textareaProps },\n  dotSlot,\n  labelSlot,\n  dismissSlot,\n}: {\n  renderRoot: RenderRoot;\n  styleProps: TextareaBoxTagType;\n  dotSlot: React.ReactNode;\n  labelSlot: React.ReactNode;\n  dismissSlot: React.ReactNode;\n}) =>\n  renderRoot(\n    <>\n      <div\n        className={tv({\n          base: \"h-fit w-fit flex flex-row justify-center items-center\",\n          variants: { size: { sm: \"gap-1\", md: \"gap-[6px]\", lg: \"gap-[6px]\" } },\n\n          defaultVariants: { size: textareaDefaults.size },\n        })({ size: textareaProps?.size })}\n      >\n        {dotSlot}\n        {labelSlot}\n      </div>\n      {dismissSlot}\n    </>,\n    tv({\n      base: \"w-fit flex flex-row justify-center items-center gap-[10px]\",\n      variants: { size: { sm: \"h-7 pl-2 pr-[6px]\", md: \"h-8 px-2\", lg: \"h-8 px-2\" } },\n\n      defaultVariants: { size: textareaDefaults.size },\n    })({\n      class: className,\n      size: textareaProps?.size,\n    }),\n  );\nexport const TextareaBoxTagWithAvatarLayout = ({\n  renderRoot,\n  styleProps: { className, textareaProps },\n  avatarSlot,\n  labelSlot,\n  dismissSlot,\n}: {\n  renderRoot: RenderRoot;\n  styleProps: TextareaBoxTagType;\n  avatarSlot: React.ReactNode;\n  labelSlot: React.ReactNode;\n  dismissSlot: React.ReactNode;\n}) =>\n  renderRoot(\n    <>\n      <div\n        className={tv({\n          base: \"h-fit w-fit flex flex-row justify-center items-center\",\n          variants: { size: { sm: \"gap-1\", md: \"gap-[6px]\", lg: \"\" } },\n\n          defaultVariants: { size: textareaDefaults.size },\n        })({ size: textareaProps?.size })}\n      >\n        {avatarSlot}\n        {labelSlot}\n      </div>\n      {dismissSlot}\n    </>,\n    tv({\n      base: \"w-fit flex flex-row justify-center items-center gap-[10px]\",\n      variants: { size: { sm: \"h-7 pl-1 pr-[6px]\", md: \"h-8 pl-1 pr-2\", lg: \"\" } },\n\n      defaultVariants: { size: textareaDefaults.size },\n    })({\n      class: className,\n      size: textareaProps?.size,\n    }),\n  );\n\nexport type TextareaBoxTagAvatarType = {\n  className?: string;\n  textareaProps?: TextareaStyleProps;\n};\n\nexport const textareaBoxTagAvatarClass = ({ className }: TextareaBoxTagAvatarType) => {\n  return `group/textareaBoxTagAvatar bg-base-200 rounded-xs ${className}`;\n};\n\nexport const textareaBoxTagAvatarImageClass = ({ className, textareaProps }: TextareaBoxTagAvatarType) => {\n  const imageClass = tv({\n    base: \"rounded-xs group-data-[disabled]/textarea:opacity-[0.6]\",\n    variants: { size: { sm: \"w-5 h-5\", md: \"w-6 h-6\", lg: \"w-6 h-6\" } },\n\n    defaultVariants: { size: textareaDefaults.size },\n  });\n  return imageClass({\n    class: className,\n\n    size: textareaProps?.size,\n  });\n};\n\nexport const textareaBoxTagAvatarLabelClass = ({ className }: TextareaBoxTagAvatarType) => {\n  return `text-base-600 text-xs font-text font-medium ${className}`;\n};\n\nexport const textareaBoxTagAvatarIconClass = ({ className, textareaProps }: TextareaBoxTagAvatarType) => {\n  const iconClass = tv({\n    base: \"text-base-600\",\n    variants: { size: { sm: \"w-3 h-3\", md: \"w-[14px] h-[14px]\", lg: \"w-[14px] h-[14px]\" } },\n\n    defaultVariants: { size: textareaDefaults.size },\n  });\n  return iconClass({\n    class: className,\n\n    size: textareaProps?.size,\n  });\n};\n\nexport const TextareaBoxTagAvatarLayout = ({\n  renderRoot,\n  styleProps: { className, textareaProps },\n  imageSlot,\n  labelSlot,\n}: {\n  renderRoot: RenderRoot;\n  styleProps: TextareaBoxTagAvatarType;\n  imageSlot: React.ReactNode;\n  labelSlot: React.ReactNode;\n}) =>\n  renderRoot(\n    <>\n      {imageSlot}\n      {labelSlot}\n    </>,\n    tv({\n      base: \"flex flex-row justify-center items-center\",\n      variants: { size: { sm: \"h-5 w-5\", md: \"h-6 w-6\", lg: \"h-6 w-6\" } },\n\n      defaultVariants: { size: textareaDefaults.size },\n    })({\n      class: className,\n      size: textareaProps?.size,\n    }),\n  );\nexport const TextareaBoxTagAvatarWithIconLayout = ({\n  renderRoot,\n  styleProps: { className, textareaProps },\n  imageSlot,\n  iconSlot,\n}: {\n  renderRoot: RenderRoot;\n  styleProps: TextareaBoxTagAvatarType;\n  imageSlot: React.ReactNode;\n  iconSlot: React.ReactNode;\n}) =>\n  renderRoot(\n    <>\n      {imageSlot}\n      {iconSlot}\n    </>,\n    tv({\n      base: \"flex flex-row justify-center items-center\",\n      variants: { size: { sm: \"h-5 w-5\", md: \"h-6 w-6\", lg: \"h-6 w-6\" } },\n\n      defaultVariants: { size: textareaDefaults.size },\n    })({\n      class: className,\n      size: textareaProps?.size,\n    }),\n  );\n\nexport type TextareaBoxTagDismissType = {\n  className?: string;\n  textareaProps?: TextareaStyleProps;\n};\n\nexport const textareaBoxTagDismissClass = ({ className }: TextareaBoxTagDismissType) => {\n  return `\n  group/textareaBoxTagDismiss\n  rounded-xs\n  opacity-[0.6]\n  data-[pressed]:opacity-[0.6]\n  data-[disabled]:opacity-[0.6]\n  group-data-[disabled]/textarea:opacity-[0.6]\n  hover:bg-base-100\n  data-[focus-visible]:bg-base-100\n  hover:[opacity:unset]\n  data-[focus-visible]:[opacity:unset]\n  data-[pressed]:[background:unset]\n  data-[disabled]:[background:unset]\n  group-data-[disabled]/textarea:hover:[background:unset]\n  group-data-[disabled]/textarea:data-[focus-visible]:[background:unset]\n  data-[focus-visible]:shadow-focus-ring\n  group-data-[disabled]/textarea:pointer-events-none\n  data-[disabled]:pointer-events-none\n  group-data-[disabled]/textarea:data-[focus-visible]:shadow-none\n  group-data-[disabled]/textarea:hover:opacity-[0.6]\n  group-data-[disabled]/textarea:data-[focus-visible]:opacity-[0.6]\n  ${className}\n  `;\n};\n\nexport const textareaBoxTagDismissIconClass = ({ className }: TextareaBoxTagDismissType) => {\n  return `\n  w-[14px]\n  h-[14px]\n  text-base-600\n  group-data-[focus-visible]/textareaBoxTagDismiss:text-base-600\n  group-data-[pressed]/textareaBoxTagDismiss:text-base-950\n  group-data-[disabled]/textarea:text-base-400\n  group-data-[disabled]/textareaBoxTagDismiss:text-base-400\n  group-data-[disabled]/textarea:group-data-[pressed]/textareaBoxTagDismiss:text-base-400\n  group-data-[disabled]/textarea:group-data-[focus-visible]/textareaBoxTagDismiss:text-base-400\n  ${className}\n  `;\n};\n\nexport const TextareaBoxTagDismissLayout = ({\n  renderRoot,\n  styleProps: { className, textareaProps },\n  iconSlot,\n}: {\n  renderRoot: RenderRoot;\n  styleProps: TextareaBoxTagDismissType;\n  iconSlot: React.ReactNode;\n}) =>\n  renderRoot(\n    <>{iconSlot}</>,\n    tv({\n      base: \"flex flex-row justify-center items-center\",\n      variants: { size: { sm: \"h-5 w-5\", md: \"h-6 w-6\", lg: \"h-6 w-6\" } },\n\n      defaultVariants: { size: textareaDefaults.size },\n    })({\n      class: className,\n      size: textareaProps?.size,\n    }),\n  );\n\n",
        "target": "underatom/components/react-aria/textarea/textarea.tsx"
      }
    ]
  }
]